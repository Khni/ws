/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * @khaled/ims-server
 * OpenAPI spec version: 1.3.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AuthResponseType,
  CreateOrgnization200,
  CreateRole200,
  FacebookLoginParams,
  GetCountries200Item,
  GetCountriesParams,
  GetFilterdTimeZones200Item,
  GetOwnedOrganizations200Item,
  GetStates200Item,
  GetStatesParams,
  GetUserOrganizations200Item,
  GoogleLoginParams,
  LocalLoginInput,
  Logout200,
  LogoutBody,
  OrganizationFormData200,
  OtpSignUpInput,
  PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId,
  RefreshToken200,
  RefreshTokenInput,
  RequestOtp200,
  RequestOtpBody,
  ResetForgettenPassword200,
  ResetForgettenPasswordInput,
  RoleCreateBody,
  RoleUpdateBody,
  UpdateRole200,
  UserResponseType,
  VerifyOtp200,
  VerifyOtpBody
} from './model';

import { customInstance } from './mutator/custom-instance';
import type { ErrorType } from './mutator/custom-instance';
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getProfile = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserResponseType>(
      {url: `/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProfileQueryKey = () => {
    return [`/user`] as const;
    }

    
export const getGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof getProfile>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfile>>> = ({ signal }) => getProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getProfile>>>
export type GetProfileQueryError = ErrorType<unknown>



export function useGetProfile<TData = Awaited<ReturnType<typeof getProfile>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProfileQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const googleLogin = (
    params: GoogleLoginParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/oauth/google`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGoogleLoginQueryKey = (params?: GoogleLoginParams,) => {
    return [`/oauth/google`, ...(params ? [params]: [])] as const;
    }

    
export const getGoogleLoginQueryOptions = <TData = Awaited<ReturnType<typeof googleLogin>>, TError = ErrorType<null>>(params: GoogleLoginParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGoogleLoginQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof googleLogin>>> = ({ signal }) => googleLogin(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData> & { queryKey: QueryKey }
}

export type GoogleLoginQueryResult = NonNullable<Awaited<ReturnType<typeof googleLogin>>>
export type GoogleLoginQueryError = ErrorType<null>



export function useGoogleLogin<TData = Awaited<ReturnType<typeof googleLogin>>, TError = ErrorType<null>>(
 params: GoogleLoginParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof googleLogin>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGoogleLoginQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const facebookLogin = (
    params: FacebookLoginParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/oauth/facebook`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFacebookLoginQueryKey = (params?: FacebookLoginParams,) => {
    return [`/oauth/facebook`, ...(params ? [params]: [])] as const;
    }

    
export const getFacebookLoginQueryOptions = <TData = Awaited<ReturnType<typeof facebookLogin>>, TError = ErrorType<null>>(params: FacebookLoginParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof facebookLogin>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFacebookLoginQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof facebookLogin>>> = ({ signal }) => facebookLogin(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof facebookLogin>>, TError, TData> & { queryKey: QueryKey }
}

export type FacebookLoginQueryResult = NonNullable<Awaited<ReturnType<typeof facebookLogin>>>
export type FacebookLoginQueryError = ErrorType<null>



export function useFacebookLogin<TData = Awaited<ReturnType<typeof facebookLogin>>, TError = ErrorType<null>>(
 params: FacebookLoginParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof facebookLogin>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFacebookLoginQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const refreshToken = (
    refreshTokenInput: RefreshTokenInput,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RefreshToken200>(
      {url: `/token/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenInput, signal
    },
      options);
    }
  


export const getRefreshTokenMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenInput}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenInput}, TContext> => {

const mutationKey = ['refreshToken'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshToken>>, {data: RefreshTokenInput}> = (props) => {
          const {data} = props ?? {};

          return  refreshToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
    export type RefreshTokenMutationBody = RefreshTokenInput
    export type RefreshTokenMutationError = ErrorType<unknown>

    export const useRefreshToken = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenInput}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof refreshToken>>,
        TError,
        {data: RefreshTokenInput},
        TContext
      > => {

      const mutationOptions = getRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const requestOtp = (
    requestOtpBody: RequestOtpBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RequestOtp200>(
      {url: `/otp/request`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestOtpBody, signal
    },
      options);
    }
  


export const getRequestOtpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestOtp>>, TError,{data: RequestOtpBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof requestOtp>>, TError,{data: RequestOtpBody}, TContext> => {

const mutationKey = ['requestOtp'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestOtp>>, {data: RequestOtpBody}> = (props) => {
          const {data} = props ?? {};

          return  requestOtp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestOtpMutationResult = NonNullable<Awaited<ReturnType<typeof requestOtp>>>
    export type RequestOtpMutationBody = RequestOtpBody
    export type RequestOtpMutationError = ErrorType<unknown>

    export const useRequestOtp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestOtp>>, TError,{data: RequestOtpBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof requestOtp>>,
        TError,
        {data: RequestOtpBody},
        TContext
      > => {

      const mutationOptions = getRequestOtpMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const verifyOtp = (
    verifyOtpBody: VerifyOtpBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<VerifyOtp200>(
      {url: `/otp/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyOtpBody, signal
    },
      options);
    }
  


export const getVerifyOtpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyOtp>>, TError,{data: VerifyOtpBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof verifyOtp>>, TError,{data: VerifyOtpBody}, TContext> => {

const mutationKey = ['verifyOtp'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyOtp>>, {data: VerifyOtpBody}> = (props) => {
          const {data} = props ?? {};

          return  verifyOtp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyOtpMutationResult = NonNullable<Awaited<ReturnType<typeof verifyOtp>>>
    export type VerifyOtpMutationBody = VerifyOtpBody
    export type VerifyOtpMutationError = ErrorType<unknown>

    export const useVerifyOtp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyOtp>>, TError,{data: VerifyOtpBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof verifyOtp>>,
        TError,
        {data: VerifyOtpBody},
        TContext
      > => {

      const mutationOptions = getVerifyOtpMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const login = (
    localLoginInput: LocalLoginInput,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AuthResponseType>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: localLoginInput, signal
    },
      options);
    }
  


export const getLoginMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LocalLoginInput}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LocalLoginInput}, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LocalLoginInput}> = (props) => {
          const {data} = props ?? {};

          return  login(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LocalLoginInput
    export type LoginMutationError = ErrorType<unknown>

    export const useLogin = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LocalLoginInput}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LocalLoginInput},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const signUp = (
    otpSignUpInput: OtpSignUpInput,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<AuthResponseType>(
      {url: `/auth/sign-up`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: otpSignUpInput, signal
    },
      options);
    }
  


export const getSignUpMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: OtpSignUpInput}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: OtpSignUpInput}, TContext> => {

const mutationKey = ['signUp'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signUp>>, {data: OtpSignUpInput}> = (props) => {
          const {data} = props ?? {};

          return  signUp(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>
    export type SignUpMutationBody = OtpSignUpInput
    export type SignUpMutationError = ErrorType<unknown>

    export const useSignUp = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: OtpSignUpInput}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof signUp>>,
        TError,
        {data: OtpSignUpInput},
        TContext
      > => {

      const mutationOptions = getSignUpMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const resetForgettenPassword = (
    resetForgettenPasswordInput: ResetForgettenPasswordInput,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ResetForgettenPassword200>(
      {url: `/auth/forget-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetForgettenPasswordInput, signal
    },
      options);
    }
  


export const getResetForgettenPasswordMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetForgettenPassword>>, TError,{data: ResetForgettenPasswordInput}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof resetForgettenPassword>>, TError,{data: ResetForgettenPasswordInput}, TContext> => {

const mutationKey = ['resetForgettenPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetForgettenPassword>>, {data: ResetForgettenPasswordInput}> = (props) => {
          const {data} = props ?? {};

          return  resetForgettenPassword(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetForgettenPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof resetForgettenPassword>>>
    export type ResetForgettenPasswordMutationBody = ResetForgettenPasswordInput
    export type ResetForgettenPasswordMutationError = ErrorType<unknown>

    export const useResetForgettenPassword = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetForgettenPassword>>, TError,{data: ResetForgettenPasswordInput}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof resetForgettenPassword>>,
        TError,
        {data: ResetForgettenPasswordInput},
        TContext
      > => {

      const mutationOptions = getResetForgettenPasswordMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const logout = (
    logoutBody: LogoutBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Logout200>(
      {url: `/auth/logout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: logoutBody, signal
    },
      options);
    }
  


export const getLogoutMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,{data: LogoutBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,{data: LogoutBody}, TContext> => {

const mutationKey = ['logout'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logout>>, {data: LogoutBody}> = (props) => {
          const {data} = props ?? {};

          return  logout(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof logout>>>
    export type LogoutMutationBody = LogoutBody
    export type LogoutMutationError = ErrorType<unknown>

    export const useLogout = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logout>>, TError,{data: LogoutBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof logout>>,
        TError,
        {data: LogoutBody},
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createRole = (
    roleCreateBody: RoleCreateBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CreateRole200>(
      {url: `/role`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: roleCreateBody, signal
    },
      options);
    }
  


export const getCreateRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError,{data: RoleCreateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError,{data: RoleCreateBody}, TContext> => {

const mutationKey = ['createRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRole>>, {data: RoleCreateBody}> = (props) => {
          const {data} = props ?? {};

          return  createRole(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof createRole>>>
    export type CreateRoleMutationBody = RoleCreateBody
    export type CreateRoleMutationError = ErrorType<unknown>

    export const useCreateRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRole>>, TError,{data: RoleCreateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createRole>>,
        TError,
        {data: RoleCreateBody},
        TContext
      > => {

      const mutationOptions = getCreateRoleMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const updateRole = (
    id: string,
    roleUpdateBody: RoleUpdateBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UpdateRole200>(
      {url: `/role/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: roleUpdateBody
    },
      options);
    }
  


export const getUpdateRoleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRole>>, TError,{id: string;data: RoleUpdateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRole>>, TError,{id: string;data: RoleUpdateBody}, TContext> => {

const mutationKey = ['updateRole'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRole>>, {id: string;data: RoleUpdateBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateRole(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRoleMutationResult = NonNullable<Awaited<ReturnType<typeof updateRole>>>
    export type UpdateRoleMutationBody = RoleUpdateBody
    export type UpdateRoleMutationError = ErrorType<unknown>

    export const useUpdateRole = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRole>>, TError,{id: string;data: RoleUpdateBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateRole>>,
        TError,
        {id: string;data: RoleUpdateBody},
        TContext
      > => {

      const mutationOptions = getUpdateRoleMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const createOrgnization = (
    pickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId: PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CreateOrgnization200>(
      {url: `/organization`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId, signal
    },
      options);
    }
  


export const getCreateOrgnizationMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrgnization>>, TError,{data: PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrgnization>>, TError,{data: PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId}, TContext> => {

const mutationKey = ['createOrgnization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrgnization>>, {data: PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId}> = (props) => {
          const {data} = props ?? {};

          return  createOrgnization(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrgnizationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrgnization>>>
    export type CreateOrgnizationMutationBody = PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId
    export type CreateOrgnizationMutationError = ErrorType<unknown>

    export const useCreateOrgnization = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrgnization>>, TError,{data: PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createOrgnization>>,
        TError,
        {data: PickOrganizationModelExcludeKeyofOrganizationModelIdOrCreatedAtOrUpdatedAtOrOwnerId},
        TContext
      > => {

      const mutationOptions = getCreateOrgnizationMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
export const getOwnedOrganizations = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetOwnedOrganizations200Item[]>(
      {url: `/organization/owner-organizations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOwnedOrganizationsQueryKey = () => {
    return [`/organization/owner-organizations`] as const;
    }

    
export const getGetOwnedOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getOwnedOrganizations>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOwnedOrganizations>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOwnedOrganizationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOwnedOrganizations>>> = ({ signal }) => getOwnedOrganizations(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOwnedOrganizations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOwnedOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getOwnedOrganizations>>>
export type GetOwnedOrganizationsQueryError = ErrorType<unknown>



export function useGetOwnedOrganizations<TData = Awaited<ReturnType<typeof getOwnedOrganizations>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOwnedOrganizations>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetOwnedOrganizationsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getUserOrganizations = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetUserOrganizations200Item[]>(
      {url: `/organization/user-organizations`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserOrganizationsQueryKey = () => {
    return [`/organization/user-organizations`] as const;
    }

    
export const getGetUserOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof getUserOrganizations>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserOrganizations>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserOrganizationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserOrganizations>>> = ({ signal }) => getUserOrganizations(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserOrganizations>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserOrganizations>>>
export type GetUserOrganizationsQueryError = ErrorType<unknown>



export function useGetUserOrganizations<TData = Awaited<ReturnType<typeof getUserOrganizations>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserOrganizations>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserOrganizationsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const organizationFormData = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrganizationFormData200>(
      {url: `/organization/form-data`, method: 'GET', signal
    },
      options);
    }
  

export const getOrganizationFormDataQueryKey = () => {
    return [`/organization/form-data`] as const;
    }

    
export const getOrganizationFormDataQueryOptions = <TData = Awaited<ReturnType<typeof organizationFormData>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof organizationFormData>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrganizationFormDataQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationFormData>>> = ({ signal }) => organizationFormData(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof organizationFormData>>, TError, TData> & { queryKey: QueryKey }
}

export type OrganizationFormDataQueryResult = NonNullable<Awaited<ReturnType<typeof organizationFormData>>>
export type OrganizationFormDataQueryError = ErrorType<unknown>



export function useOrganizationFormData<TData = Awaited<ReturnType<typeof organizationFormData>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof organizationFormData>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getOrganizationFormDataQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getCountries = (
    params?: GetCountriesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetCountries200Item[]>(
      {url: `/country`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCountriesQueryKey = (params?: GetCountriesParams,) => {
    return [`/country`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCountriesQueryOptions = <TData = Awaited<ReturnType<typeof getCountries>>, TError = ErrorType<unknown>>(params?: GetCountriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCountriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountries>>> = ({ signal }) => getCountries(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCountriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCountries>>>
export type GetCountriesQueryError = ErrorType<unknown>



export function useGetCountries<TData = Awaited<ReturnType<typeof getCountries>>, TError = ErrorType<unknown>>(
 params?: GetCountriesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCountriesQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getStates = (
    countryId: string,
    params?: GetStatesParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetStates200Item[]>(
      {url: `/country/${countryId}/states`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStatesQueryKey = (countryId?: string,
    params?: GetStatesParams,) => {
    return [`/country/${countryId}/states`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStatesQueryOptions = <TData = Awaited<ReturnType<typeof getStates>>, TError = ErrorType<unknown>>(countryId: string,
    params?: GetStatesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getStates>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatesQueryKey(countryId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStates>>> = ({ signal }) => getStates(countryId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(countryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStates>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStatesQueryResult = NonNullable<Awaited<ReturnType<typeof getStates>>>
export type GetStatesQueryError = ErrorType<unknown>



export function useGetStates<TData = Awaited<ReturnType<typeof getStates>>, TError = ErrorType<unknown>>(
 countryId: string,
    params?: GetStatesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getStates>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStatesQueryOptions(countryId,params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getFilterdTimeZones = (
    countryId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetFilterdTimeZones200Item[]>(
      {url: `/country/${countryId}/time-zones`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFilterdTimeZonesQueryKey = (countryId?: string,) => {
    return [`/country/${countryId}/time-zones`] as const;
    }

    
export const getGetFilterdTimeZonesQueryOptions = <TData = Awaited<ReturnType<typeof getFilterdTimeZones>>, TError = ErrorType<unknown>>(countryId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFilterdTimeZones>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFilterdTimeZonesQueryKey(countryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFilterdTimeZones>>> = ({ signal }) => getFilterdTimeZones(countryId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(countryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFilterdTimeZones>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFilterdTimeZonesQueryResult = NonNullable<Awaited<ReturnType<typeof getFilterdTimeZones>>>
export type GetFilterdTimeZonesQueryError = ErrorType<unknown>



export function useGetFilterdTimeZones<TData = Awaited<ReturnType<typeof getFilterdTimeZones>>, TError = ErrorType<unknown>>(
 countryId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getFilterdTimeZones>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetFilterdTimeZonesQueryOptions(countryId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Simple health check endpoint
 */
export const healthCheck = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/health-check`, method: 'GET', signal
    },
      options);
    }
  

export const getHealthCheckQueryKey = () => {
    return [`/health-check`] as const;
    }

    
export const getHealthCheckQueryOptions = <TData = Awaited<ReturnType<typeof healthCheck>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({ signal }) => healthCheck(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData> & { queryKey: QueryKey }
}

export type HealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheck>>>
export type HealthCheckQueryError = ErrorType<unknown>



export function useHealthCheck<TData = Awaited<ReturnType<typeof healthCheck>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getHealthCheckQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
