// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator zod {
  provider       = "zod-prisma-types"
 
}

// ========= ENUMS =========

enum OtpType {
  VERIFY_EMAIL
  LOGIN
  FORGET_PASSWORD
}



enum OauthProvider {
  NONE
  FACEBOOK
  GOOGLE
}


// ========= MODELS =========

model Otp {
  id        String   @id @default(uuid())
  type      OtpType
  hashedOtp       String
  identifier     String
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model User {
  id           String           @id @default(uuid())
  password String?          


  // Relations
  identifiers  UserIdentifier[]
  profile      UserProfile?
  refreshTokens  RefreshToken[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model UserIdentifier {
  id         String   @id @default(uuid())
  userId     String
  type       IdentifierType
  value      String
  isVerified Boolean  @default(false)
  isPrimary  Boolean  @default(false)
 

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  @@unique([type, value])   // ensure no duplicate identifiers
  @@index([userId])
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  firstName      String
  lastName       String?
  avatarUrl   String?
  contactEmail String? // for notifications, can differ from login email
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum IdentifierType {
  email
  phone
  username
  google
  apple
  github
  facebook
  
}



model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent  String?
  ipAddress  String?
  expiresAt  DateTime
  revokedAt   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}
