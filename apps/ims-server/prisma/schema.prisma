// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator zod {
  provider       = "zod-prisma-types"
 
}

// ========= ENUMS =========

enum OtpType {
  SIGN_UP
  LOGIN
  FORGET_PASSWORD
}



enum OauthProvider {
  NONE
  FACEBOOK
  GOOGLE
}


// ========= MODELS =========

model Otp {
  id        String   @id @default(uuid())
  type      OtpType
  hashedOtp       String
  identifier     String
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model User {
  id           String           @id @default(uuid())
  password String?          


  // Relations
  identifiers  UserIdentifier[]
  profile      UserProfile?
  refreshTokens  RefreshToken[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

 
}

model UserIdentifier {
  id         String   @id @default(uuid())
  userId     String
  type       IdentifierType
  value      String
  isVerified Boolean  @default(false)
  isPrimary  Boolean  @default(false)
 

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  @@unique([type, value])   // ensure no duplicate identifiers
  @@index([userId])
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  name        String
  avatarUrl   String?
  contactEmail String? // for notifications, can differ from login email
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum IdentifierType {
  email
  phone
  username
  google
  apple
  github
  facebook
  
}



model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent  String?
  ipAddress  String?
  expiresAt  DateTime
  revokedAt   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}


//regions 
//################################
//################################

model Region {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  translations Json?
  wikiDataId  String?
  subregions  Subregion[]
  countries   Country[]
}

model Subregion {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  translations Json?
  wikiDataId  String?
  regionId    Int
  region      Region       @relation(fields: [regionId], references: [id])
  countries   Country[]
}

model Currency {
  id      Int      @id @default(autoincrement())
  code    String   @unique
  name    String?
  symbol  String?
  countries Country[]
}

model PhoneCode {
  id      Int      @id @default(autoincrement())
  code    String   @unique
  countries Country[]
}

model TimeZone {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  offset    String?
  countries Country[]

  Country Country[] @relation("CountryTimeZones")
}

model Translation {
  id        Int      @id @default(autoincrement())
  language  String
  value     Json
  countryId Int?
  country   Country? @relation(fields: [countryId], references: [id])
}

model Country {
  id             Int          @id @default(autoincrement())
  name           String
  iso3           String?
  iso2           String? @unique
  numericCode    String?
  capital        String?
  tld            String?
  native         String?
  latitude       String?
  longitude      String?
  emoji          String?
  emojiU         String?
  wikiDataId     String?
  regionId       Int?
  subregionId    Int?
  currencyId     Int?
  phoneCodeId    Int?
  region         Region?      @relation(fields: [regionId], references: [id])
  subregion      Subregion?   @relation(fields: [subregionId], references: [id])
  currency       Currency?    @relation(fields: [currencyId], references: [id])
  phoneCode      PhoneCode?   @relation(fields: [phoneCodeId], references: [id])
  timezones      TimeZone[]   @relation("CountryTimeZones")
  translations   Translation[]
  states         State[]

  TimeZone TimeZone[]

  City City[]
}

model State {
  id          Int       @id @default(autoincrement())
  name        String
  iso2        String?
  fipsCode    String?
  type        String?
  latitude    String?
  longitude   String?
  wikiDataId  String?
  countryId   Int
  country     Country    @relation(fields: [countryId], references: [id])
  cities      City[]
}

model City {
  id          Int      @id @default(autoincrement())
  name        String
  stateCode   String?
  countryCode String?
  latitude    String?
  longitude   String?
  wikiDataId  String?
  stateId     Int
  countryId   Int
  state       State     @relation(fields: [stateId], references: [id])
  country     Country   @relation(fields: [countryId], references: [id])
}
