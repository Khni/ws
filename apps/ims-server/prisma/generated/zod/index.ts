import { z } from 'zod';
import { Prisma } from '../../../generated/prisma';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const OtpScalarFieldEnumSchema = z.enum(['id','type','hashedOtp','identifier','expiresAt','isActive','createdAt','updatedAt']);

export const UserScalarFieldEnumSchema = z.enum(['id','password','lastLoginAt','isActive','createdAt','updatedAt']);

export const UserIdentifierScalarFieldEnumSchema = z.enum(['id','userId','type','value','isVerified','isPrimary','isActive','createdAt','updatedAt']);

export const UserProfileScalarFieldEnumSchema = z.enum(['id','userId','name','avatarUrl','contactEmail','isActive','createdAt','updatedAt']);

export const RefreshTokenScalarFieldEnumSchema = z.enum(['id','token','userId','userAgent','ipAddress','expiresAt','revokedAt','createdAt','updatedAt']);

export const LanguageScalarFieldEnumSchema = z.enum(['id','code','name','nativeName','isDefault']);

export const IndustryCategoryScalarFieldEnumSchema = z.enum(['id','code','label']);

export const FiscalYearPatternScalarFieldEnumSchema = z.enum(['id','code','label','startMonth','endMonth']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','stateId','currencyId','timeZoneId','inventoryStartDate','languageId','industryCategoryId','fiscalYearPatternId','ownedById','address','zipCode','createdAt','updatedAt']);

export const RegionScalarFieldEnumSchema = z.enum(['id','name','translations','wikiDataId']);

export const SubregionScalarFieldEnumSchema = z.enum(['id','name','translations','wikiDataId','regionId']);

export const CurrencyScalarFieldEnumSchema = z.enum(['id','code','name','symbol']);

export const PhoneCodeScalarFieldEnumSchema = z.enum(['id','code']);

export const TimeZoneScalarFieldEnumSchema = z.enum(['id','name','offset']);

export const TranslationScalarFieldEnumSchema = z.enum(['id','language','value','countryId']);

export const CountryScalarFieldEnumSchema = z.enum(['id','name','iso3','iso2','numericCode','capital','tld','native','latitude','longitude','emoji','emojiU','wikiDataId','regionId','subregionId','currencyId','phoneCodeId']);

export const StateScalarFieldEnumSchema = z.enum(['id','name','iso2','fipsCode','type','latitude','longitude','wikiDataId','countryId']);

export const CityScalarFieldEnumSchema = z.enum(['id','name','stateCode','countryCode','latitude','longitude','wikiDataId','stateId','countryId']);

export const RoleScalarFieldEnumSchema = z.enum(['id','name','description','organizationId','createdById','isSystem','status','priority','createdAt','updatedAt','expiresAt']);

export const UserRoleScalarFieldEnumSchema = z.enum(['id','userId','roleId','organizationId','assignedBy','assignedAt','status','expiresAt','createdAt','updatedAt']);

export const ActionScalarFieldEnumSchema = z.enum(['id','name','description']);

export const ResourceScalarFieldEnumSchema = z.enum(['id','name','description']);

export const PermissionScalarFieldEnumSchema = z.enum(['id','actionId','resourceId','description','category','isDangerous']);

export const CustomPermissionScalarFieldEnumSchema = z.enum(['id','code','name','description','category','riskLevel','isActive','requiresApproval','createdAt','updatedAt']);

export const RolePermissionScalarFieldEnumSchema = z.enum(['id','roleId','permissionId','conditions','grantedAt','grantedBy']);

export const RoleCustomPermissionScalarFieldEnumSchema = z.enum(['id','roleId','customPermissionId','conditions','approvalRequired','approvedBy','approvedAt','grantedAt','grantedBy']);

export const PermissionApprovalScalarFieldEnumSchema = z.enum(['id','roleCustomPermissionId','requestedBy','requestedAt','approvedBy','approvedAt','rejectedBy','rejectedAt','reason','comments','status']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const OtpTypeSchema = z.enum(['SIGN_UP','LOGIN','FORGET_PASSWORD']);

export type OtpTypeType = `${z.infer<typeof OtpTypeSchema>}`

export const OauthProviderSchema = z.enum(['NONE','FACEBOOK','GOOGLE']);

export type OauthProviderType = `${z.infer<typeof OauthProviderSchema>}`

export const IdentifierTypeSchema = z.enum(['email','phone','username','google','apple','github','facebook']);

export type IdentifierTypeType = `${z.infer<typeof IdentifierTypeSchema>}`

export const ActionNameSchema = z.enum(['CREATE','READ','UPDATE','DELETE','APPROVE','REJECT','EXPORT','IMPORT','SHARE','ARCHIVE','RESTORE']);

export type ActionNameType = `${z.infer<typeof ActionNameSchema>}`

export const ResourceNameSchema = z.enum(['USER','ROLE','ITEM','INVOICE','CUSTOMER','SUPPLIER','PURCHASE_ORDER','SALES_ORDER','WAREHOUSE','ORGANIZATION','REPORT']);

export type ResourceNameType = `${z.infer<typeof ResourceNameSchema>}`

export const SystemCustomPermissionSchema = z.enum(['VIEW_FINANCIAL_REPORTS','PROCESS_BULK_PAYMENTS','OVERRIDE_PRICING','VIEW_COST_PRICES','ACCESS_PROFIT_MARGINS','MANAGE_ORGANIZATION_SETTINGS','INVITE_USERS','MANAGE_BILLING','EXPORT_ALL_DATA','ACCESS_AUDIT_LOGS','OVERRIDE_INVENTORY','BYPASS_APPROVAL_WORKFLOWS','MANAGE_INTEGRATIONS','SCHEDULE_BATCH_OPERATIONS','ACCESS_ADMIN_DASHBOARD','VIEW_SENSITIVE_DATA','ACCESS_ALL_RECORDS','OVERRIDE_DATA_RETENTION']);

export type SystemCustomPermissionType = `${z.infer<typeof SystemCustomPermissionSchema>}`

export const UserRoleStatusSchema = z.enum(['PENDING','ACTIVE','INACTIVE','REJECTED','SUSPENDED']);

export type UserRoleStatusType = `${z.infer<typeof UserRoleStatusSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// OTP SCHEMA
/////////////////////////////////////////

export const OtpSchema = z.object({
  type: OtpTypeSchema,
  id: z.string().uuid(),
  hashedOtp: z.string(),
  identifier: z.string(),
  expiresAt: z.coerce.date(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Otp = z.infer<typeof OtpSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string().uuid(),
  password: z.string().nullable(),
  lastLoginAt: z.coerce.date().nullable(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// USER IDENTIFIER SCHEMA
/////////////////////////////////////////

export const UserIdentifierSchema = z.object({
  type: IdentifierTypeSchema,
  id: z.string().uuid(),
  userId: z.string(),
  value: z.string(),
  isVerified: z.boolean(),
  isPrimary: z.boolean(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type UserIdentifier = z.infer<typeof UserIdentifierSchema>

/////////////////////////////////////////
// USER PROFILE SCHEMA
/////////////////////////////////////////

export const UserProfileSchema = z.object({
  id: z.string().uuid(),
  userId: z.string(),
  name: z.string(),
  avatarUrl: z.string().nullable(),
  contactEmail: z.string().nullable(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type UserProfile = z.infer<typeof UserProfileSchema>

/////////////////////////////////////////
// REFRESH TOKEN SCHEMA
/////////////////////////////////////////

export const RefreshTokenSchema = z.object({
  id: z.string().uuid(),
  token: z.string(),
  userId: z.string(),
  userAgent: z.string().nullable(),
  ipAddress: z.string().nullable(),
  expiresAt: z.coerce.date(),
  revokedAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RefreshToken = z.infer<typeof RefreshTokenSchema>

/////////////////////////////////////////
// LANGUAGE SCHEMA
/////////////////////////////////////////

export const LanguageSchema = z.object({
  id: z.number().int(),
  code: z.string(),
  name: z.string(),
  nativeName: z.string(),
  isDefault: z.boolean(),
})

export type Language = z.infer<typeof LanguageSchema>

/////////////////////////////////////////
// INDUSTRY CATEGORY SCHEMA
/////////////////////////////////////////

export const IndustryCategorySchema = z.object({
  id: z.number().int(),
  code: z.string(),
  label: z.string(),
})

export type IndustryCategory = z.infer<typeof IndustryCategorySchema>

/////////////////////////////////////////
// FISCAL YEAR PATTERN SCHEMA
/////////////////////////////////////////

export const FiscalYearPatternSchema = z.object({
  id: z.number().int(),
  code: z.string(),
  label: z.string(),
  startMonth: z.number().int(),
  endMonth: z.number().int(),
})

export type FiscalYearPattern = z.infer<typeof FiscalYearPatternSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().nullable(),
  industryCategoryId: z.number().int().nullable(),
  fiscalYearPatternId: z.number().int().nullable(),
  ownedById: z.string(),
  address: z.string().nullable(),
  zipCode: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// REGION SCHEMA
/////////////////////////////////////////

export const RegionSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  translations: JsonValueSchema.nullable(),
  wikiDataId: z.string().nullable(),
})

export type Region = z.infer<typeof RegionSchema>

/////////////////////////////////////////
// SUBREGION SCHEMA
/////////////////////////////////////////

export const SubregionSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  translations: JsonValueSchema.nullable(),
  wikiDataId: z.string().nullable(),
  regionId: z.number().int(),
})

export type Subregion = z.infer<typeof SubregionSchema>

/////////////////////////////////////////
// CURRENCY SCHEMA
/////////////////////////////////////////

export const CurrencySchema = z.object({
  id: z.number().int(),
  code: z.string(),
  name: z.string().nullable(),
  symbol: z.string().nullable(),
})

export type Currency = z.infer<typeof CurrencySchema>

/////////////////////////////////////////
// PHONE CODE SCHEMA
/////////////////////////////////////////

export const PhoneCodeSchema = z.object({
  id: z.number().int(),
  code: z.string(),
})

export type PhoneCode = z.infer<typeof PhoneCodeSchema>

/////////////////////////////////////////
// TIME ZONE SCHEMA
/////////////////////////////////////////

export const TimeZoneSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  offset: z.string().nullable(),
})

export type TimeZone = z.infer<typeof TimeZoneSchema>

/////////////////////////////////////////
// TRANSLATION SCHEMA
/////////////////////////////////////////

export const TranslationSchema = z.object({
  id: z.number().int(),
  language: z.string(),
  value: JsonValueSchema,
  countryId: z.number().int().nullable(),
})

export type Translation = z.infer<typeof TranslationSchema>

/////////////////////////////////////////
// COUNTRY SCHEMA
/////////////////////////////////////////

export const CountrySchema = z.object({
  id: z.number().int(),
  name: z.string(),
  iso3: z.string().nullable(),
  iso2: z.string().nullable(),
  numericCode: z.string().nullable(),
  capital: z.string().nullable(),
  tld: z.string().nullable(),
  native: z.string().nullable(),
  latitude: z.string().nullable(),
  longitude: z.string().nullable(),
  emoji: z.string().nullable(),
  emojiU: z.string().nullable(),
  wikiDataId: z.string().nullable(),
  regionId: z.number().int().nullable(),
  subregionId: z.number().int().nullable(),
  currencyId: z.number().int().nullable(),
  phoneCodeId: z.number().int().nullable(),
})

export type Country = z.infer<typeof CountrySchema>

/////////////////////////////////////////
// STATE SCHEMA
/////////////////////////////////////////

export const StateSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  iso2: z.string().nullable(),
  fipsCode: z.string().nullable(),
  type: z.string().nullable(),
  latitude: z.string().nullable(),
  longitude: z.string().nullable(),
  wikiDataId: z.string().nullable(),
  countryId: z.number().int(),
})

export type State = z.infer<typeof StateSchema>

/////////////////////////////////////////
// CITY SCHEMA
/////////////////////////////////////////

export const CitySchema = z.object({
  id: z.number().int(),
  name: z.string(),
  stateCode: z.string().nullable(),
  countryCode: z.string().nullable(),
  latitude: z.string().nullable(),
  longitude: z.string().nullable(),
  wikiDataId: z.string().nullable(),
  stateId: z.number().int(),
  countryId: z.number().int(),
})

export type City = z.infer<typeof CitySchema>

/////////////////////////////////////////
// ROLE SCHEMA
/////////////////////////////////////////

export const RoleSchema = z.object({
  status: UserRoleStatusSchema,
  id: z.string().uuid(),
  name: z.string(),
  description: z.string().nullable(),
  organizationId: z.string(),
  createdById: z.string(),
  isSystem: z.boolean(),
  priority: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  expiresAt: z.coerce.date().nullable(),
})

export type Role = z.infer<typeof RoleSchema>

/////////////////////////////////////////
// USER ROLE SCHEMA
/////////////////////////////////////////

export const UserRoleSchema = z.object({
  status: UserRoleStatusSchema,
  id: z.string().uuid(),
  userId: z.string(),
  roleId: z.string(),
  organizationId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date(),
  expiresAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type UserRole = z.infer<typeof UserRoleSchema>

/////////////////////////////////////////
// ACTION SCHEMA
/////////////////////////////////////////

export const ActionSchema = z.object({
  name: ActionNameSchema,
  id: z.number().int(),
  description: z.string().nullable(),
})

export type Action = z.infer<typeof ActionSchema>

/////////////////////////////////////////
// RESOURCE SCHEMA
/////////////////////////////////////////

export const ResourceSchema = z.object({
  name: ResourceNameSchema,
  id: z.number().int(),
  description: z.string().nullable(),
})

export type Resource = z.infer<typeof ResourceSchema>

/////////////////////////////////////////
// PERMISSION SCHEMA
/////////////////////////////////////////

export const PermissionSchema = z.object({
  id: z.number().int(),
  actionId: z.number().int(),
  resourceId: z.number().int(),
  description: z.string().nullable(),
  category: z.string().nullable(),
  isDangerous: z.boolean(),
})

export type Permission = z.infer<typeof PermissionSchema>

/////////////////////////////////////////
// CUSTOM PERMISSION SCHEMA
/////////////////////////////////////////

export const CustomPermissionSchema = z.object({
  code: SystemCustomPermissionSchema,
  id: z.string().uuid(),
  name: z.string(),
  description: z.string().nullable(),
  category: z.string(),
  riskLevel: z.string(),
  isActive: z.boolean(),
  requiresApproval: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CustomPermission = z.infer<typeof CustomPermissionSchema>

/////////////////////////////////////////
// ROLE PERMISSION SCHEMA
/////////////////////////////////////////

export const RolePermissionSchema = z.object({
  id: z.number().int(),
  roleId: z.string(),
  permissionId: z.number().int(),
  conditions: JsonValueSchema.nullable(),
  grantedAt: z.coerce.date(),
  grantedBy: z.string(),
})

export type RolePermission = z.infer<typeof RolePermissionSchema>

/////////////////////////////////////////
// ROLE CUSTOM PERMISSION SCHEMA
/////////////////////////////////////////

export const RoleCustomPermissionSchema = z.object({
  id: z.number().int(),
  roleId: z.string(),
  customPermissionId: z.string(),
  conditions: JsonValueSchema.nullable(),
  approvalRequired: z.boolean(),
  approvedBy: z.string().nullable(),
  approvedAt: z.coerce.date().nullable(),
  grantedAt: z.coerce.date(),
  grantedBy: z.string(),
})

export type RoleCustomPermission = z.infer<typeof RoleCustomPermissionSchema>

/////////////////////////////////////////
// PERMISSION APPROVAL SCHEMA
/////////////////////////////////////////

export const PermissionApprovalSchema = z.object({
  id: z.string().uuid(),
  roleCustomPermissionId: z.number().int(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date(),
  approvedBy: z.string().nullable(),
  approvedAt: z.coerce.date().nullable(),
  rejectedBy: z.string().nullable(),
  rejectedAt: z.coerce.date().nullable(),
  reason: z.string().nullable(),
  comments: z.string().nullable(),
  status: z.string(),
})

export type PermissionApproval = z.infer<typeof PermissionApprovalSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// OTP
//------------------------------------------------------

export const OtpSelectSchema: z.ZodType<Prisma.OtpSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  hashedOtp: z.boolean().optional(),
  identifier: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  identifiers: z.union([z.boolean(),z.lazy(() => UserIdentifierFindManyArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => UserProfileArgsSchema)]).optional(),
  refreshTokens: z.union([z.boolean(),z.lazy(() => RefreshTokenFindManyArgsSchema)]).optional(),
  userRoles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  ownedRoles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  ownedOrganizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  identifiers: z.boolean().optional(),
  refreshTokens: z.boolean().optional(),
  userRoles: z.boolean().optional(),
  ownedRoles: z.boolean().optional(),
  organizations: z.boolean().optional(),
  ownedOrganizations: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  password: z.boolean().optional(),
  lastLoginAt: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  identifiers: z.union([z.boolean(),z.lazy(() => UserIdentifierFindManyArgsSchema)]).optional(),
  profile: z.union([z.boolean(),z.lazy(() => UserProfileArgsSchema)]).optional(),
  refreshTokens: z.union([z.boolean(),z.lazy(() => RefreshTokenFindManyArgsSchema)]).optional(),
  userRoles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  ownedRoles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  ownedOrganizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER IDENTIFIER
//------------------------------------------------------

export const UserIdentifierIncludeSchema: z.ZodType<Prisma.UserIdentifierInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserIdentifierArgsSchema: z.ZodType<Prisma.UserIdentifierDefaultArgs> = z.object({
  select: z.lazy(() => UserIdentifierSelectSchema).optional(),
  include: z.lazy(() => UserIdentifierIncludeSchema).optional(),
}).strict();

export const UserIdentifierSelectSchema: z.ZodType<Prisma.UserIdentifierSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  value: z.boolean().optional(),
  isVerified: z.boolean().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// USER PROFILE
//------------------------------------------------------

export const UserProfileIncludeSchema: z.ZodType<Prisma.UserProfileInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserProfileArgsSchema: z.ZodType<Prisma.UserProfileDefaultArgs> = z.object({
  select: z.lazy(() => UserProfileSelectSchema).optional(),
  include: z.lazy(() => UserProfileIncludeSchema).optional(),
}).strict();

export const UserProfileSelectSchema: z.ZodType<Prisma.UserProfileSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  name: z.boolean().optional(),
  avatarUrl: z.boolean().optional(),
  contactEmail: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// REFRESH TOKEN
//------------------------------------------------------

export const RefreshTokenIncludeSchema: z.ZodType<Prisma.RefreshTokenInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const RefreshTokenArgsSchema: z.ZodType<Prisma.RefreshTokenDefaultArgs> = z.object({
  select: z.lazy(() => RefreshTokenSelectSchema).optional(),
  include: z.lazy(() => RefreshTokenIncludeSchema).optional(),
}).strict();

export const RefreshTokenSelectSchema: z.ZodType<Prisma.RefreshTokenSelect> = z.object({
  id: z.boolean().optional(),
  token: z.boolean().optional(),
  userId: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  revokedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// LANGUAGE
//------------------------------------------------------

export const LanguageIncludeSchema: z.ZodType<Prisma.LanguageInclude> = z.object({
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LanguageCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const LanguageArgsSchema: z.ZodType<Prisma.LanguageDefaultArgs> = z.object({
  select: z.lazy(() => LanguageSelectSchema).optional(),
  include: z.lazy(() => LanguageIncludeSchema).optional(),
}).strict();

export const LanguageCountOutputTypeArgsSchema: z.ZodType<Prisma.LanguageCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LanguageCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LanguageCountOutputTypeSelectSchema: z.ZodType<Prisma.LanguageCountOutputTypeSelect> = z.object({
  organizations: z.boolean().optional(),
}).strict();

export const LanguageSelectSchema: z.ZodType<Prisma.LanguageSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  name: z.boolean().optional(),
  nativeName: z.boolean().optional(),
  isDefault: z.boolean().optional(),
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LanguageCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INDUSTRY CATEGORY
//------------------------------------------------------

export const IndustryCategoryIncludeSchema: z.ZodType<Prisma.IndustryCategoryInclude> = z.object({
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => IndustryCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const IndustryCategoryArgsSchema: z.ZodType<Prisma.IndustryCategoryDefaultArgs> = z.object({
  select: z.lazy(() => IndustryCategorySelectSchema).optional(),
  include: z.lazy(() => IndustryCategoryIncludeSchema).optional(),
}).strict();

export const IndustryCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.IndustryCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => IndustryCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const IndustryCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.IndustryCategoryCountOutputTypeSelect> = z.object({
  organizations: z.boolean().optional(),
}).strict();

export const IndustryCategorySelectSchema: z.ZodType<Prisma.IndustryCategorySelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  label: z.boolean().optional(),
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => IndustryCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FISCAL YEAR PATTERN
//------------------------------------------------------

export const FiscalYearPatternIncludeSchema: z.ZodType<Prisma.FiscalYearPatternInclude> = z.object({
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FiscalYearPatternCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FiscalYearPatternArgsSchema: z.ZodType<Prisma.FiscalYearPatternDefaultArgs> = z.object({
  select: z.lazy(() => FiscalYearPatternSelectSchema).optional(),
  include: z.lazy(() => FiscalYearPatternIncludeSchema).optional(),
}).strict();

export const FiscalYearPatternCountOutputTypeArgsSchema: z.ZodType<Prisma.FiscalYearPatternCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => FiscalYearPatternCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FiscalYearPatternCountOutputTypeSelectSchema: z.ZodType<Prisma.FiscalYearPatternCountOutputTypeSelect> = z.object({
  organizations: z.boolean().optional(),
}).strict();

export const FiscalYearPatternSelectSchema: z.ZodType<Prisma.FiscalYearPatternSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  label: z.boolean().optional(),
  startMonth: z.boolean().optional(),
  endMonth: z.boolean().optional(),
  organizations: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FiscalYearPatternCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  state: z.union([z.boolean(),z.lazy(() => StateArgsSchema)]).optional(),
  currency: z.union([z.boolean(),z.lazy(() => CurrencyArgsSchema)]).optional(),
  timeZone: z.union([z.boolean(),z.lazy(() => TimeZoneArgsSchema)]).optional(),
  language: z.union([z.boolean(),z.lazy(() => LanguageArgsSchema)]).optional(),
  industryCategory: z.union([z.boolean(),z.lazy(() => IndustryCategoryArgsSchema)]).optional(),
  fiscalYearPattern: z.union([z.boolean(),z.lazy(() => FiscalYearPatternArgsSchema)]).optional(),
  userRoles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  ownedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  userRoles: z.boolean().optional(),
  roles: z.boolean().optional(),
  users: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  stateId: z.boolean().optional(),
  currencyId: z.boolean().optional(),
  timeZoneId: z.boolean().optional(),
  inventoryStartDate: z.boolean().optional(),
  languageId: z.boolean().optional(),
  industryCategoryId: z.boolean().optional(),
  fiscalYearPatternId: z.boolean().optional(),
  ownedById: z.boolean().optional(),
  address: z.boolean().optional(),
  zipCode: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  state: z.union([z.boolean(),z.lazy(() => StateArgsSchema)]).optional(),
  currency: z.union([z.boolean(),z.lazy(() => CurrencyArgsSchema)]).optional(),
  timeZone: z.union([z.boolean(),z.lazy(() => TimeZoneArgsSchema)]).optional(),
  language: z.union([z.boolean(),z.lazy(() => LanguageArgsSchema)]).optional(),
  industryCategory: z.union([z.boolean(),z.lazy(() => IndustryCategoryArgsSchema)]).optional(),
  fiscalYearPattern: z.union([z.boolean(),z.lazy(() => FiscalYearPatternArgsSchema)]).optional(),
  userRoles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  ownedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// REGION
//------------------------------------------------------

export const RegionIncludeSchema: z.ZodType<Prisma.RegionInclude> = z.object({
  subregions: z.union([z.boolean(),z.lazy(() => SubregionFindManyArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RegionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RegionArgsSchema: z.ZodType<Prisma.RegionDefaultArgs> = z.object({
  select: z.lazy(() => RegionSelectSchema).optional(),
  include: z.lazy(() => RegionIncludeSchema).optional(),
}).strict();

export const RegionCountOutputTypeArgsSchema: z.ZodType<Prisma.RegionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RegionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RegionCountOutputTypeSelectSchema: z.ZodType<Prisma.RegionCountOutputTypeSelect> = z.object({
  subregions: z.boolean().optional(),
  countries: z.boolean().optional(),
}).strict();

export const RegionSelectSchema: z.ZodType<Prisma.RegionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  translations: z.boolean().optional(),
  wikiDataId: z.boolean().optional(),
  subregions: z.union([z.boolean(),z.lazy(() => SubregionFindManyArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RegionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SUBREGION
//------------------------------------------------------

export const SubregionIncludeSchema: z.ZodType<Prisma.SubregionInclude> = z.object({
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubregionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SubregionArgsSchema: z.ZodType<Prisma.SubregionDefaultArgs> = z.object({
  select: z.lazy(() => SubregionSelectSchema).optional(),
  include: z.lazy(() => SubregionIncludeSchema).optional(),
}).strict();

export const SubregionCountOutputTypeArgsSchema: z.ZodType<Prisma.SubregionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SubregionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SubregionCountOutputTypeSelectSchema: z.ZodType<Prisma.SubregionCountOutputTypeSelect> = z.object({
  countries: z.boolean().optional(),
}).strict();

export const SubregionSelectSchema: z.ZodType<Prisma.SubregionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  translations: z.boolean().optional(),
  wikiDataId: z.boolean().optional(),
  regionId: z.boolean().optional(),
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubregionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CURRENCY
//------------------------------------------------------

export const CurrencyIncludeSchema: z.ZodType<Prisma.CurrencyInclude> = z.object({
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CurrencyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CurrencyArgsSchema: z.ZodType<Prisma.CurrencyDefaultArgs> = z.object({
  select: z.lazy(() => CurrencySelectSchema).optional(),
  include: z.lazy(() => CurrencyIncludeSchema).optional(),
}).strict();

export const CurrencyCountOutputTypeArgsSchema: z.ZodType<Prisma.CurrencyCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CurrencyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CurrencyCountOutputTypeSelectSchema: z.ZodType<Prisma.CurrencyCountOutputTypeSelect> = z.object({
  countries: z.boolean().optional(),
  Organization: z.boolean().optional(),
}).strict();

export const CurrencySelectSchema: z.ZodType<Prisma.CurrencySelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  name: z.boolean().optional(),
  symbol: z.boolean().optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CurrencyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PHONE CODE
//------------------------------------------------------

export const PhoneCodeIncludeSchema: z.ZodType<Prisma.PhoneCodeInclude> = z.object({
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PhoneCodeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PhoneCodeArgsSchema: z.ZodType<Prisma.PhoneCodeDefaultArgs> = z.object({
  select: z.lazy(() => PhoneCodeSelectSchema).optional(),
  include: z.lazy(() => PhoneCodeIncludeSchema).optional(),
}).strict();

export const PhoneCodeCountOutputTypeArgsSchema: z.ZodType<Prisma.PhoneCodeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PhoneCodeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PhoneCodeCountOutputTypeSelectSchema: z.ZodType<Prisma.PhoneCodeCountOutputTypeSelect> = z.object({
  countries: z.boolean().optional(),
}).strict();

export const PhoneCodeSelectSchema: z.ZodType<Prisma.PhoneCodeSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PhoneCodeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TIME ZONE
//------------------------------------------------------

export const TimeZoneIncludeSchema: z.ZodType<Prisma.TimeZoneInclude> = z.object({
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Country: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TimeZoneCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TimeZoneArgsSchema: z.ZodType<Prisma.TimeZoneDefaultArgs> = z.object({
  select: z.lazy(() => TimeZoneSelectSchema).optional(),
  include: z.lazy(() => TimeZoneIncludeSchema).optional(),
}).strict();

export const TimeZoneCountOutputTypeArgsSchema: z.ZodType<Prisma.TimeZoneCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TimeZoneCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TimeZoneCountOutputTypeSelectSchema: z.ZodType<Prisma.TimeZoneCountOutputTypeSelect> = z.object({
  countries: z.boolean().optional(),
  Country: z.boolean().optional(),
  Organization: z.boolean().optional(),
}).strict();

export const TimeZoneSelectSchema: z.ZodType<Prisma.TimeZoneSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  offset: z.boolean().optional(),
  countries: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Country: z.union([z.boolean(),z.lazy(() => CountryFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TimeZoneCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TRANSLATION
//------------------------------------------------------

export const TranslationIncludeSchema: z.ZodType<Prisma.TranslationInclude> = z.object({
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
}).strict()

export const TranslationArgsSchema: z.ZodType<Prisma.TranslationDefaultArgs> = z.object({
  select: z.lazy(() => TranslationSelectSchema).optional(),
  include: z.lazy(() => TranslationIncludeSchema).optional(),
}).strict();

export const TranslationSelectSchema: z.ZodType<Prisma.TranslationSelect> = z.object({
  id: z.boolean().optional(),
  language: z.boolean().optional(),
  value: z.boolean().optional(),
  countryId: z.boolean().optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
}).strict()

// COUNTRY
//------------------------------------------------------

export const CountryIncludeSchema: z.ZodType<Prisma.CountryInclude> = z.object({
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  subregion: z.union([z.boolean(),z.lazy(() => SubregionArgsSchema)]).optional(),
  currency: z.union([z.boolean(),z.lazy(() => CurrencyArgsSchema)]).optional(),
  phoneCode: z.union([z.boolean(),z.lazy(() => PhoneCodeArgsSchema)]).optional(),
  timezones: z.union([z.boolean(),z.lazy(() => TimeZoneFindManyArgsSchema)]).optional(),
  translations: z.union([z.boolean(),z.lazy(() => TranslationFindManyArgsSchema)]).optional(),
  states: z.union([z.boolean(),z.lazy(() => StateFindManyArgsSchema)]).optional(),
  TimeZone: z.union([z.boolean(),z.lazy(() => TimeZoneFindManyArgsSchema)]).optional(),
  City: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CountryArgsSchema: z.ZodType<Prisma.CountryDefaultArgs> = z.object({
  select: z.lazy(() => CountrySelectSchema).optional(),
  include: z.lazy(() => CountryIncludeSchema).optional(),
}).strict();

export const CountryCountOutputTypeArgsSchema: z.ZodType<Prisma.CountryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CountryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CountryCountOutputTypeSelectSchema: z.ZodType<Prisma.CountryCountOutputTypeSelect> = z.object({
  timezones: z.boolean().optional(),
  translations: z.boolean().optional(),
  states: z.boolean().optional(),
  TimeZone: z.boolean().optional(),
  City: z.boolean().optional(),
}).strict();

export const CountrySelectSchema: z.ZodType<Prisma.CountrySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  iso3: z.boolean().optional(),
  iso2: z.boolean().optional(),
  numericCode: z.boolean().optional(),
  capital: z.boolean().optional(),
  tld: z.boolean().optional(),
  native: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  emoji: z.boolean().optional(),
  emojiU: z.boolean().optional(),
  wikiDataId: z.boolean().optional(),
  regionId: z.boolean().optional(),
  subregionId: z.boolean().optional(),
  currencyId: z.boolean().optional(),
  phoneCodeId: z.boolean().optional(),
  region: z.union([z.boolean(),z.lazy(() => RegionArgsSchema)]).optional(),
  subregion: z.union([z.boolean(),z.lazy(() => SubregionArgsSchema)]).optional(),
  currency: z.union([z.boolean(),z.lazy(() => CurrencyArgsSchema)]).optional(),
  phoneCode: z.union([z.boolean(),z.lazy(() => PhoneCodeArgsSchema)]).optional(),
  timezones: z.union([z.boolean(),z.lazy(() => TimeZoneFindManyArgsSchema)]).optional(),
  translations: z.union([z.boolean(),z.lazy(() => TranslationFindManyArgsSchema)]).optional(),
  states: z.union([z.boolean(),z.lazy(() => StateFindManyArgsSchema)]).optional(),
  TimeZone: z.union([z.boolean(),z.lazy(() => TimeZoneFindManyArgsSchema)]).optional(),
  City: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CountryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// STATE
//------------------------------------------------------

export const StateIncludeSchema: z.ZodType<Prisma.StateInclude> = z.object({
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
  cities: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StateCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const StateArgsSchema: z.ZodType<Prisma.StateDefaultArgs> = z.object({
  select: z.lazy(() => StateSelectSchema).optional(),
  include: z.lazy(() => StateIncludeSchema).optional(),
}).strict();

export const StateCountOutputTypeArgsSchema: z.ZodType<Prisma.StateCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => StateCountOutputTypeSelectSchema).nullish(),
}).strict();

export const StateCountOutputTypeSelectSchema: z.ZodType<Prisma.StateCountOutputTypeSelect> = z.object({
  cities: z.boolean().optional(),
  Organization: z.boolean().optional(),
}).strict();

export const StateSelectSchema: z.ZodType<Prisma.StateSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  iso2: z.boolean().optional(),
  fipsCode: z.boolean().optional(),
  type: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  wikiDataId: z.boolean().optional(),
  countryId: z.boolean().optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
  cities: z.union([z.boolean(),z.lazy(() => CityFindManyArgsSchema)]).optional(),
  Organization: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StateCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CITY
//------------------------------------------------------

export const CityIncludeSchema: z.ZodType<Prisma.CityInclude> = z.object({
  state: z.union([z.boolean(),z.lazy(() => StateArgsSchema)]).optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
}).strict()

export const CityArgsSchema: z.ZodType<Prisma.CityDefaultArgs> = z.object({
  select: z.lazy(() => CitySelectSchema).optional(),
  include: z.lazy(() => CityIncludeSchema).optional(),
}).strict();

export const CitySelectSchema: z.ZodType<Prisma.CitySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  stateCode: z.boolean().optional(),
  countryCode: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  wikiDataId: z.boolean().optional(),
  stateId: z.boolean().optional(),
  countryId: z.boolean().optional(),
  state: z.union([z.boolean(),z.lazy(() => StateArgsSchema)]).optional(),
  country: z.union([z.boolean(),z.lazy(() => CountryArgsSchema)]).optional(),
}).strict()

// ROLE
//------------------------------------------------------

export const RoleIncludeSchema: z.ZodType<Prisma.RoleInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  rolePermissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  roleCustomPermissions: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionFindManyArgsSchema)]).optional(),
  userRoles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RoleArgsSchema: z.ZodType<Prisma.RoleDefaultArgs> = z.object({
  select: z.lazy(() => RoleSelectSchema).optional(),
  include: z.lazy(() => RoleIncludeSchema).optional(),
}).strict();

export const RoleCountOutputTypeArgsSchema: z.ZodType<Prisma.RoleCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RoleCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RoleCountOutputTypeSelectSchema: z.ZodType<Prisma.RoleCountOutputTypeSelect> = z.object({
  rolePermissions: z.boolean().optional(),
  roleCustomPermissions: z.boolean().optional(),
  userRoles: z.boolean().optional(),
}).strict();

export const RoleSelectSchema: z.ZodType<Prisma.RoleSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdById: z.boolean().optional(),
  isSystem: z.boolean().optional(),
  status: z.boolean().optional(),
  priority: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  rolePermissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  roleCustomPermissions: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionFindManyArgsSchema)]).optional(),
  userRoles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER ROLE
//------------------------------------------------------

export const UserRoleIncludeSchema: z.ZodType<Prisma.UserRoleInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const UserRoleArgsSchema: z.ZodType<Prisma.UserRoleDefaultArgs> = z.object({
  select: z.lazy(() => UserRoleSelectSchema).optional(),
  include: z.lazy(() => UserRoleIncludeSchema).optional(),
}).strict();

export const UserRoleSelectSchema: z.ZodType<Prisma.UserRoleSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  roleId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  assignedBy: z.boolean().optional(),
  assignedAt: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// ACTION
//------------------------------------------------------

export const ActionIncludeSchema: z.ZodType<Prisma.ActionInclude> = z.object({
  permissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ActionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ActionArgsSchema: z.ZodType<Prisma.ActionDefaultArgs> = z.object({
  select: z.lazy(() => ActionSelectSchema).optional(),
  include: z.lazy(() => ActionIncludeSchema).optional(),
}).strict();

export const ActionCountOutputTypeArgsSchema: z.ZodType<Prisma.ActionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ActionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ActionCountOutputTypeSelectSchema: z.ZodType<Prisma.ActionCountOutputTypeSelect> = z.object({
  permissions: z.boolean().optional(),
}).strict();

export const ActionSelectSchema: z.ZodType<Prisma.ActionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  permissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ActionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RESOURCE
//------------------------------------------------------

export const ResourceIncludeSchema: z.ZodType<Prisma.ResourceInclude> = z.object({
  permissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ResourceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ResourceArgsSchema: z.ZodType<Prisma.ResourceDefaultArgs> = z.object({
  select: z.lazy(() => ResourceSelectSchema).optional(),
  include: z.lazy(() => ResourceIncludeSchema).optional(),
}).strict();

export const ResourceCountOutputTypeArgsSchema: z.ZodType<Prisma.ResourceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ResourceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ResourceCountOutputTypeSelectSchema: z.ZodType<Prisma.ResourceCountOutputTypeSelect> = z.object({
  permissions: z.boolean().optional(),
}).strict();

export const ResourceSelectSchema: z.ZodType<Prisma.ResourceSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  permissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ResourceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PERMISSION
//------------------------------------------------------

export const PermissionIncludeSchema: z.ZodType<Prisma.PermissionInclude> = z.object({
  action: z.union([z.boolean(),z.lazy(() => ActionArgsSchema)]).optional(),
  resource: z.union([z.boolean(),z.lazy(() => ResourceArgsSchema)]).optional(),
  rolePermissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PermissionArgsSchema: z.ZodType<Prisma.PermissionDefaultArgs> = z.object({
  select: z.lazy(() => PermissionSelectSchema).optional(),
  include: z.lazy(() => PermissionIncludeSchema).optional(),
}).strict();

export const PermissionCountOutputTypeArgsSchema: z.ZodType<Prisma.PermissionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PermissionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PermissionCountOutputTypeSelectSchema: z.ZodType<Prisma.PermissionCountOutputTypeSelect> = z.object({
  rolePermissions: z.boolean().optional(),
}).strict();

export const PermissionSelectSchema: z.ZodType<Prisma.PermissionSelect> = z.object({
  id: z.boolean().optional(),
  actionId: z.boolean().optional(),
  resourceId: z.boolean().optional(),
  description: z.boolean().optional(),
  category: z.boolean().optional(),
  isDangerous: z.boolean().optional(),
  action: z.union([z.boolean(),z.lazy(() => ActionArgsSchema)]).optional(),
  resource: z.union([z.boolean(),z.lazy(() => ResourceArgsSchema)]).optional(),
  rolePermissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CUSTOM PERMISSION
//------------------------------------------------------

export const CustomPermissionIncludeSchema: z.ZodType<Prisma.CustomPermissionInclude> = z.object({
  roleCustomPermissions: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomPermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CustomPermissionArgsSchema: z.ZodType<Prisma.CustomPermissionDefaultArgs> = z.object({
  select: z.lazy(() => CustomPermissionSelectSchema).optional(),
  include: z.lazy(() => CustomPermissionIncludeSchema).optional(),
}).strict();

export const CustomPermissionCountOutputTypeArgsSchema: z.ZodType<Prisma.CustomPermissionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CustomPermissionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CustomPermissionCountOutputTypeSelectSchema: z.ZodType<Prisma.CustomPermissionCountOutputTypeSelect> = z.object({
  roleCustomPermissions: z.boolean().optional(),
}).strict();

export const CustomPermissionSelectSchema: z.ZodType<Prisma.CustomPermissionSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  category: z.boolean().optional(),
  riskLevel: z.boolean().optional(),
  isActive: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  roleCustomPermissions: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomPermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROLE PERMISSION
//------------------------------------------------------

export const RolePermissionIncludeSchema: z.ZodType<Prisma.RolePermissionInclude> = z.object({
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

export const RolePermissionArgsSchema: z.ZodType<Prisma.RolePermissionDefaultArgs> = z.object({
  select: z.lazy(() => RolePermissionSelectSchema).optional(),
  include: z.lazy(() => RolePermissionIncludeSchema).optional(),
}).strict();

export const RolePermissionSelectSchema: z.ZodType<Prisma.RolePermissionSelect> = z.object({
  id: z.boolean().optional(),
  roleId: z.boolean().optional(),
  permissionId: z.boolean().optional(),
  conditions: z.boolean().optional(),
  grantedAt: z.boolean().optional(),
  grantedBy: z.boolean().optional(),
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

// ROLE CUSTOM PERMISSION
//------------------------------------------------------

export const RoleCustomPermissionIncludeSchema: z.ZodType<Prisma.RoleCustomPermissionInclude> = z.object({
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  customPermission: z.union([z.boolean(),z.lazy(() => CustomPermissionArgsSchema)]).optional(),
  permissionApprovals: z.union([z.boolean(),z.lazy(() => PermissionApprovalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RoleCustomPermissionArgsSchema: z.ZodType<Prisma.RoleCustomPermissionDefaultArgs> = z.object({
  select: z.lazy(() => RoleCustomPermissionSelectSchema).optional(),
  include: z.lazy(() => RoleCustomPermissionIncludeSchema).optional(),
}).strict();

export const RoleCustomPermissionCountOutputTypeArgsSchema: z.ZodType<Prisma.RoleCustomPermissionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RoleCustomPermissionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RoleCustomPermissionCountOutputTypeSelectSchema: z.ZodType<Prisma.RoleCustomPermissionCountOutputTypeSelect> = z.object({
  permissionApprovals: z.boolean().optional(),
}).strict();

export const RoleCustomPermissionSelectSchema: z.ZodType<Prisma.RoleCustomPermissionSelect> = z.object({
  id: z.boolean().optional(),
  roleId: z.boolean().optional(),
  customPermissionId: z.boolean().optional(),
  conditions: z.boolean().optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.boolean().optional(),
  approvedAt: z.boolean().optional(),
  grantedAt: z.boolean().optional(),
  grantedBy: z.boolean().optional(),
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  customPermission: z.union([z.boolean(),z.lazy(() => CustomPermissionArgsSchema)]).optional(),
  permissionApprovals: z.union([z.boolean(),z.lazy(() => PermissionApprovalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PERMISSION APPROVAL
//------------------------------------------------------

export const PermissionApprovalIncludeSchema: z.ZodType<Prisma.PermissionApprovalInclude> = z.object({
  roleCustomPermission: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionArgsSchema)]).optional(),
}).strict()

export const PermissionApprovalArgsSchema: z.ZodType<Prisma.PermissionApprovalDefaultArgs> = z.object({
  select: z.lazy(() => PermissionApprovalSelectSchema).optional(),
  include: z.lazy(() => PermissionApprovalIncludeSchema).optional(),
}).strict();

export const PermissionApprovalSelectSchema: z.ZodType<Prisma.PermissionApprovalSelect> = z.object({
  id: z.boolean().optional(),
  roleCustomPermissionId: z.boolean().optional(),
  requestedBy: z.boolean().optional(),
  requestedAt: z.boolean().optional(),
  approvedBy: z.boolean().optional(),
  approvedAt: z.boolean().optional(),
  rejectedBy: z.boolean().optional(),
  rejectedAt: z.boolean().optional(),
  reason: z.boolean().optional(),
  comments: z.boolean().optional(),
  status: z.boolean().optional(),
  roleCustomPermission: z.union([z.boolean(),z.lazy(() => RoleCustomPermissionArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const OtpWhereInputSchema: z.ZodType<Prisma.OtpWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OtpWhereInputSchema),z.lazy(() => OtpWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OtpWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OtpWhereInputSchema),z.lazy(() => OtpWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumOtpTypeFilterSchema),z.lazy(() => OtpTypeSchema) ]).optional(),
  hashedOtp: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OtpOrderByWithRelationInputSchema: z.ZodType<Prisma.OtpOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hashedOtp: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OtpWhereUniqueInputSchema: z.ZodType<Prisma.OtpWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => OtpWhereInputSchema),z.lazy(() => OtpWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OtpWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OtpWhereInputSchema),z.lazy(() => OtpWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumOtpTypeFilterSchema),z.lazy(() => OtpTypeSchema) ]).optional(),
  hashedOtp: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const OtpOrderByWithAggregationInputSchema: z.ZodType<Prisma.OtpOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hashedOtp: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OtpCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OtpMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OtpMinOrderByAggregateInputSchema).optional()
}).strict();

export const OtpScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OtpScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OtpScalarWhereWithAggregatesInputSchema),z.lazy(() => OtpScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OtpScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OtpScalarWhereWithAggregatesInputSchema),z.lazy(() => OtpScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumOtpTypeWithAggregatesFilterSchema),z.lazy(() => OtpTypeSchema) ]).optional(),
  hashedOtp: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  identifiers: z.lazy(() => UserIdentifierListRelationFilterSchema).optional(),
  profile: z.union([ z.lazy(() => UserProfileNullableScalarRelationFilterSchema),z.lazy(() => UserProfileWhereInputSchema) ]).optional().nullable(),
  refreshTokens: z.lazy(() => RefreshTokenListRelationFilterSchema).optional(),
  userRoles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  ownedRoles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLoginAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  identifiers: z.lazy(() => UserIdentifierOrderByRelationAggregateInputSchema).optional(),
  profile: z.lazy(() => UserProfileOrderByWithRelationInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenOrderByRelationAggregateInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleOrderByRelationAggregateInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleOrderByRelationAggregateInputSchema).optional(),
  organizations: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  identifiers: z.lazy(() => UserIdentifierListRelationFilterSchema).optional(),
  profile: z.union([ z.lazy(() => UserProfileNullableScalarRelationFilterSchema),z.lazy(() => UserProfileWhereInputSchema) ]).optional().nullable(),
  refreshTokens: z.lazy(() => RefreshTokenListRelationFilterSchema).optional(),
  userRoles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  ownedRoles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastLoginAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserIdentifierWhereInputSchema: z.ZodType<Prisma.UserIdentifierWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserIdentifierWhereInputSchema),z.lazy(() => UserIdentifierWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserIdentifierWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserIdentifierWhereInputSchema),z.lazy(() => UserIdentifierWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumIdentifierTypeFilterSchema),z.lazy(() => IdentifierTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isPrimary: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserIdentifierOrderByWithRelationInputSchema: z.ZodType<Prisma.UserIdentifierOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  isVerified: z.lazy(() => SortOrderSchema).optional(),
  isPrimary: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const UserIdentifierWhereUniqueInputSchema: z.ZodType<Prisma.UserIdentifierWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    type_value: z.lazy(() => UserIdentifierTypeValueCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    type_value: z.lazy(() => UserIdentifierTypeValueCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  type_value: z.lazy(() => UserIdentifierTypeValueCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => UserIdentifierWhereInputSchema),z.lazy(() => UserIdentifierWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserIdentifierWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserIdentifierWhereInputSchema),z.lazy(() => UserIdentifierWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumIdentifierTypeFilterSchema),z.lazy(() => IdentifierTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isPrimary: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const UserIdentifierOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserIdentifierOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  isVerified: z.lazy(() => SortOrderSchema).optional(),
  isPrimary: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserIdentifierCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserIdentifierMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserIdentifierMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserIdentifierScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserIdentifierScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserIdentifierScalarWhereWithAggregatesInputSchema),z.lazy(() => UserIdentifierScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserIdentifierScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserIdentifierScalarWhereWithAggregatesInputSchema),z.lazy(() => UserIdentifierScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumIdentifierTypeWithAggregatesFilterSchema),z.lazy(() => IdentifierTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isVerified: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  isPrimary: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserProfileWhereInputSchema: z.ZodType<Prisma.UserProfileWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  contactEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserProfileOrderByWithRelationInputSchema: z.ZodType<Prisma.UserProfileOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  contactEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const UserProfileWhereUniqueInputSchema: z.ZodType<Prisma.UserProfileWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    userId: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    userId: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  userId: z.string().optional(),
  AND: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserProfileWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserProfileWhereInputSchema),z.lazy(() => UserProfileWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  avatarUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  contactEmail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const UserProfileOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserProfileOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  contactEmail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserProfileCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserProfileMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserProfileMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserProfileScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserProfileScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema),z.lazy(() => UserProfileScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  avatarUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  contactEmail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RefreshTokenWhereInputSchema: z.ZodType<Prisma.RefreshTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RefreshTokenWhereInputSchema),z.lazy(() => RefreshTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RefreshTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RefreshTokenWhereInputSchema),z.lazy(() => RefreshTokenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  revokedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const RefreshTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.RefreshTokenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  revokedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const RefreshTokenWhereUniqueInputSchema: z.ZodType<Prisma.RefreshTokenWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => RefreshTokenWhereInputSchema),z.lazy(() => RefreshTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RefreshTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RefreshTokenWhereInputSchema),z.lazy(() => RefreshTokenWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  revokedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const RefreshTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.RefreshTokenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  revokedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RefreshTokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RefreshTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RefreshTokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const RefreshTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RefreshTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RefreshTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => RefreshTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RefreshTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RefreshTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => RefreshTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  revokedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LanguageWhereInputSchema: z.ZodType<Prisma.LanguageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nativeName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict();

export const LanguageOrderByWithRelationInputSchema: z.ZodType<Prisma.LanguageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  nativeName: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  organizations: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const LanguageWhereUniqueInputSchema: z.ZodType<Prisma.LanguageWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    code: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageWhereInputSchema),z.lazy(() => LanguageWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nativeName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict());

export const LanguageOrderByWithAggregationInputSchema: z.ZodType<Prisma.LanguageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  nativeName: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LanguageCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LanguageAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LanguageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LanguageMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LanguageSumOrderByAggregateInputSchema).optional()
}).strict();

export const LanguageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LanguageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema),z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema),z.lazy(() => LanguageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  nativeName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isDefault: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const IndustryCategoryWhereInputSchema: z.ZodType<Prisma.IndustryCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IndustryCategoryWhereInputSchema),z.lazy(() => IndustryCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IndustryCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IndustryCategoryWhereInputSchema),z.lazy(() => IndustryCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict();

export const IndustryCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.IndustryCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  organizations: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const IndustryCategoryWhereUniqueInputSchema: z.ZodType<Prisma.IndustryCategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    code: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => IndustryCategoryWhereInputSchema),z.lazy(() => IndustryCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IndustryCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IndustryCategoryWhereInputSchema),z.lazy(() => IndustryCategoryWhereInputSchema).array() ]).optional(),
  label: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict());

export const IndustryCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.IndustryCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => IndustryCategoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => IndustryCategoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => IndustryCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => IndustryCategoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => IndustryCategorySumOrderByAggregateInputSchema).optional()
}).strict();

export const IndustryCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.IndustryCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => IndustryCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => IndustryCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => IndustryCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IndustryCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => IndustryCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const FiscalYearPatternWhereInputSchema: z.ZodType<Prisma.FiscalYearPatternWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FiscalYearPatternWhereInputSchema),z.lazy(() => FiscalYearPatternWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FiscalYearPatternWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FiscalYearPatternWhereInputSchema),z.lazy(() => FiscalYearPatternWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startMonth: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  endMonth: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict();

export const FiscalYearPatternOrderByWithRelationInputSchema: z.ZodType<Prisma.FiscalYearPatternOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  startMonth: z.lazy(() => SortOrderSchema).optional(),
  endMonth: z.lazy(() => SortOrderSchema).optional(),
  organizations: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FiscalYearPatternWhereUniqueInputSchema: z.ZodType<Prisma.FiscalYearPatternWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    code: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => FiscalYearPatternWhereInputSchema),z.lazy(() => FiscalYearPatternWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FiscalYearPatternWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FiscalYearPatternWhereInputSchema),z.lazy(() => FiscalYearPatternWhereInputSchema).array() ]).optional(),
  label: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startMonth: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  endMonth: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  organizations: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict());

export const FiscalYearPatternOrderByWithAggregationInputSchema: z.ZodType<Prisma.FiscalYearPatternOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  startMonth: z.lazy(() => SortOrderSchema).optional(),
  endMonth: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FiscalYearPatternCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FiscalYearPatternAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FiscalYearPatternMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FiscalYearPatternMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FiscalYearPatternSumOrderByAggregateInputSchema).optional()
}).strict();

export const FiscalYearPatternScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FiscalYearPatternScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FiscalYearPatternScalarWhereWithAggregatesInputSchema),z.lazy(() => FiscalYearPatternScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FiscalYearPatternScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FiscalYearPatternScalarWhereWithAggregatesInputSchema),z.lazy(() => FiscalYearPatternScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startMonth: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  endMonth: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stateId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  currencyId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  timeZoneId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryStartDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  languageId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  industryCategoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  ownedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zipCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  state: z.union([ z.lazy(() => StateScalarRelationFilterSchema),z.lazy(() => StateWhereInputSchema) ]).optional(),
  currency: z.union([ z.lazy(() => CurrencyScalarRelationFilterSchema),z.lazy(() => CurrencyWhereInputSchema) ]).optional(),
  timeZone: z.union([ z.lazy(() => TimeZoneScalarRelationFilterSchema),z.lazy(() => TimeZoneWhereInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => LanguageNullableScalarRelationFilterSchema),z.lazy(() => LanguageWhereInputSchema) ]).optional().nullable(),
  industryCategory: z.union([ z.lazy(() => IndustryCategoryNullableScalarRelationFilterSchema),z.lazy(() => IndustryCategoryWhereInputSchema) ]).optional().nullable(),
  fiscalYearPattern: z.union([ z.lazy(() => FiscalYearPatternNullableScalarRelationFilterSchema),z.lazy(() => FiscalYearPatternWhereInputSchema) ]).optional().nullable(),
  userRoles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  roles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  ownedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  timeZoneId: z.lazy(() => SortOrderSchema).optional(),
  inventoryStartDate: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  industryCategoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fiscalYearPatternId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownedById: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  zipCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => StateOrderByWithRelationInputSchema).optional(),
  currency: z.lazy(() => CurrencyOrderByWithRelationInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneOrderByWithRelationInputSchema).optional(),
  language: z.lazy(() => LanguageOrderByWithRelationInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryOrderByWithRelationInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternOrderByWithRelationInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleOrderByRelationAggregateInputSchema).optional(),
  roles: z.lazy(() => RoleOrderByRelationAggregateInputSchema).optional(),
  ownedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    name_ownedById: z.lazy(() => OrganizationNameOwnedByIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    name_ownedById: z.lazy(() => OrganizationNameOwnedByIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  name_ownedById: z.lazy(() => OrganizationNameOwnedByIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stateId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  currencyId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  timeZoneId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  inventoryStartDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  languageId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  industryCategoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  ownedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zipCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  state: z.union([ z.lazy(() => StateScalarRelationFilterSchema),z.lazy(() => StateWhereInputSchema) ]).optional(),
  currency: z.union([ z.lazy(() => CurrencyScalarRelationFilterSchema),z.lazy(() => CurrencyWhereInputSchema) ]).optional(),
  timeZone: z.union([ z.lazy(() => TimeZoneScalarRelationFilterSchema),z.lazy(() => TimeZoneWhereInputSchema) ]).optional(),
  language: z.union([ z.lazy(() => LanguageNullableScalarRelationFilterSchema),z.lazy(() => LanguageWhereInputSchema) ]).optional().nullable(),
  industryCategory: z.union([ z.lazy(() => IndustryCategoryNullableScalarRelationFilterSchema),z.lazy(() => IndustryCategoryWhereInputSchema) ]).optional().nullable(),
  fiscalYearPattern: z.union([ z.lazy(() => FiscalYearPatternNullableScalarRelationFilterSchema),z.lazy(() => FiscalYearPatternWhereInputSchema) ]).optional().nullable(),
  userRoles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  roles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  ownedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  timeZoneId: z.lazy(() => SortOrderSchema).optional(),
  inventoryStartDate: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  industryCategoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fiscalYearPatternId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownedById: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  zipCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrganizationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrganizationSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stateId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  currencyId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  timeZoneId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  inventoryStartDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  languageId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  industryCategoryId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  ownedById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  zipCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RegionWhereInputSchema: z.ZodType<Prisma.RegionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RegionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subregions: z.lazy(() => SubregionListRelationFilterSchema).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional()
}).strict();

export const RegionOrderByWithRelationInputSchema: z.ZodType<Prisma.RegionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  subregions: z.lazy(() => SubregionOrderByRelationAggregateInputSchema).optional(),
  countries: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RegionWhereUniqueInputSchema: z.ZodType<Prisma.RegionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RegionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RegionWhereInputSchema),z.lazy(() => RegionWhereInputSchema).array() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subregions: z.lazy(() => SubregionListRelationFilterSchema).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional()
}).strict());

export const RegionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RegionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RegionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RegionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RegionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RegionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RegionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RegionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RegionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RegionScalarWhereWithAggregatesInputSchema),z.lazy(() => RegionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RegionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RegionScalarWhereWithAggregatesInputSchema),z.lazy(() => RegionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wikiDataId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SubregionWhereInputSchema: z.ZodType<Prisma.SubregionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubregionWhereInputSchema),z.lazy(() => SubregionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubregionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubregionWhereInputSchema),z.lazy(() => SubregionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  region: z.union([ z.lazy(() => RegionScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional()
}).strict();

export const SubregionOrderByWithRelationInputSchema: z.ZodType<Prisma.SubregionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  region: z.lazy(() => RegionOrderByWithRelationInputSchema).optional(),
  countries: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SubregionWhereUniqueInputSchema: z.ZodType<Prisma.SubregionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => SubregionWhereInputSchema),z.lazy(() => SubregionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubregionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubregionWhereInputSchema),z.lazy(() => SubregionWhereInputSchema).array() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  region: z.union([ z.lazy(() => RegionScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional()
}).strict());

export const SubregionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SubregionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  translations: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SubregionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SubregionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SubregionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SubregionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SubregionSumOrderByAggregateInputSchema).optional()
}).strict();

export const SubregionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SubregionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SubregionScalarWhereWithAggregatesInputSchema),z.lazy(() => SubregionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubregionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubregionScalarWhereWithAggregatesInputSchema),z.lazy(() => SubregionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  translations: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wikiDataId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const CurrencyWhereInputSchema: z.ZodType<Prisma.CurrencyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CurrencyWhereInputSchema),z.lazy(() => CurrencyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CurrencyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CurrencyWhereInputSchema),z.lazy(() => CurrencyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  symbol: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict();

export const CurrencyOrderByWithRelationInputSchema: z.ZodType<Prisma.CurrencyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  symbol: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  countries: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CurrencyWhereUniqueInputSchema: z.ZodType<Prisma.CurrencyWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    code: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => CurrencyWhereInputSchema),z.lazy(() => CurrencyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CurrencyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CurrencyWhereInputSchema),z.lazy(() => CurrencyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  symbol: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict());

export const CurrencyOrderByWithAggregationInputSchema: z.ZodType<Prisma.CurrencyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  symbol: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CurrencyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CurrencyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CurrencyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CurrencyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CurrencySumOrderByAggregateInputSchema).optional()
}).strict();

export const CurrencyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CurrencyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema),z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema),z.lazy(() => CurrencyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  symbol: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PhoneCodeWhereInputSchema: z.ZodType<Prisma.PhoneCodeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PhoneCodeWhereInputSchema),z.lazy(() => PhoneCodeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PhoneCodeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PhoneCodeWhereInputSchema),z.lazy(() => PhoneCodeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional()
}).strict();

export const PhoneCodeOrderByWithRelationInputSchema: z.ZodType<Prisma.PhoneCodeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  countries: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PhoneCodeWhereUniqueInputSchema: z.ZodType<Prisma.PhoneCodeWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    code: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => PhoneCodeWhereInputSchema),z.lazy(() => PhoneCodeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PhoneCodeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PhoneCodeWhereInputSchema),z.lazy(() => PhoneCodeWhereInputSchema).array() ]).optional(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional()
}).strict());

export const PhoneCodeOrderByWithAggregationInputSchema: z.ZodType<Prisma.PhoneCodeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PhoneCodeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PhoneCodeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PhoneCodeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PhoneCodeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PhoneCodeSumOrderByAggregateInputSchema).optional()
}).strict();

export const PhoneCodeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PhoneCodeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PhoneCodeScalarWhereWithAggregatesInputSchema),z.lazy(() => PhoneCodeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PhoneCodeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PhoneCodeScalarWhereWithAggregatesInputSchema),z.lazy(() => PhoneCodeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TimeZoneWhereInputSchema: z.ZodType<Prisma.TimeZoneWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeZoneWhereInputSchema),z.lazy(() => TimeZoneWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeZoneWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeZoneWhereInputSchema),z.lazy(() => TimeZoneWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  offset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Country: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict();

export const TimeZoneOrderByWithRelationInputSchema: z.ZodType<Prisma.TimeZoneOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  offset: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  countries: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional(),
  Country: z.lazy(() => CountryOrderByRelationAggregateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TimeZoneWhereUniqueInputSchema: z.ZodType<Prisma.TimeZoneWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => TimeZoneWhereInputSchema),z.lazy(() => TimeZoneWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeZoneWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeZoneWhereInputSchema),z.lazy(() => TimeZoneWhereInputSchema).array() ]).optional(),
  offset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countries: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Country: z.lazy(() => CountryListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict());

export const TimeZoneOrderByWithAggregationInputSchema: z.ZodType<Prisma.TimeZoneOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  offset: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TimeZoneCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TimeZoneAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TimeZoneMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TimeZoneMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TimeZoneSumOrderByAggregateInputSchema).optional()
}).strict();

export const TimeZoneScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TimeZoneScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TimeZoneScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeZoneScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeZoneScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeZoneScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeZoneScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  offset: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TranslationWhereInputSchema: z.ZodType<Prisma.TranslationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TranslationWhereInputSchema),z.lazy(() => TranslationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TranslationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TranslationWhereInputSchema),z.lazy(() => TranslationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  countryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  country: z.union([ z.lazy(() => CountryNullableScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TranslationOrderByWithRelationInputSchema: z.ZodType<Prisma.TranslationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.lazy(() => CountryOrderByWithRelationInputSchema).optional()
}).strict();

export const TranslationWhereUniqueInputSchema: z.ZodType<Prisma.TranslationWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => TranslationWhereInputSchema),z.lazy(() => TranslationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TranslationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TranslationWhereInputSchema),z.lazy(() => TranslationWhereInputSchema).array() ]).optional(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  countryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  country: z.union([ z.lazy(() => CountryNullableScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TranslationOrderByWithAggregationInputSchema: z.ZodType<Prisma.TranslationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TranslationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TranslationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TranslationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TranslationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TranslationSumOrderByAggregateInputSchema).optional()
}).strict();

export const TranslationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TranslationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TranslationScalarWhereWithAggregatesInputSchema),z.lazy(() => TranslationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TranslationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TranslationScalarWhereWithAggregatesInputSchema),z.lazy(() => TranslationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  language: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  countryId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const CountryWhereInputSchema: z.ZodType<Prisma.CountryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iso3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  iso2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  numericCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  capital: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tld: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  native: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emoji: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emojiU: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  subregionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  currencyId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  phoneCodeId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  region: z.union([ z.lazy(() => RegionNullableScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional().nullable(),
  subregion: z.union([ z.lazy(() => SubregionNullableScalarRelationFilterSchema),z.lazy(() => SubregionWhereInputSchema) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => CurrencyNullableScalarRelationFilterSchema),z.lazy(() => CurrencyWhereInputSchema) ]).optional().nullable(),
  phoneCode: z.union([ z.lazy(() => PhoneCodeNullableScalarRelationFilterSchema),z.lazy(() => PhoneCodeWhereInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneListRelationFilterSchema).optional(),
  translations: z.lazy(() => TranslationListRelationFilterSchema).optional(),
  states: z.lazy(() => StateListRelationFilterSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneListRelationFilterSchema).optional(),
  City: z.lazy(() => CityListRelationFilterSchema).optional()
}).strict();

export const CountryOrderByWithRelationInputSchema: z.ZodType<Prisma.CountryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  iso2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  numericCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  capital: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tld: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  native: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emoji: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emojiU: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  regionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  subregionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currencyId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phoneCodeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  region: z.lazy(() => RegionOrderByWithRelationInputSchema).optional(),
  subregion: z.lazy(() => SubregionOrderByWithRelationInputSchema).optional(),
  currency: z.lazy(() => CurrencyOrderByWithRelationInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeOrderByWithRelationInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneOrderByRelationAggregateInputSchema).optional(),
  translations: z.lazy(() => TranslationOrderByRelationAggregateInputSchema).optional(),
  states: z.lazy(() => StateOrderByRelationAggregateInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneOrderByRelationAggregateInputSchema).optional(),
  City: z.lazy(() => CityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CountryWhereUniqueInputSchema: z.ZodType<Prisma.CountryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    iso2: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    iso2: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  iso2: z.string().optional(),
  AND: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryWhereInputSchema),z.lazy(() => CountryWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iso3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  numericCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  capital: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tld: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  native: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emoji: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emojiU: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  subregionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  currencyId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  phoneCodeId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  region: z.union([ z.lazy(() => RegionNullableScalarRelationFilterSchema),z.lazy(() => RegionWhereInputSchema) ]).optional().nullable(),
  subregion: z.union([ z.lazy(() => SubregionNullableScalarRelationFilterSchema),z.lazy(() => SubregionWhereInputSchema) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => CurrencyNullableScalarRelationFilterSchema),z.lazy(() => CurrencyWhereInputSchema) ]).optional().nullable(),
  phoneCode: z.union([ z.lazy(() => PhoneCodeNullableScalarRelationFilterSchema),z.lazy(() => PhoneCodeWhereInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneListRelationFilterSchema).optional(),
  translations: z.lazy(() => TranslationListRelationFilterSchema).optional(),
  states: z.lazy(() => StateListRelationFilterSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneListRelationFilterSchema).optional(),
  City: z.lazy(() => CityListRelationFilterSchema).optional()
}).strict());

export const CountryOrderByWithAggregationInputSchema: z.ZodType<Prisma.CountryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  iso2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  numericCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  capital: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tld: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  native: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emoji: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emojiU: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  regionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  subregionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currencyId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phoneCodeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CountryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CountryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CountryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CountryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CountrySumOrderByAggregateInputSchema).optional()
}).strict();

export const CountryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CountryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CountryScalarWhereWithAggregatesInputSchema),z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryScalarWhereWithAggregatesInputSchema),z.lazy(() => CountryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  iso3: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  iso2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  numericCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  capital: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tld: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  native: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  emoji: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  emojiU: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  subregionId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  currencyId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  phoneCodeId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const StateWhereInputSchema: z.ZodType<Prisma.StateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StateWhereInputSchema),z.lazy(() => StateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StateWhereInputSchema),z.lazy(() => StateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iso2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fipsCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
  cities: z.lazy(() => CityListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict();

export const StateOrderByWithRelationInputSchema: z.ZodType<Prisma.StateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fipsCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => CountryOrderByWithRelationInputSchema).optional(),
  cities: z.lazy(() => CityOrderByRelationAggregateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const StateWhereUniqueInputSchema: z.ZodType<Prisma.StateWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => StateWhereInputSchema),z.lazy(() => StateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StateWhereInputSchema),z.lazy(() => StateWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iso2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fipsCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
  cities: z.lazy(() => CityListRelationFilterSchema).optional(),
  Organization: z.lazy(() => OrganizationListRelationFilterSchema).optional()
}).strict());

export const StateOrderByWithAggregationInputSchema: z.ZodType<Prisma.StateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fipsCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => StateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => StateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => StateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => StateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => StateSumOrderByAggregateInputSchema).optional()
}).strict();

export const StateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.StateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => StateScalarWhereWithAggregatesInputSchema),z.lazy(() => StateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => StateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StateScalarWhereWithAggregatesInputSchema),z.lazy(() => StateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  iso2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fipsCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  countryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const CityWhereInputSchema: z.ZodType<Prisma.CityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stateCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countryCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stateId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  countryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  state: z.union([ z.lazy(() => StateScalarRelationFilterSchema),z.lazy(() => StateWhereInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
}).strict();

export const CityOrderByWithRelationInputSchema: z.ZodType<Prisma.CityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  countryCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => StateOrderByWithRelationInputSchema).optional(),
  country: z.lazy(() => CountryOrderByWithRelationInputSchema).optional()
}).strict();

export const CityWhereUniqueInputSchema: z.ZodType<Prisma.CityWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityWhereInputSchema),z.lazy(() => CityWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stateCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countryCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stateId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  countryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  state: z.union([ z.lazy(() => StateScalarRelationFilterSchema),z.lazy(() => StateWhereInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => CountryScalarRelationFilterSchema),z.lazy(() => CountryWhereInputSchema) ]).optional(),
}).strict());

export const CityOrderByWithAggregationInputSchema: z.ZodType<Prisma.CityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  countryCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wikiDataId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CityCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CityAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CityMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CitySumOrderByAggregateInputSchema).optional()
}).strict();

export const CityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CityScalarWhereWithAggregatesInputSchema),z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityScalarWhereWithAggregatesInputSchema),z.lazy(() => CityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stateCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  countryCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  stateId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  countryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const RoleWhereInputSchema: z.ZodType<Prisma.RoleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isSystem: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionListRelationFilterSchema).optional(),
  userRoles: z.lazy(() => UserRoleListRelationFilterSchema).optional()
}).strict();

export const RoleOrderByWithRelationInputSchema: z.ZodType<Prisma.RoleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  isSystem: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionOrderByRelationAggregateInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionOrderByRelationAggregateInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RoleWhereUniqueInputSchema: z.ZodType<Prisma.RoleWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    organizationId_name: z.lazy(() => RoleOrganizationIdNameCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    organizationId_name: z.lazy(() => RoleOrganizationIdNameCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  organizationId_name: z.lazy(() => RoleOrganizationIdNameCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isSystem: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionListRelationFilterSchema).optional(),
  userRoles: z.lazy(() => UserRoleListRelationFilterSchema).optional()
}).strict());

export const RoleOrderByWithAggregationInputSchema: z.ZodType<Prisma.RoleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  isSystem: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RoleCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RoleAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RoleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RoleMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RoleSumOrderByAggregateInputSchema).optional()
}).strict();

export const RoleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RoleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RoleScalarWhereWithAggregatesInputSchema),z.lazy(() => RoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleScalarWhereWithAggregatesInputSchema),z.lazy(() => RoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isSystem: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusWithAggregatesFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserRoleWhereInputSchema: z.ZodType<Prisma.UserRoleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const UserRoleOrderByWithRelationInputSchema: z.ZodType<Prisma.UserRoleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  assignedBy: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  role: z.lazy(() => RoleOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const UserRoleWhereUniqueInputSchema: z.ZodType<Prisma.UserRoleWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    userId_roleId_organizationId: z.lazy(() => UserRoleUserIdRoleIdOrganizationIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    userId_roleId_organizationId: z.lazy(() => UserRoleUserIdRoleIdOrganizationIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  userId_roleId_organizationId: z.lazy(() => UserRoleUserIdRoleIdOrganizationIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const UserRoleOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserRoleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  assignedBy: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserRoleCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserRoleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserRoleMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserRoleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserRoleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  roleId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  assignedBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusWithAggregatesFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ActionWhereInputSchema: z.ZodType<Prisma.ActionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ActionWhereInputSchema),z.lazy(() => ActionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActionWhereInputSchema),z.lazy(() => ActionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => EnumActionNameFilterSchema),z.lazy(() => ActionNameSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions: z.lazy(() => PermissionListRelationFilterSchema).optional()
}).strict();

export const ActionOrderByWithRelationInputSchema: z.ZodType<Prisma.ActionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  permissions: z.lazy(() => PermissionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ActionWhereUniqueInputSchema: z.ZodType<Prisma.ActionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.lazy(() => ActionNameSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.lazy(() => ActionNameSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ActionNameSchema).optional(),
  AND: z.union([ z.lazy(() => ActionWhereInputSchema),z.lazy(() => ActionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActionWhereInputSchema),z.lazy(() => ActionWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions: z.lazy(() => PermissionListRelationFilterSchema).optional()
}).strict());

export const ActionOrderByWithAggregationInputSchema: z.ZodType<Prisma.ActionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ActionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ActionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ActionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ActionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ActionSumOrderByAggregateInputSchema).optional()
}).strict();

export const ActionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ActionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ActionScalarWhereWithAggregatesInputSchema),z.lazy(() => ActionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ActionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ActionScalarWhereWithAggregatesInputSchema),z.lazy(() => ActionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => EnumActionNameWithAggregatesFilterSchema),z.lazy(() => ActionNameSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ResourceWhereInputSchema: z.ZodType<Prisma.ResourceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ResourceWhereInputSchema),z.lazy(() => ResourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResourceWhereInputSchema),z.lazy(() => ResourceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => EnumResourceNameFilterSchema),z.lazy(() => ResourceNameSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions: z.lazy(() => PermissionListRelationFilterSchema).optional()
}).strict();

export const ResourceOrderByWithRelationInputSchema: z.ZodType<Prisma.ResourceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  permissions: z.lazy(() => PermissionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ResourceWhereUniqueInputSchema: z.ZodType<Prisma.ResourceWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.lazy(() => ResourceNameSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.lazy(() => ResourceNameSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ResourceNameSchema).optional(),
  AND: z.union([ z.lazy(() => ResourceWhereInputSchema),z.lazy(() => ResourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResourceWhereInputSchema),z.lazy(() => ResourceWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions: z.lazy(() => PermissionListRelationFilterSchema).optional()
}).strict());

export const ResourceOrderByWithAggregationInputSchema: z.ZodType<Prisma.ResourceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ResourceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ResourceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ResourceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ResourceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ResourceSumOrderByAggregateInputSchema).optional()
}).strict();

export const ResourceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ResourceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ResourceScalarWhereWithAggregatesInputSchema),z.lazy(() => ResourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ResourceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ResourceScalarWhereWithAggregatesInputSchema),z.lazy(() => ResourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => EnumResourceNameWithAggregatesFilterSchema),z.lazy(() => ResourceNameSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PermissionWhereInputSchema: z.ZodType<Prisma.PermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  actionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  resourceId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDangerous: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  action: z.union([ z.lazy(() => ActionScalarRelationFilterSchema),z.lazy(() => ActionWhereInputSchema) ]).optional(),
  resource: z.union([ z.lazy(() => ResourceScalarRelationFilterSchema),z.lazy(() => ResourceWhereInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional()
}).strict();

export const PermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.PermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  actionId: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDangerous: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => ActionOrderByWithRelationInputSchema).optional(),
  resource: z.lazy(() => ResourceOrderByWithRelationInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PermissionWhereUniqueInputSchema: z.ZodType<Prisma.PermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    actionId_resourceId: z.lazy(() => PermissionActionIdResourceIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    actionId_resourceId: z.lazy(() => PermissionActionIdResourceIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  actionId_resourceId: z.lazy(() => PermissionActionIdResourceIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  actionId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  resourceId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDangerous: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  action: z.union([ z.lazy(() => ActionScalarRelationFilterSchema),z.lazy(() => ActionWhereInputSchema) ]).optional(),
  resource: z.union([ z.lazy(() => ResourceScalarRelationFilterSchema),z.lazy(() => ResourceWhereInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional()
}).strict());

export const PermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.PermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  actionId: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDangerous: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PermissionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PermissionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PermissionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PermissionSumOrderByAggregateInputSchema).optional()
}).strict();

export const PermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  actionId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  resourceId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isDangerous: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const CustomPermissionWhereInputSchema: z.ZodType<Prisma.CustomPermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomPermissionWhereInputSchema),z.lazy(() => CustomPermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomPermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomPermissionWhereInputSchema),z.lazy(() => CustomPermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => EnumSystemCustomPermissionFilterSchema),z.lazy(() => SystemCustomPermissionSchema) ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  riskLevel: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  requiresApproval: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionListRelationFilterSchema).optional()
}).strict();

export const CustomPermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomPermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  riskLevel: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  requiresApproval: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CustomPermissionWhereUniqueInputSchema: z.ZodType<Prisma.CustomPermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    code: z.lazy(() => SystemCustomPermissionSchema)
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    code: z.lazy(() => SystemCustomPermissionSchema),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  code: z.lazy(() => SystemCustomPermissionSchema).optional(),
  AND: z.union([ z.lazy(() => CustomPermissionWhereInputSchema),z.lazy(() => CustomPermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomPermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomPermissionWhereInputSchema),z.lazy(() => CustomPermissionWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  riskLevel: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  requiresApproval: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionListRelationFilterSchema).optional()
}).strict());

export const CustomPermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomPermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  riskLevel: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  requiresApproval: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomPermissionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomPermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomPermissionMinOrderByAggregateInputSchema).optional()
}).strict();

export const CustomPermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomPermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomPermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomPermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomPermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomPermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomPermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => EnumSystemCustomPermissionWithAggregatesFilterSchema),z.lazy(() => SystemCustomPermissionSchema) ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  riskLevel: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  requiresApproval: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RolePermissionWhereInputSchema: z.ZodType<Prisma.RolePermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  conditions: z.lazy(() => JsonNullableFilterSchema).optional(),
  grantedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => PermissionScalarRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict();

export const RolePermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.RolePermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => RoleOrderByWithRelationInputSchema).optional(),
  permission: z.lazy(() => PermissionOrderByWithRelationInputSchema).optional()
}).strict();

export const RolePermissionWhereUniqueInputSchema: z.ZodType<Prisma.RolePermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    roleId_permissionId: z.lazy(() => RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    roleId_permissionId: z.lazy(() => RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  roleId_permissionId: z.lazy(() => RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  conditions: z.lazy(() => JsonNullableFilterSchema).optional(),
  grantedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => PermissionScalarRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict());

export const RolePermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RolePermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RolePermissionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RolePermissionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RolePermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RolePermissionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RolePermissionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RolePermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RolePermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  conditions: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  grantedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const RoleCustomPermissionWhereInputSchema: z.ZodType<Prisma.RoleCustomPermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RoleCustomPermissionWhereInputSchema),z.lazy(() => RoleCustomPermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleCustomPermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleCustomPermissionWhereInputSchema),z.lazy(() => RoleCustomPermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customPermissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  conditions: z.lazy(() => JsonNullableFilterSchema).optional(),
  approvalRequired: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  grantedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  customPermission: z.union([ z.lazy(() => CustomPermissionScalarRelationFilterSchema),z.lazy(() => CustomPermissionWhereInputSchema) ]).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalListRelationFilterSchema).optional()
}).strict();

export const RoleCustomPermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.RoleCustomPermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  customPermissionId: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvalRequired: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => RoleOrderByWithRelationInputSchema).optional(),
  customPermission: z.lazy(() => CustomPermissionOrderByWithRelationInputSchema).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RoleCustomPermissionWhereUniqueInputSchema: z.ZodType<Prisma.RoleCustomPermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    roleId_customPermissionId: z.lazy(() => RoleCustomPermissionRoleIdCustomPermissionIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    roleId_customPermissionId: z.lazy(() => RoleCustomPermissionRoleIdCustomPermissionIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  roleId_customPermissionId: z.lazy(() => RoleCustomPermissionRoleIdCustomPermissionIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RoleCustomPermissionWhereInputSchema),z.lazy(() => RoleCustomPermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleCustomPermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleCustomPermissionWhereInputSchema),z.lazy(() => RoleCustomPermissionWhereInputSchema).array() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customPermissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  conditions: z.lazy(() => JsonNullableFilterSchema).optional(),
  approvalRequired: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  grantedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  customPermission: z.union([ z.lazy(() => CustomPermissionScalarRelationFilterSchema),z.lazy(() => CustomPermissionWhereInputSchema) ]).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalListRelationFilterSchema).optional()
}).strict());

export const RoleCustomPermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RoleCustomPermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  customPermissionId: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvalRequired: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RoleCustomPermissionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RoleCustomPermissionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RoleCustomPermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RoleCustomPermissionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RoleCustomPermissionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RoleCustomPermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RoleCustomPermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleCustomPermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customPermissionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  conditions: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  approvalRequired: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  grantedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const PermissionApprovalWhereInputSchema: z.ZodType<Prisma.PermissionApprovalWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionApprovalWhereInputSchema),z.lazy(() => PermissionApprovalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionApprovalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionApprovalWhereInputSchema),z.lazy(() => PermissionApprovalWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  roleCustomPermissionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  reason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  roleCustomPermission: z.union([ z.lazy(() => RoleCustomPermissionScalarRelationFilterSchema),z.lazy(() => RoleCustomPermissionWhereInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalOrderByWithRelationInputSchema: z.ZodType<Prisma.PermissionApprovalOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleCustomPermissionId: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  roleCustomPermission: z.lazy(() => RoleCustomPermissionOrderByWithRelationInputSchema).optional()
}).strict();

export const PermissionApprovalWhereUniqueInputSchema: z.ZodType<Prisma.PermissionApprovalWhereUniqueInput> = z.object({
  id: z.string().uuid()
})
.and(z.object({
  id: z.string().uuid().optional(),
  AND: z.union([ z.lazy(() => PermissionApprovalWhereInputSchema),z.lazy(() => PermissionApprovalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionApprovalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionApprovalWhereInputSchema),z.lazy(() => PermissionApprovalWhereInputSchema).array() ]).optional(),
  roleCustomPermissionId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  reason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  roleCustomPermission: z.union([ z.lazy(() => RoleCustomPermissionScalarRelationFilterSchema),z.lazy(() => RoleCustomPermissionWhereInputSchema) ]).optional(),
}).strict());

export const PermissionApprovalOrderByWithAggregationInputSchema: z.ZodType<Prisma.PermissionApprovalOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleCustomPermissionId: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PermissionApprovalCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PermissionApprovalAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PermissionApprovalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PermissionApprovalMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PermissionApprovalSumOrderByAggregateInputSchema).optional()
}).strict();

export const PermissionApprovalScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PermissionApprovalScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionApprovalScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionApprovalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionApprovalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionApprovalScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionApprovalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  roleCustomPermissionId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  reason: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const OtpCreateInputSchema: z.ZodType<Prisma.OtpCreateInput> = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => OtpTypeSchema),
  hashedOtp: z.string(),
  identifier: z.string(),
  expiresAt: z.coerce.date(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OtpUncheckedCreateInputSchema: z.ZodType<Prisma.OtpUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => OtpTypeSchema),
  hashedOtp: z.string(),
  identifier: z.string(),
  expiresAt: z.coerce.date(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OtpUpdateInputSchema: z.ZodType<Prisma.OtpUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => EnumOtpTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hashedOtp: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OtpUncheckedUpdateInputSchema: z.ZodType<Prisma.OtpUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => EnumOtpTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hashedOtp: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OtpCreateManyInputSchema: z.ZodType<Prisma.OtpCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => OtpTypeSchema),
  hashedOtp: z.string(),
  identifier: z.string(),
  expiresAt: z.coerce.date(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OtpUpdateManyMutationInputSchema: z.ZodType<Prisma.OtpUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => EnumOtpTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hashedOtp: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OtpUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OtpUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => EnumOtpTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hashedOtp: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserIdentifierCreateInputSchema: z.ZodType<Prisma.UserIdentifierCreateInput> = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => IdentifierTypeSchema),
  value: z.string(),
  isVerified: z.boolean().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutIdentifiersInputSchema)
}).strict();

export const UserIdentifierUncheckedCreateInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  type: z.lazy(() => IdentifierTypeSchema),
  value: z.string(),
  isVerified: z.boolean().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserIdentifierUpdateInputSchema: z.ZodType<Prisma.UserIdentifierUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => EnumIdentifierTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPrimary: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutIdentifiersNestedInputSchema).optional()
}).strict();

export const UserIdentifierUncheckedUpdateInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => EnumIdentifierTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPrimary: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserIdentifierCreateManyInputSchema: z.ZodType<Prisma.UserIdentifierCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  type: z.lazy(() => IdentifierTypeSchema),
  value: z.string(),
  isVerified: z.boolean().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserIdentifierUpdateManyMutationInputSchema: z.ZodType<Prisma.UserIdentifierUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => EnumIdentifierTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPrimary: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserIdentifierUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => EnumIdentifierTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPrimary: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserProfileCreateInputSchema: z.ZodType<Prisma.UserProfileCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  avatarUrl: z.string().optional().nullable(),
  contactEmail: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutProfileInputSchema)
}).strict();

export const UserProfileUncheckedCreateInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  name: z.string(),
  avatarUrl: z.string().optional().nullable(),
  contactEmail: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserProfileUpdateInputSchema: z.ZodType<Prisma.UserProfileUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  contactEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutProfileNestedInputSchema).optional()
}).strict();

export const UserProfileUncheckedUpdateInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  contactEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserProfileCreateManyInputSchema: z.ZodType<Prisma.UserProfileCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  name: z.string(),
  avatarUrl: z.string().optional().nullable(),
  contactEmail: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserProfileUpdateManyMutationInputSchema: z.ZodType<Prisma.UserProfileUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  contactEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserProfileUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  contactEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RefreshTokenCreateInputSchema: z.ZodType<Prisma.RefreshTokenCreateInput> = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  userAgent: z.string().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  expiresAt: z.coerce.date(),
  revokedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutRefreshTokensInputSchema)
}).strict();

export const RefreshTokenUncheckedCreateInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  userId: z.string(),
  userAgent: z.string().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  expiresAt: z.coerce.date(),
  revokedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RefreshTokenUpdateInputSchema: z.ZodType<Prisma.RefreshTokenUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  revokedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutRefreshTokensNestedInputSchema).optional()
}).strict();

export const RefreshTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  revokedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RefreshTokenCreateManyInputSchema: z.ZodType<Prisma.RefreshTokenCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  userId: z.string(),
  userAgent: z.string().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  expiresAt: z.coerce.date(),
  revokedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RefreshTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.RefreshTokenUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  revokedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RefreshTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  revokedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LanguageCreateInputSchema: z.ZodType<Prisma.LanguageCreateInput> = z.object({
  code: z.string(),
  name: z.string(),
  nativeName: z.string(),
  isDefault: z.boolean().optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutLanguageInputSchema).optional()
}).strict();

export const LanguageUncheckedCreateInputSchema: z.ZodType<Prisma.LanguageUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  name: z.string(),
  nativeName: z.string(),
  isDefault: z.boolean().optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutLanguageInputSchema).optional()
}).strict();

export const LanguageUpdateInputSchema: z.ZodType<Prisma.LanguageUpdateInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nativeName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutLanguageNestedInputSchema).optional()
}).strict();

export const LanguageUncheckedUpdateInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nativeName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutLanguageNestedInputSchema).optional()
}).strict();

export const LanguageCreateManyInputSchema: z.ZodType<Prisma.LanguageCreateManyInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  name: z.string(),
  nativeName: z.string(),
  isDefault: z.boolean().optional()
}).strict();

export const LanguageUpdateManyMutationInputSchema: z.ZodType<Prisma.LanguageUpdateManyMutationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nativeName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LanguageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nativeName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndustryCategoryCreateInputSchema: z.ZodType<Prisma.IndustryCategoryCreateInput> = z.object({
  code: z.string(),
  label: z.string(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutIndustryCategoryInputSchema).optional()
}).strict();

export const IndustryCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.IndustryCategoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  label: z.string(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutIndustryCategoryInputSchema).optional()
}).strict();

export const IndustryCategoryUpdateInputSchema: z.ZodType<Prisma.IndustryCategoryUpdateInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutIndustryCategoryNestedInputSchema).optional()
}).strict();

export const IndustryCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.IndustryCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutIndustryCategoryNestedInputSchema).optional()
}).strict();

export const IndustryCategoryCreateManyInputSchema: z.ZodType<Prisma.IndustryCategoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  label: z.string()
}).strict();

export const IndustryCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.IndustryCategoryUpdateManyMutationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndustryCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.IndustryCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FiscalYearPatternCreateInputSchema: z.ZodType<Prisma.FiscalYearPatternCreateInput> = z.object({
  code: z.string(),
  label: z.string(),
  startMonth: z.number().int(),
  endMonth: z.number().int(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutFiscalYearPatternInputSchema).optional()
}).strict();

export const FiscalYearPatternUncheckedCreateInputSchema: z.ZodType<Prisma.FiscalYearPatternUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  label: z.string(),
  startMonth: z.number().int(),
  endMonth: z.number().int(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutFiscalYearPatternInputSchema).optional()
}).strict();

export const FiscalYearPatternUpdateInputSchema: z.ZodType<Prisma.FiscalYearPatternUpdateInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  endMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutFiscalYearPatternNestedInputSchema).optional()
}).strict();

export const FiscalYearPatternUncheckedUpdateInputSchema: z.ZodType<Prisma.FiscalYearPatternUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  endMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutFiscalYearPatternNestedInputSchema).optional()
}).strict();

export const FiscalYearPatternCreateManyInputSchema: z.ZodType<Prisma.FiscalYearPatternCreateManyInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  label: z.string(),
  startMonth: z.number().int(),
  endMonth: z.number().int()
}).strict();

export const FiscalYearPatternUpdateManyMutationInputSchema: z.ZodType<Prisma.FiscalYearPatternUpdateManyMutationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  endMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FiscalYearPatternUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FiscalYearPatternUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  endMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RegionCreateInputSchema: z.ZodType<Prisma.RegionCreateInput> = z.object({
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  subregions: z.lazy(() => SubregionCreateNestedManyWithoutRegionInputSchema).optional(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUncheckedCreateInputSchema: z.ZodType<Prisma.RegionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  subregions: z.lazy(() => SubregionUncheckedCreateNestedManyWithoutRegionInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUpdateInputSchema: z.ZodType<Prisma.RegionUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregions: z.lazy(() => SubregionUpdateManyWithoutRegionNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionUncheckedUpdateInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregions: z.lazy(() => SubregionUncheckedUpdateManyWithoutRegionNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionCreateManyInputSchema: z.ZodType<Prisma.RegionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable()
}).strict();

export const RegionUpdateManyMutationInputSchema: z.ZodType<Prisma.RegionUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RegionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubregionCreateInputSchema: z.ZodType<Prisma.SubregionCreateInput> = z.object({
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutSubregionsInputSchema),
  countries: z.lazy(() => CountryCreateNestedManyWithoutSubregionInputSchema).optional()
}).strict();

export const SubregionUncheckedCreateInputSchema: z.ZodType<Prisma.SubregionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutSubregionInputSchema).optional()
}).strict();

export const SubregionUpdateInputSchema: z.ZodType<Prisma.SubregionUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneRequiredWithoutSubregionsNestedInputSchema).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutSubregionNestedInputSchema).optional()
}).strict();

export const SubregionUncheckedUpdateInputSchema: z.ZodType<Prisma.SubregionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutSubregionNestedInputSchema).optional()
}).strict();

export const SubregionCreateManyInputSchema: z.ZodType<Prisma.SubregionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int()
}).strict();

export const SubregionUpdateManyMutationInputSchema: z.ZodType<Prisma.SubregionUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubregionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SubregionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CurrencyCreateInputSchema: z.ZodType<Prisma.CurrencyCreateInput> = z.object({
  code: z.string(),
  name: z.string().optional().nullable(),
  symbol: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutCurrencyInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutCurrencyInputSchema).optional()
}).strict();

export const CurrencyUncheckedCreateInputSchema: z.ZodType<Prisma.CurrencyUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  name: z.string().optional().nullable(),
  symbol: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutCurrencyInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutCurrencyInputSchema).optional()
}).strict();

export const CurrencyUpdateInputSchema: z.ZodType<Prisma.CurrencyUpdateInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutCurrencyNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutCurrencyNestedInputSchema).optional()
}).strict();

export const CurrencyUncheckedUpdateInputSchema: z.ZodType<Prisma.CurrencyUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutCurrencyNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutCurrencyNestedInputSchema).optional()
}).strict();

export const CurrencyCreateManyInputSchema: z.ZodType<Prisma.CurrencyCreateManyInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  name: z.string().optional().nullable(),
  symbol: z.string().optional().nullable()
}).strict();

export const CurrencyUpdateManyMutationInputSchema: z.ZodType<Prisma.CurrencyUpdateManyMutationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CurrencyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CurrencyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PhoneCodeCreateInputSchema: z.ZodType<Prisma.PhoneCodeCreateInput> = z.object({
  code: z.string(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutPhoneCodeInputSchema).optional()
}).strict();

export const PhoneCodeUncheckedCreateInputSchema: z.ZodType<Prisma.PhoneCodeUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutPhoneCodeInputSchema).optional()
}).strict();

export const PhoneCodeUpdateInputSchema: z.ZodType<Prisma.PhoneCodeUpdateInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countries: z.lazy(() => CountryUpdateManyWithoutPhoneCodeNestedInputSchema).optional()
}).strict();

export const PhoneCodeUncheckedUpdateInputSchema: z.ZodType<Prisma.PhoneCodeUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutPhoneCodeNestedInputSchema).optional()
}).strict();

export const PhoneCodeCreateManyInputSchema: z.ZodType<Prisma.PhoneCodeCreateManyInput> = z.object({
  id: z.number().int().optional(),
  code: z.string()
}).strict();

export const PhoneCodeUpdateManyMutationInputSchema: z.ZodType<Prisma.PhoneCodeUpdateManyMutationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PhoneCodeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PhoneCodeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeZoneCreateInputSchema: z.ZodType<Prisma.TimeZoneCreateInput> = z.object({
  name: z.string(),
  offset: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutTimeZoneInputSchema).optional(),
  Country: z.lazy(() => CountryCreateNestedManyWithoutTimezonesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutTimeZoneInputSchema).optional()
}).strict();

export const TimeZoneUncheckedCreateInputSchema: z.ZodType<Prisma.TimeZoneUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  offset: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutTimeZoneInputSchema).optional(),
  Country: z.lazy(() => CountryUncheckedCreateNestedManyWithoutTimezonesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutTimeZoneInputSchema).optional()
}).strict();

export const TimeZoneUpdateInputSchema: z.ZodType<Prisma.TimeZoneUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutTimeZoneNestedInputSchema).optional(),
  Country: z.lazy(() => CountryUpdateManyWithoutTimezonesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutTimeZoneNestedInputSchema).optional()
}).strict();

export const TimeZoneUncheckedUpdateInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutTimeZoneNestedInputSchema).optional(),
  Country: z.lazy(() => CountryUncheckedUpdateManyWithoutTimezonesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutTimeZoneNestedInputSchema).optional()
}).strict();

export const TimeZoneCreateManyInputSchema: z.ZodType<Prisma.TimeZoneCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  offset: z.string().optional().nullable()
}).strict();

export const TimeZoneUpdateManyMutationInputSchema: z.ZodType<Prisma.TimeZoneUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TimeZoneUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TranslationCreateInputSchema: z.ZodType<Prisma.TranslationCreateInput> = z.object({
  language: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  country: z.lazy(() => CountryCreateNestedOneWithoutTranslationsInputSchema).optional()
}).strict();

export const TranslationUncheckedCreateInputSchema: z.ZodType<Prisma.TranslationUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  language: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  countryId: z.number().int().optional().nullable()
}).strict();

export const TranslationUpdateInputSchema: z.ZodType<Prisma.TranslationUpdateInput> = z.object({
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  country: z.lazy(() => CountryUpdateOneWithoutTranslationsNestedInputSchema).optional()
}).strict();

export const TranslationUncheckedUpdateInputSchema: z.ZodType<Prisma.TranslationUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  countryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TranslationCreateManyInputSchema: z.ZodType<Prisma.TranslationCreateManyInput> = z.object({
  id: z.number().int().optional(),
  language: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  countryId: z.number().int().optional().nullable()
}).strict();

export const TranslationUpdateManyMutationInputSchema: z.ZodType<Prisma.TranslationUpdateManyMutationInput> = z.object({
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const TranslationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TranslationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  countryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryCreateInputSchema: z.ZodType<Prisma.CountryCreateInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateInputSchema: z.ZodType<Prisma.CountryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUpdateInputSchema: z.ZodType<Prisma.CountryUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryCreateManyInputSchema: z.ZodType<Prisma.CountryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable()
}).strict();

export const CountryUpdateManyMutationInputSchema: z.ZodType<Prisma.CountryUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StateCreateInputSchema: z.ZodType<Prisma.StateCreateInput> = z.object({
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  country: z.lazy(() => CountryCreateNestedOneWithoutStatesInputSchema),
  cities: z.lazy(() => CityCreateNestedManyWithoutStateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateUncheckedCreateInputSchema: z.ZodType<Prisma.StateUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  countryId: z.number().int(),
  cities: z.lazy(() => CityUncheckedCreateNestedManyWithoutStateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateUpdateInputSchema: z.ZodType<Prisma.StateUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutStatesNestedInputSchema).optional(),
  cities: z.lazy(() => CityUpdateManyWithoutStateNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const StateUncheckedUpdateInputSchema: z.ZodType<Prisma.StateUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cities: z.lazy(() => CityUncheckedUpdateManyWithoutStateNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const StateCreateManyInputSchema: z.ZodType<Prisma.StateCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  countryId: z.number().int()
}).strict();

export const StateUpdateManyMutationInputSchema: z.ZodType<Prisma.StateUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.StateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateInputSchema: z.ZodType<Prisma.CityCreateInput> = z.object({
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  state: z.lazy(() => StateCreateNestedOneWithoutCitiesInputSchema),
  country: z.lazy(() => CountryCreateNestedOneWithoutCityInputSchema)
}).strict();

export const CityUncheckedCreateInputSchema: z.ZodType<Prisma.CityUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  stateId: z.number().int(),
  countryId: z.number().int()
}).strict();

export const CityUpdateInputSchema: z.ZodType<Prisma.CityUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutCitiesNestedInputSchema).optional(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutCityNestedInputSchema).optional()
}).strict();

export const CityUncheckedUpdateInputSchema: z.ZodType<Prisma.CityUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateManyInputSchema: z.ZodType<Prisma.CityCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  stateId: z.number().int(),
  countryId: z.number().int()
}).strict();

export const CityUpdateManyMutationInputSchema: z.ZodType<Prisma.CityUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleCreateInputSchema: z.ZodType<Prisma.RoleCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRolesInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutOwnedRolesInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUncheckedCreateInputSchema: z.ZodType<Prisma.RoleUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdById: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUpdateInputSchema: z.ZodType<Prisma.RoleUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRolesNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedRolesNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleCreateManyInputSchema: z.ZodType<Prisma.RoleCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdById: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable()
}).strict();

export const RoleUpdateManyMutationInputSchema: z.ZodType<Prisma.RoleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RoleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRoleCreateInputSchema: z.ZodType<Prisma.UserRoleCreateInput> = z.object({
  id: z.string().uuid().optional(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserRolesInputSchema),
  role: z.lazy(() => RoleCreateNestedOneWithoutUserRolesInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUserRolesInputSchema)
}).strict();

export const UserRoleUncheckedCreateInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  roleId: z.string(),
  organizationId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleUpdateInputSchema: z.ZodType<Prisma.UserRoleUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleCreateManyInputSchema: z.ZodType<Prisma.UserRoleCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  roleId: z.string(),
  organizationId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleUpdateManyMutationInputSchema: z.ZodType<Prisma.UserRoleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ActionCreateInputSchema: z.ZodType<Prisma.ActionCreateInput> = z.object({
  name: z.lazy(() => ActionNameSchema),
  description: z.string().optional().nullable(),
  permissions: z.lazy(() => PermissionCreateNestedManyWithoutActionInputSchema).optional()
}).strict();

export const ActionUncheckedCreateInputSchema: z.ZodType<Prisma.ActionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ActionNameSchema),
  description: z.string().optional().nullable(),
  permissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutActionInputSchema).optional()
}).strict();

export const ActionUpdateInputSchema: z.ZodType<Prisma.ActionUpdateInput> = z.object({
  name: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => EnumActionNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions: z.lazy(() => PermissionUpdateManyWithoutActionNestedInputSchema).optional()
}).strict();

export const ActionUncheckedUpdateInputSchema: z.ZodType<Prisma.ActionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => EnumActionNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutActionNestedInputSchema).optional()
}).strict();

export const ActionCreateManyInputSchema: z.ZodType<Prisma.ActionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ActionNameSchema),
  description: z.string().optional().nullable()
}).strict();

export const ActionUpdateManyMutationInputSchema: z.ZodType<Prisma.ActionUpdateManyMutationInput> = z.object({
  name: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => EnumActionNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ActionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ActionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => EnumActionNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResourceCreateInputSchema: z.ZodType<Prisma.ResourceCreateInput> = z.object({
  name: z.lazy(() => ResourceNameSchema),
  description: z.string().optional().nullable(),
  permissions: z.lazy(() => PermissionCreateNestedManyWithoutResourceInputSchema).optional()
}).strict();

export const ResourceUncheckedCreateInputSchema: z.ZodType<Prisma.ResourceUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ResourceNameSchema),
  description: z.string().optional().nullable(),
  permissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutResourceInputSchema).optional()
}).strict();

export const ResourceUpdateInputSchema: z.ZodType<Prisma.ResourceUpdateInput> = z.object({
  name: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => EnumResourceNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions: z.lazy(() => PermissionUpdateManyWithoutResourceNestedInputSchema).optional()
}).strict();

export const ResourceUncheckedUpdateInputSchema: z.ZodType<Prisma.ResourceUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => EnumResourceNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutResourceNestedInputSchema).optional()
}).strict();

export const ResourceCreateManyInputSchema: z.ZodType<Prisma.ResourceCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ResourceNameSchema),
  description: z.string().optional().nullable()
}).strict();

export const ResourceUpdateManyMutationInputSchema: z.ZodType<Prisma.ResourceUpdateManyMutationInput> = z.object({
  name: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => EnumResourceNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResourceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ResourceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => EnumResourceNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PermissionCreateInputSchema: z.ZodType<Prisma.PermissionCreateInput> = z.object({
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional(),
  action: z.lazy(() => ActionCreateNestedOneWithoutPermissionsInputSchema),
  resource: z.lazy(() => ResourceCreateNestedOneWithoutPermissionsInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUncheckedCreateInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  actionId: z.number().int(),
  resourceId: z.number().int(),
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUpdateInputSchema: z.ZodType<Prisma.PermissionUpdateInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.lazy(() => ActionUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional(),
  resource: z.lazy(() => ResourceUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  actionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  resourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionCreateManyInputSchema: z.ZodType<Prisma.PermissionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  actionId: z.number().int(),
  resourceId: z.number().int(),
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional()
}).strict();

export const PermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.PermissionUpdateManyMutationInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  actionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  resourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomPermissionCreateInputSchema: z.ZodType<Prisma.CustomPermissionCreateInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.lazy(() => SystemCustomPermissionSchema),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  riskLevel: z.string().optional(),
  isActive: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionCreateNestedManyWithoutCustomPermissionInputSchema).optional()
}).strict();

export const CustomPermissionUncheckedCreateInputSchema: z.ZodType<Prisma.CustomPermissionUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.lazy(() => SystemCustomPermissionSchema),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  riskLevel: z.string().optional(),
  isActive: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedCreateNestedManyWithoutCustomPermissionInputSchema).optional()
}).strict();

export const CustomPermissionUpdateInputSchema: z.ZodType<Prisma.CustomPermissionUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => EnumSystemCustomPermissionFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  riskLevel: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  requiresApproval: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUpdateManyWithoutCustomPermissionNestedInputSchema).optional()
}).strict();

export const CustomPermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomPermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => EnumSystemCustomPermissionFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  riskLevel: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  requiresApproval: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutCustomPermissionNestedInputSchema).optional()
}).strict();

export const CustomPermissionCreateManyInputSchema: z.ZodType<Prisma.CustomPermissionCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.lazy(() => SystemCustomPermissionSchema),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  riskLevel: z.string().optional(),
  isActive: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomPermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomPermissionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => EnumSystemCustomPermissionFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  riskLevel: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  requiresApproval: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomPermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomPermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => EnumSystemCustomPermissionFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  riskLevel: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  requiresApproval: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateInputSchema: z.ZodType<Prisma.RolePermissionCreateInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  role: z.lazy(() => RoleCreateNestedOneWithoutRolePermissionsInputSchema),
  permission: z.lazy(() => PermissionCreateNestedOneWithoutRolePermissionsInputSchema)
}).strict();

export const RolePermissionUncheckedCreateInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  permissionId: z.number().int(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RolePermissionUpdateInputSchema: z.ZodType<Prisma.RolePermissionUpdateInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutRolePermissionsNestedInputSchema).optional(),
  permission: z.lazy(() => PermissionUpdateOneRequiredWithoutRolePermissionsNestedInputSchema).optional()
}).strict();

export const RolePermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateManyInputSchema: z.ZodType<Prisma.RolePermissionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  permissionId: z.number().int(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RolePermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyMutationInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleCustomPermissionCreateInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  role: z.lazy(() => RoleCreateNestedOneWithoutRoleCustomPermissionsInputSchema),
  customPermission: z.lazy(() => CustomPermissionCreateNestedOneWithoutRoleCustomPermissionsInputSchema),
  permissionApprovals: z.lazy(() => PermissionApprovalCreateNestedManyWithoutRoleCustomPermissionInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedCreateInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  customPermissionId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  permissionApprovals: z.lazy(() => PermissionApprovalUncheckedCreateNestedManyWithoutRoleCustomPermissionInputSchema).optional()
}).strict();

export const RoleCustomPermissionUpdateInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema).optional(),
  customPermission: z.lazy(() => CustomPermissionUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalUpdateManyWithoutRoleCustomPermissionNestedInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customPermissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionNestedInputSchema).optional()
}).strict();

export const RoleCustomPermissionCreateManyInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  customPermissionId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RoleCustomPermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateManyMutationInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleCustomPermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customPermissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalCreateInputSchema: z.ZodType<Prisma.PermissionApprovalCreateInput> = z.object({
  id: z.string().uuid().optional(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedBy: z.string().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  reason: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  status: z.string().optional(),
  roleCustomPermission: z.lazy(() => RoleCustomPermissionCreateNestedOneWithoutPermissionApprovalsInputSchema)
}).strict();

export const PermissionApprovalUncheckedCreateInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  roleCustomPermissionId: z.number().int(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedBy: z.string().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  reason: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  status: z.string().optional()
}).strict();

export const PermissionApprovalUpdateInputSchema: z.ZodType<Prisma.PermissionApprovalUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleCustomPermission: z.lazy(() => RoleCustomPermissionUpdateOneRequiredWithoutPermissionApprovalsNestedInputSchema).optional()
}).strict();

export const PermissionApprovalUncheckedUpdateInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleCustomPermissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalCreateManyInputSchema: z.ZodType<Prisma.PermissionApprovalCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  roleCustomPermissionId: z.number().int(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedBy: z.string().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  reason: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  status: z.string().optional()
}).strict();

export const PermissionApprovalUpdateManyMutationInputSchema: z.ZodType<Prisma.PermissionApprovalUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleCustomPermissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const EnumOtpTypeFilterSchema: z.ZodType<Prisma.EnumOtpTypeFilter> = z.object({
  equals: z.lazy(() => OtpTypeSchema).optional(),
  in: z.lazy(() => OtpTypeSchema).array().optional(),
  notIn: z.lazy(() => OtpTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => NestedEnumOtpTypeFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const OtpCountOrderByAggregateInputSchema: z.ZodType<Prisma.OtpCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hashedOtp: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OtpMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OtpMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hashedOtp: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OtpMinOrderByAggregateInputSchema: z.ZodType<Prisma.OtpMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hashedOtp: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const EnumOtpTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumOtpTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OtpTypeSchema).optional(),
  in: z.lazy(() => OtpTypeSchema).array().optional(),
  notIn: z.lazy(() => OtpTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => NestedEnumOtpTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOtpTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOtpTypeFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UserIdentifierListRelationFilterSchema: z.ZodType<Prisma.UserIdentifierListRelationFilter> = z.object({
  every: z.lazy(() => UserIdentifierWhereInputSchema).optional(),
  some: z.lazy(() => UserIdentifierWhereInputSchema).optional(),
  none: z.lazy(() => UserIdentifierWhereInputSchema).optional()
}).strict();

export const UserProfileNullableScalarRelationFilterSchema: z.ZodType<Prisma.UserProfileNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserProfileWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserProfileWhereInputSchema).optional().nullable()
}).strict();

export const RefreshTokenListRelationFilterSchema: z.ZodType<Prisma.RefreshTokenListRelationFilter> = z.object({
  every: z.lazy(() => RefreshTokenWhereInputSchema).optional(),
  some: z.lazy(() => RefreshTokenWhereInputSchema).optional(),
  none: z.lazy(() => RefreshTokenWhereInputSchema).optional()
}).strict();

export const UserRoleListRelationFilterSchema: z.ZodType<Prisma.UserRoleListRelationFilter> = z.object({
  every: z.lazy(() => UserRoleWhereInputSchema).optional(),
  some: z.lazy(() => UserRoleWhereInputSchema).optional(),
  none: z.lazy(() => UserRoleWhereInputSchema).optional()
}).strict();

export const RoleListRelationFilterSchema: z.ZodType<Prisma.RoleListRelationFilter> = z.object({
  every: z.lazy(() => RoleWhereInputSchema).optional(),
  some: z.lazy(() => RoleWhereInputSchema).optional(),
  none: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const OrganizationListRelationFilterSchema: z.ZodType<Prisma.OrganizationListRelationFilter> = z.object({
  every: z.lazy(() => OrganizationWhereInputSchema).optional(),
  some: z.lazy(() => OrganizationWhereInputSchema).optional(),
  none: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const UserIdentifierOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserIdentifierOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RefreshTokenOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RefreshTokenOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserRoleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RoleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  lastLoginAt: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const EnumIdentifierTypeFilterSchema: z.ZodType<Prisma.EnumIdentifierTypeFilter> = z.object({
  equals: z.lazy(() => IdentifierTypeSchema).optional(),
  in: z.lazy(() => IdentifierTypeSchema).array().optional(),
  notIn: z.lazy(() => IdentifierTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => NestedEnumIdentifierTypeFilterSchema) ]).optional(),
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserIdentifierTypeValueCompoundUniqueInputSchema: z.ZodType<Prisma.UserIdentifierTypeValueCompoundUniqueInput> = z.object({
  type: z.lazy(() => IdentifierTypeSchema),
  value: z.string()
}).strict();

export const UserIdentifierCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserIdentifierCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  isVerified: z.lazy(() => SortOrderSchema).optional(),
  isPrimary: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserIdentifierMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserIdentifierMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  isVerified: z.lazy(() => SortOrderSchema).optional(),
  isPrimary: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserIdentifierMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserIdentifierMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  isVerified: z.lazy(() => SortOrderSchema).optional(),
  isPrimary: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumIdentifierTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumIdentifierTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => IdentifierTypeSchema).optional(),
  in: z.lazy(() => IdentifierTypeSchema).array().optional(),
  notIn: z.lazy(() => IdentifierTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => NestedEnumIdentifierTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumIdentifierTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumIdentifierTypeFilterSchema).optional()
}).strict();

export const UserProfileCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  contactEmail: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  contactEmail: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserProfileMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserProfileMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  avatarUrl: z.lazy(() => SortOrderSchema).optional(),
  contactEmail: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RefreshTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.RefreshTokenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  revokedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RefreshTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RefreshTokenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  revokedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RefreshTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.RefreshTokenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  revokedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const LanguageCountOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  nativeName: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  nativeName: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageMinOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  nativeName: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LanguageSumOrderByAggregateInputSchema: z.ZodType<Prisma.LanguageSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const IndustryCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.IndustryCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndustryCategoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.IndustryCategoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndustryCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.IndustryCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndustryCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.IndustryCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndustryCategorySumOrderByAggregateInputSchema: z.ZodType<Prisma.IndustryCategorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FiscalYearPatternCountOrderByAggregateInputSchema: z.ZodType<Prisma.FiscalYearPatternCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  startMonth: z.lazy(() => SortOrderSchema).optional(),
  endMonth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FiscalYearPatternAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FiscalYearPatternAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  startMonth: z.lazy(() => SortOrderSchema).optional(),
  endMonth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FiscalYearPatternMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FiscalYearPatternMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  startMonth: z.lazy(() => SortOrderSchema).optional(),
  endMonth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FiscalYearPatternMinOrderByAggregateInputSchema: z.ZodType<Prisma.FiscalYearPatternMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  startMonth: z.lazy(() => SortOrderSchema).optional(),
  endMonth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FiscalYearPatternSumOrderByAggregateInputSchema: z.ZodType<Prisma.FiscalYearPatternSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  startMonth: z.lazy(() => SortOrderSchema).optional(),
  endMonth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StateScalarRelationFilterSchema: z.ZodType<Prisma.StateScalarRelationFilter> = z.object({
  is: z.lazy(() => StateWhereInputSchema).optional(),
  isNot: z.lazy(() => StateWhereInputSchema).optional()
}).strict();

export const CurrencyScalarRelationFilterSchema: z.ZodType<Prisma.CurrencyScalarRelationFilter> = z.object({
  is: z.lazy(() => CurrencyWhereInputSchema).optional(),
  isNot: z.lazy(() => CurrencyWhereInputSchema).optional()
}).strict();

export const TimeZoneScalarRelationFilterSchema: z.ZodType<Prisma.TimeZoneScalarRelationFilter> = z.object({
  is: z.lazy(() => TimeZoneWhereInputSchema).optional(),
  isNot: z.lazy(() => TimeZoneWhereInputSchema).optional()
}).strict();

export const LanguageNullableScalarRelationFilterSchema: z.ZodType<Prisma.LanguageNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => LanguageWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => LanguageWhereInputSchema).optional().nullable()
}).strict();

export const IndustryCategoryNullableScalarRelationFilterSchema: z.ZodType<Prisma.IndustryCategoryNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => IndustryCategoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => IndustryCategoryWhereInputSchema).optional().nullable()
}).strict();

export const FiscalYearPatternNullableScalarRelationFilterSchema: z.ZodType<Prisma.FiscalYearPatternNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => FiscalYearPatternWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => FiscalYearPatternWhereInputSchema).optional().nullable()
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationNameOwnedByIdCompoundUniqueInputSchema: z.ZodType<Prisma.OrganizationNameOwnedByIdCompoundUniqueInput> = z.object({
  name: z.string(),
  ownedById: z.string()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  timeZoneId: z.lazy(() => SortOrderSchema).optional(),
  inventoryStartDate: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional(),
  industryCategoryId: z.lazy(() => SortOrderSchema).optional(),
  fiscalYearPatternId: z.lazy(() => SortOrderSchema).optional(),
  ownedById: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationAvgOrderByAggregateInput> = z.object({
  stateId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  timeZoneId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional(),
  industryCategoryId: z.lazy(() => SortOrderSchema).optional(),
  fiscalYearPatternId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  timeZoneId: z.lazy(() => SortOrderSchema).optional(),
  inventoryStartDate: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional(),
  industryCategoryId: z.lazy(() => SortOrderSchema).optional(),
  fiscalYearPatternId: z.lazy(() => SortOrderSchema).optional(),
  ownedById: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  timeZoneId: z.lazy(() => SortOrderSchema).optional(),
  inventoryStartDate: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional(),
  industryCategoryId: z.lazy(() => SortOrderSchema).optional(),
  fiscalYearPatternId: z.lazy(() => SortOrderSchema).optional(),
  ownedById: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationSumOrderByAggregateInput> = z.object({
  stateId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  timeZoneId: z.lazy(() => SortOrderSchema).optional(),
  languageId: z.lazy(() => SortOrderSchema).optional(),
  industryCategoryId: z.lazy(() => SortOrderSchema).optional(),
  fiscalYearPatternId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const SubregionListRelationFilterSchema: z.ZodType<Prisma.SubregionListRelationFilter> = z.object({
  every: z.lazy(() => SubregionWhereInputSchema).optional(),
  some: z.lazy(() => SubregionWhereInputSchema).optional(),
  none: z.lazy(() => SubregionWhereInputSchema).optional()
}).strict();

export const CountryListRelationFilterSchema: z.ZodType<Prisma.CountryListRelationFilter> = z.object({
  every: z.lazy(() => CountryWhereInputSchema).optional(),
  some: z.lazy(() => CountryWhereInputSchema).optional(),
  none: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const SubregionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SubregionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CountryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RegionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RegionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RegionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RegionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RegionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RegionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const RegionScalarRelationFilterSchema: z.ZodType<Prisma.RegionScalarRelationFilter> = z.object({
  is: z.lazy(() => RegionWhereInputSchema).optional(),
  isNot: z.lazy(() => RegionWhereInputSchema).optional()
}).strict();

export const SubregionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SubregionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  translations: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubregionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SubregionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubregionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SubregionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubregionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SubregionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubregionSumOrderByAggregateInputSchema: z.ZodType<Prisma.SubregionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CurrencyCountOrderByAggregateInputSchema: z.ZodType<Prisma.CurrencyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CurrencyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CurrencyAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CurrencyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CurrencyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CurrencyMinOrderByAggregateInputSchema: z.ZodType<Prisma.CurrencyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  symbol: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CurrencySumOrderByAggregateInputSchema: z.ZodType<Prisma.CurrencySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PhoneCodeCountOrderByAggregateInputSchema: z.ZodType<Prisma.PhoneCodeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PhoneCodeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PhoneCodeAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PhoneCodeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PhoneCodeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PhoneCodeMinOrderByAggregateInputSchema: z.ZodType<Prisma.PhoneCodeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PhoneCodeSumOrderByAggregateInputSchema: z.ZodType<Prisma.PhoneCodeSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeZoneCountOrderByAggregateInputSchema: z.ZodType<Prisma.TimeZoneCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  offset: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeZoneAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TimeZoneAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeZoneMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TimeZoneMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  offset: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeZoneMinOrderByAggregateInputSchema: z.ZodType<Prisma.TimeZoneMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  offset: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeZoneSumOrderByAggregateInputSchema: z.ZodType<Prisma.TimeZoneSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const CountryNullableScalarRelationFilterSchema: z.ZodType<Prisma.CountryNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CountryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CountryWhereInputSchema).optional().nullable()
}).strict();

export const TranslationCountOrderByAggregateInputSchema: z.ZodType<Prisma.TranslationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TranslationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TranslationAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TranslationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TranslationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TranslationMinOrderByAggregateInputSchema: z.ZodType<Prisma.TranslationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TranslationSumOrderByAggregateInputSchema: z.ZodType<Prisma.TranslationSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const RegionNullableScalarRelationFilterSchema: z.ZodType<Prisma.RegionNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RegionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RegionWhereInputSchema).optional().nullable()
}).strict();

export const SubregionNullableScalarRelationFilterSchema: z.ZodType<Prisma.SubregionNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => SubregionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SubregionWhereInputSchema).optional().nullable()
}).strict();

export const CurrencyNullableScalarRelationFilterSchema: z.ZodType<Prisma.CurrencyNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CurrencyWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CurrencyWhereInputSchema).optional().nullable()
}).strict();

export const PhoneCodeNullableScalarRelationFilterSchema: z.ZodType<Prisma.PhoneCodeNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => PhoneCodeWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PhoneCodeWhereInputSchema).optional().nullable()
}).strict();

export const TimeZoneListRelationFilterSchema: z.ZodType<Prisma.TimeZoneListRelationFilter> = z.object({
  every: z.lazy(() => TimeZoneWhereInputSchema).optional(),
  some: z.lazy(() => TimeZoneWhereInputSchema).optional(),
  none: z.lazy(() => TimeZoneWhereInputSchema).optional()
}).strict();

export const TranslationListRelationFilterSchema: z.ZodType<Prisma.TranslationListRelationFilter> = z.object({
  every: z.lazy(() => TranslationWhereInputSchema).optional(),
  some: z.lazy(() => TranslationWhereInputSchema).optional(),
  none: z.lazy(() => TranslationWhereInputSchema).optional()
}).strict();

export const StateListRelationFilterSchema: z.ZodType<Prisma.StateListRelationFilter> = z.object({
  every: z.lazy(() => StateWhereInputSchema).optional(),
  some: z.lazy(() => StateWhereInputSchema).optional(),
  none: z.lazy(() => StateWhereInputSchema).optional()
}).strict();

export const CityListRelationFilterSchema: z.ZodType<Prisma.CityListRelationFilter> = z.object({
  every: z.lazy(() => CityWhereInputSchema).optional(),
  some: z.lazy(() => CityWhereInputSchema).optional(),
  none: z.lazy(() => CityWhereInputSchema).optional()
}).strict();

export const TimeZoneOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TimeZoneOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TranslationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TranslationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.StateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryCountOrderByAggregateInputSchema: z.ZodType<Prisma.CountryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso3: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.lazy(() => SortOrderSchema).optional(),
  numericCode: z.lazy(() => SortOrderSchema).optional(),
  capital: z.lazy(() => SortOrderSchema).optional(),
  tld: z.lazy(() => SortOrderSchema).optional(),
  native: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  emojiU: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  subregionId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  phoneCodeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CountryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  subregionId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  phoneCodeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CountryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso3: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.lazy(() => SortOrderSchema).optional(),
  numericCode: z.lazy(() => SortOrderSchema).optional(),
  capital: z.lazy(() => SortOrderSchema).optional(),
  tld: z.lazy(() => SortOrderSchema).optional(),
  native: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  emojiU: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  subregionId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  phoneCodeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryMinOrderByAggregateInputSchema: z.ZodType<Prisma.CountryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso3: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.lazy(() => SortOrderSchema).optional(),
  numericCode: z.lazy(() => SortOrderSchema).optional(),
  capital: z.lazy(() => SortOrderSchema).optional(),
  tld: z.lazy(() => SortOrderSchema).optional(),
  native: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  emoji: z.lazy(() => SortOrderSchema).optional(),
  emojiU: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  subregionId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  phoneCodeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountrySumOrderByAggregateInputSchema: z.ZodType<Prisma.CountrySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  regionId: z.lazy(() => SortOrderSchema).optional(),
  subregionId: z.lazy(() => SortOrderSchema).optional(),
  currencyId: z.lazy(() => SortOrderSchema).optional(),
  phoneCodeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CountryScalarRelationFilterSchema: z.ZodType<Prisma.CountryScalarRelationFilter> = z.object({
  is: z.lazy(() => CountryWhereInputSchema).optional(),
  isNot: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const StateCountOrderByAggregateInputSchema: z.ZodType<Prisma.StateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.lazy(() => SortOrderSchema).optional(),
  fipsCode: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.StateAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.StateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.lazy(() => SortOrderSchema).optional(),
  fipsCode: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StateMinOrderByAggregateInputSchema: z.ZodType<Prisma.StateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  iso2: z.lazy(() => SortOrderSchema).optional(),
  fipsCode: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StateSumOrderByAggregateInputSchema: z.ZodType<Prisma.StateSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityCountOrderByAggregateInputSchema: z.ZodType<Prisma.CityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateCode: z.lazy(() => SortOrderSchema).optional(),
  countryCode: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CityAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateCode: z.lazy(() => SortOrderSchema).optional(),
  countryCode: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CityMinOrderByAggregateInputSchema: z.ZodType<Prisma.CityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  stateCode: z.lazy(() => SortOrderSchema).optional(),
  countryCode: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wikiDataId: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CitySumOrderByAggregateInputSchema: z.ZodType<Prisma.CitySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stateId: z.lazy(() => SortOrderSchema).optional(),
  countryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRoleStatusFilterSchema: z.ZodType<Prisma.EnumUserRoleStatusFilter> = z.object({
  equals: z.lazy(() => UserRoleStatusSchema).optional(),
  in: z.lazy(() => UserRoleStatusSchema).array().optional(),
  notIn: z.lazy(() => UserRoleStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => NestedEnumUserRoleStatusFilterSchema) ]).optional(),
}).strict();

export const OrganizationScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const RolePermissionListRelationFilterSchema: z.ZodType<Prisma.RolePermissionListRelationFilter> = z.object({
  every: z.lazy(() => RolePermissionWhereInputSchema).optional(),
  some: z.lazy(() => RolePermissionWhereInputSchema).optional(),
  none: z.lazy(() => RolePermissionWhereInputSchema).optional()
}).strict();

export const RoleCustomPermissionListRelationFilterSchema: z.ZodType<Prisma.RoleCustomPermissionListRelationFilter> = z.object({
  every: z.lazy(() => RoleCustomPermissionWhereInputSchema).optional(),
  some: z.lazy(() => RoleCustomPermissionWhereInputSchema).optional(),
  none: z.lazy(() => RoleCustomPermissionWhereInputSchema).optional()
}).strict();

export const RolePermissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RolePermissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCustomPermissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RoleCustomPermissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleOrganizationIdNameCompoundUniqueInputSchema: z.ZodType<Prisma.RoleOrganizationIdNameCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  name: z.string()
}).strict();

export const RoleCountOrderByAggregateInputSchema: z.ZodType<Prisma.RoleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  isSystem: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RoleAvgOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RoleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  isSystem: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleMinOrderByAggregateInputSchema: z.ZodType<Prisma.RoleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  isSystem: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleSumOrderByAggregateInputSchema: z.ZodType<Prisma.RoleSumOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRoleStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRoleStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleStatusSchema).optional(),
  in: z.lazy(() => UserRoleStatusSchema).array().optional(),
  notIn: z.lazy(() => UserRoleStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => NestedEnumUserRoleStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleStatusFilterSchema).optional()
}).strict();

export const RoleScalarRelationFilterSchema: z.ZodType<Prisma.RoleScalarRelationFilter> = z.object({
  is: z.lazy(() => RoleWhereInputSchema).optional(),
  isNot: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const UserRoleUserIdRoleIdOrganizationIdCompoundUniqueInputSchema: z.ZodType<Prisma.UserRoleUserIdRoleIdOrganizationIdCompoundUniqueInput> = z.object({
  userId: z.string(),
  roleId: z.string(),
  organizationId: z.string()
}).strict();

export const UserRoleCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  assignedBy: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  assignedBy: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  assignedBy: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumActionNameFilterSchema: z.ZodType<Prisma.EnumActionNameFilter> = z.object({
  equals: z.lazy(() => ActionNameSchema).optional(),
  in: z.lazy(() => ActionNameSchema).array().optional(),
  notIn: z.lazy(() => ActionNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => NestedEnumActionNameFilterSchema) ]).optional(),
}).strict();

export const PermissionListRelationFilterSchema: z.ZodType<Prisma.PermissionListRelationFilter> = z.object({
  every: z.lazy(() => PermissionWhereInputSchema).optional(),
  some: z.lazy(() => PermissionWhereInputSchema).optional(),
  none: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const PermissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PermissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActionCountOrderByAggregateInputSchema: z.ZodType<Prisma.ActionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ActionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ActionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActionMinOrderByAggregateInputSchema: z.ZodType<Prisma.ActionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ActionSumOrderByAggregateInputSchema: z.ZodType<Prisma.ActionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumActionNameWithAggregatesFilterSchema: z.ZodType<Prisma.EnumActionNameWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ActionNameSchema).optional(),
  in: z.lazy(() => ActionNameSchema).array().optional(),
  notIn: z.lazy(() => ActionNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => NestedEnumActionNameWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumActionNameFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumActionNameFilterSchema).optional()
}).strict();

export const EnumResourceNameFilterSchema: z.ZodType<Prisma.EnumResourceNameFilter> = z.object({
  equals: z.lazy(() => ResourceNameSchema).optional(),
  in: z.lazy(() => ResourceNameSchema).array().optional(),
  notIn: z.lazy(() => ResourceNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => NestedEnumResourceNameFilterSchema) ]).optional(),
}).strict();

export const ResourceCountOrderByAggregateInputSchema: z.ZodType<Prisma.ResourceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResourceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ResourceAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResourceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ResourceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResourceMinOrderByAggregateInputSchema: z.ZodType<Prisma.ResourceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ResourceSumOrderByAggregateInputSchema: z.ZodType<Prisma.ResourceSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumResourceNameWithAggregatesFilterSchema: z.ZodType<Prisma.EnumResourceNameWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ResourceNameSchema).optional(),
  in: z.lazy(() => ResourceNameSchema).array().optional(),
  notIn: z.lazy(() => ResourceNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => NestedEnumResourceNameWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumResourceNameFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumResourceNameFilterSchema).optional()
}).strict();

export const ActionScalarRelationFilterSchema: z.ZodType<Prisma.ActionScalarRelationFilter> = z.object({
  is: z.lazy(() => ActionWhereInputSchema).optional(),
  isNot: z.lazy(() => ActionWhereInputSchema).optional()
}).strict();

export const ResourceScalarRelationFilterSchema: z.ZodType<Prisma.ResourceScalarRelationFilter> = z.object({
  is: z.lazy(() => ResourceWhereInputSchema).optional(),
  isNot: z.lazy(() => ResourceWhereInputSchema).optional()
}).strict();

export const PermissionActionIdResourceIdCompoundUniqueInputSchema: z.ZodType<Prisma.PermissionActionIdResourceIdCompoundUniqueInput> = z.object({
  actionId: z.number(),
  resourceId: z.number()
}).strict();

export const PermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  actionId: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  isDangerous: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  actionId: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  actionId: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  isDangerous: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  actionId: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  isDangerous: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionSumOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  actionId: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSystemCustomPermissionFilterSchema: z.ZodType<Prisma.EnumSystemCustomPermissionFilter> = z.object({
  equals: z.lazy(() => SystemCustomPermissionSchema).optional(),
  in: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  notIn: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  not: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => NestedEnumSystemCustomPermissionFilterSchema) ]).optional(),
}).strict();

export const CustomPermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomPermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  riskLevel: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  requiresApproval: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomPermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomPermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  riskLevel: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  requiresApproval: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomPermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomPermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  riskLevel: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  requiresApproval: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSystemCustomPermissionWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSystemCustomPermissionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SystemCustomPermissionSchema).optional(),
  in: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  notIn: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  not: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => NestedEnumSystemCustomPermissionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSystemCustomPermissionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSystemCustomPermissionFilterSchema).optional()
}).strict();

export const PermissionScalarRelationFilterSchema: z.ZodType<Prisma.PermissionScalarRelationFilter> = z.object({
  is: z.lazy(() => PermissionWhereInputSchema).optional(),
  isNot: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema: z.ZodType<Prisma.RolePermissionRoleIdPermissionIdCompoundUniqueInput> = z.object({
  roleId: z.string(),
  permissionId: z.number()
}).strict();

export const RolePermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomPermissionScalarRelationFilterSchema: z.ZodType<Prisma.CustomPermissionScalarRelationFilter> = z.object({
  is: z.lazy(() => CustomPermissionWhereInputSchema).optional(),
  isNot: z.lazy(() => CustomPermissionWhereInputSchema).optional()
}).strict();

export const PermissionApprovalListRelationFilterSchema: z.ZodType<Prisma.PermissionApprovalListRelationFilter> = z.object({
  every: z.lazy(() => PermissionApprovalWhereInputSchema).optional(),
  some: z.lazy(() => PermissionApprovalWhereInputSchema).optional(),
  none: z.lazy(() => PermissionApprovalWhereInputSchema).optional()
}).strict();

export const PermissionApprovalOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PermissionApprovalOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCustomPermissionRoleIdCustomPermissionIdCompoundUniqueInputSchema: z.ZodType<Prisma.RoleCustomPermissionRoleIdCustomPermissionIdCompoundUniqueInput> = z.object({
  roleId: z.string(),
  customPermissionId: z.string()
}).strict();

export const RoleCustomPermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RoleCustomPermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  customPermissionId: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  approvalRequired: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCustomPermissionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RoleCustomPermissionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCustomPermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RoleCustomPermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  customPermissionId: z.lazy(() => SortOrderSchema).optional(),
  approvalRequired: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCustomPermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RoleCustomPermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  customPermissionId: z.lazy(() => SortOrderSchema).optional(),
  approvalRequired: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedAt: z.lazy(() => SortOrderSchema).optional(),
  grantedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCustomPermissionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RoleCustomPermissionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCustomPermissionScalarRelationFilterSchema: z.ZodType<Prisma.RoleCustomPermissionScalarRelationFilter> = z.object({
  is: z.lazy(() => RoleCustomPermissionWhereInputSchema).optional(),
  isNot: z.lazy(() => RoleCustomPermissionWhereInputSchema).optional()
}).strict();

export const PermissionApprovalCountOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionApprovalCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleCustomPermissionId: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectedBy: z.lazy(() => SortOrderSchema).optional(),
  rejectedAt: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionApprovalAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionApprovalAvgOrderByAggregateInput> = z.object({
  roleCustomPermissionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionApprovalMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionApprovalMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleCustomPermissionId: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectedBy: z.lazy(() => SortOrderSchema).optional(),
  rejectedAt: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionApprovalMinOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionApprovalMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleCustomPermissionId: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  approvedBy: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectedBy: z.lazy(() => SortOrderSchema).optional(),
  rejectedAt: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionApprovalSumOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionApprovalSumOrderByAggregateInput> = z.object({
  roleCustomPermissionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const EnumOtpTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumOtpTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => OtpTypeSchema).optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const UserIdentifierCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserIdentifierCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateWithoutUserInputSchema).array(),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserIdentifierCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserProfileCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserProfileCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserProfileWhereUniqueInputSchema).optional()
}).strict();

export const RefreshTokenCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => RefreshTokenCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateWithoutUserInputSchema).array(),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RefreshTokenCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserRoleCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationCreateWithoutUsersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutOwnedByInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserIdentifierCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateWithoutUserInputSchema).array(),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserIdentifierCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserProfileCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => UserProfileWhereUniqueInputSchema).optional()
}).strict();

export const RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => RefreshTokenCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateWithoutUserInputSchema).array(),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RefreshTokenCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationCreateWithoutUsersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutOwnedByInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const UserIdentifierUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserIdentifierUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserIdentifierCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateWithoutUserInputSchema).array(),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserIdentifierUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserIdentifierUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserIdentifierCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserIdentifierUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserIdentifierUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserIdentifierUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserIdentifierUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserIdentifierScalarWhereInputSchema),z.lazy(() => UserIdentifierScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserProfileUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserProfileCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserProfileUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserProfileWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserProfileWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserProfileUpdateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const RefreshTokenUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.RefreshTokenUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => RefreshTokenCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateWithoutUserInputSchema).array(),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RefreshTokenUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => RefreshTokenUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RefreshTokenCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RefreshTokenUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => RefreshTokenUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RefreshTokenUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => RefreshTokenUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RefreshTokenScalarWhereInputSchema),z.lazy(() => RefreshTokenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RoleUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationCreateWithoutUsersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutOwnedByNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutOwnedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnedByInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnedByInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnedByInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserIdentifierCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateWithoutUserInputSchema).array(),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserIdentifierCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserIdentifierUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserIdentifierUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserIdentifierCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserIdentifierWhereUniqueInputSchema),z.lazy(() => UserIdentifierWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserIdentifierUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserIdentifierUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserIdentifierUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserIdentifierUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserIdentifierScalarWhereInputSchema),z.lazy(() => UserIdentifierScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserProfileCreateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserProfileCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => UserProfileUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserProfileWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserProfileWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserProfileWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserProfileUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => UserProfileUpdateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => RefreshTokenCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateWithoutUserInputSchema).array(),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema),z.lazy(() => RefreshTokenCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RefreshTokenUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => RefreshTokenUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RefreshTokenCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RefreshTokenWhereUniqueInputSchema),z.lazy(() => RefreshTokenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RefreshTokenUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => RefreshTokenUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RefreshTokenUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => RefreshTokenUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RefreshTokenScalarWhereInputSchema),z.lazy(() => RefreshTokenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationCreateWithoutUsersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOwnedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOwnedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnedByInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOwnedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOwnedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnedByInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOwnedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnedByInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOwnedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutIdentifiersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutIdentifiersInputSchema),z.lazy(() => UserUncheckedCreateWithoutIdentifiersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutIdentifiersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumIdentifierTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumIdentifierTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => IdentifierTypeSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutIdentifiersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutIdentifiersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutIdentifiersInputSchema),z.lazy(() => UserUncheckedCreateWithoutIdentifiersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutIdentifiersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutIdentifiersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutIdentifiersInputSchema),z.lazy(() => UserUpdateWithoutIdentifiersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutIdentifiersInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutProfileInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutProfileNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutProfileNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProfileInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutProfileInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutProfileInputSchema),z.lazy(() => UserUpdateWithoutProfileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRefreshTokensInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRefreshTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutRefreshTokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRefreshTokensInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutRefreshTokensNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutRefreshTokensNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRefreshTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutRefreshTokensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRefreshTokensInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRefreshTokensInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRefreshTokensInputSchema),z.lazy(() => UserUpdateWithoutRefreshTokensInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRefreshTokensInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutLanguageInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateWithoutLanguageInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyLanguageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutLanguageInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateWithoutLanguageInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyLanguageInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutLanguageNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutLanguageNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateWithoutLanguageInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyLanguageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutLanguageInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutLanguageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutLanguageNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutLanguageNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateWithoutLanguageInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutLanguageInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyLanguageInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutLanguageInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutLanguageInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutLanguageInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutLanguageInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutIndustryCategoryInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyIndustryCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutIndustryCategoryInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyIndustryCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutIndustryCategoryNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutIndustryCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutIndustryCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyIndustryCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutIndustryCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutIndustryCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutIndustryCategoryNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutIndustryCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutIndustryCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyIndustryCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutIndustryCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutIndustryCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutFiscalYearPatternInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyFiscalYearPatternInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutFiscalYearPatternInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyFiscalYearPatternInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutFiscalYearPatternNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutFiscalYearPatternNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyFiscalYearPatternInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutFiscalYearPatternNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutFiscalYearPatternNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyFiscalYearPatternInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutFiscalYearPatternInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StateCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.StateCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutOrganizationInputSchema),z.lazy(() => StateUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StateCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => StateWhereUniqueInputSchema).optional()
}).strict();

export const CurrencyCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CurrencyCreateWithoutOrganizationInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CurrencyCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => CurrencyWhereUniqueInputSchema).optional()
}).strict();

export const TimeZoneCreateNestedOneWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneCreateNestedOneWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TimeZoneCreateOrConnectWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => TimeZoneWhereUniqueInputSchema).optional()
}).strict();

export const LanguageCreateNestedOneWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageCreateNestedOneWithoutOrganizationsInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutOrganizationsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LanguageCreateOrConnectWithoutOrganizationsInputSchema).optional(),
  connect: z.lazy(() => LanguageWhereUniqueInputSchema).optional()
}).strict();

export const IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryCreateNestedOneWithoutOrganizationsInput> = z.object({
  create: z.union([ z.lazy(() => IndustryCategoryCreateWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUncheckedCreateWithoutOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IndustryCategoryCreateOrConnectWithoutOrganizationsInputSchema).optional(),
  connect: z.lazy(() => IndustryCategoryWhereUniqueInputSchema).optional()
}).strict();

export const FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternCreateNestedOneWithoutOrganizationsInput> = z.object({
  create: z.union([ z.lazy(() => FiscalYearPatternCreateWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUncheckedCreateWithoutOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FiscalYearPatternCreateOrConnectWithoutOrganizationsInputSchema).optional(),
  connect: z.lazy(() => FiscalYearPatternWhereUniqueInputSchema).optional()
}).strict();

export const UserRoleCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutOrganizationInputSchema),z.lazy(() => RoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutOwnedOrganizationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwnedOrganizationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutOrganizationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationsInputSchema),z.lazy(() => UserCreateWithoutOrganizationsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutOrganizationInputSchema),z.lazy(() => RoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutOrganizationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationsInputSchema),z.lazy(() => UserCreateWithoutOrganizationsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StateUpdateOneRequiredWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.StateUpdateOneRequiredWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutOrganizationInputSchema),z.lazy(() => StateUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StateCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => StateUpsertWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => StateWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StateUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => StateUpdateWithoutOrganizationInputSchema),z.lazy(() => StateUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CurrencyUpdateOneRequiredWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CurrencyCreateWithoutOrganizationInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CurrencyCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => CurrencyUpsertWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => CurrencyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CurrencyUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => CurrencyUpdateWithoutOrganizationInputSchema),z.lazy(() => CurrencyUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.TimeZoneUpdateOneRequiredWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutOrganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TimeZoneCreateOrConnectWithoutOrganizationInputSchema).optional(),
  upsert: z.lazy(() => TimeZoneUpsertWithoutOrganizationInputSchema).optional(),
  connect: z.lazy(() => TimeZoneWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TimeZoneUpdateToOneWithWhereWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUpdateWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUncheckedUpdateWithoutOrganizationInputSchema) ]).optional(),
}).strict();

export const LanguageUpdateOneWithoutOrganizationsNestedInputSchema: z.ZodType<Prisma.LanguageUpdateOneWithoutOrganizationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => LanguageCreateWithoutOrganizationsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LanguageCreateOrConnectWithoutOrganizationsInputSchema).optional(),
  upsert: z.lazy(() => LanguageUpsertWithoutOrganizationsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => LanguageWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => LanguageWhereInputSchema) ]).optional(),
  connect: z.lazy(() => LanguageWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LanguageUpdateToOneWithWhereWithoutOrganizationsInputSchema),z.lazy(() => LanguageUpdateWithoutOrganizationsInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutOrganizationsInputSchema) ]).optional(),
}).strict();

export const IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema: z.ZodType<Prisma.IndustryCategoryUpdateOneWithoutOrganizationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IndustryCategoryCreateWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUncheckedCreateWithoutOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IndustryCategoryCreateOrConnectWithoutOrganizationsInputSchema).optional(),
  upsert: z.lazy(() => IndustryCategoryUpsertWithoutOrganizationsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => IndustryCategoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => IndustryCategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => IndustryCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => IndustryCategoryUpdateToOneWithWhereWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUpdateWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUncheckedUpdateWithoutOrganizationsInputSchema) ]).optional(),
}).strict();

export const FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema: z.ZodType<Prisma.FiscalYearPatternUpdateOneWithoutOrganizationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FiscalYearPatternCreateWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUncheckedCreateWithoutOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FiscalYearPatternCreateOrConnectWithoutOrganizationsInputSchema).optional(),
  upsert: z.lazy(() => FiscalYearPatternUpsertWithoutOrganizationsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => FiscalYearPatternWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => FiscalYearPatternWhereInputSchema) ]).optional(),
  connect: z.lazy(() => FiscalYearPatternWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FiscalYearPatternUpdateToOneWithWhereWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUpdateWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUncheckedUpdateWithoutOrganizationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RoleUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutOrganizationInputSchema),z.lazy(() => RoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedOrganizationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwnedOrganizationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutOwnedOrganizationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUpdateWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedOrganizationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateManyWithoutOrganizationsNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutOrganizationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationsInputSchema),z.lazy(() => UserCreateWithoutOrganizationsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutOrganizationInputSchema),z.lazy(() => RoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutOrganizationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationsInputSchema),z.lazy(() => UserCreateWithoutOrganizationsInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationsInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationsInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationsInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubregionCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.SubregionCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => SubregionCreateWithoutRegionInputSchema),z.lazy(() => SubregionCreateWithoutRegionInputSchema).array(),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema),z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubregionCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubregionUncheckedCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUncheckedCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => SubregionCreateWithoutRegionInputSchema),z.lazy(() => SubregionCreateWithoutRegionInputSchema).array(),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema),z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubregionCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutRegionInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubregionUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.SubregionUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubregionCreateWithoutRegionInputSchema),z.lazy(() => SubregionCreateWithoutRegionInputSchema).array(),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema),z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubregionUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => SubregionUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubregionCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubregionUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => SubregionUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubregionUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => SubregionUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubregionScalarWhereInputSchema),z.lazy(() => SubregionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubregionUncheckedUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.SubregionUncheckedUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubregionCreateWithoutRegionInputSchema),z.lazy(() => SubregionCreateWithoutRegionInputSchema).array(),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema),z.lazy(() => SubregionCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubregionUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => SubregionUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubregionCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubregionWhereUniqueInputSchema),z.lazy(() => SubregionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubregionUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => SubregionUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubregionUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => SubregionUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubregionScalarWhereInputSchema),z.lazy(() => SubregionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutRegionNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutRegionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryCreateWithoutRegionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutRegionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyRegionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutRegionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutRegionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RegionCreateNestedOneWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionCreateNestedOneWithoutSubregionsInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutSubregionsInputSchema),z.lazy(() => RegionUncheckedCreateWithoutSubregionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutSubregionsInputSchema).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional()
}).strict();

export const CountryCreateNestedManyWithoutSubregionInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutSubregionInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutSubregionInputSchema),z.lazy(() => CountryCreateWithoutSubregionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManySubregionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutSubregionInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutSubregionInputSchema),z.lazy(() => CountryCreateWithoutSubregionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManySubregionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RegionUpdateOneRequiredWithoutSubregionsNestedInputSchema: z.ZodType<Prisma.RegionUpdateOneRequiredWithoutSubregionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutSubregionsInputSchema),z.lazy(() => RegionUncheckedCreateWithoutSubregionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutSubregionsInputSchema).optional(),
  upsert: z.lazy(() => RegionUpsertWithoutSubregionsInputSchema).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RegionUpdateToOneWithWhereWithoutSubregionsInputSchema),z.lazy(() => RegionUpdateWithoutSubregionsInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutSubregionsInputSchema) ]).optional(),
}).strict();

export const CountryUpdateManyWithoutSubregionNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutSubregionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutSubregionInputSchema),z.lazy(() => CountryCreateWithoutSubregionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutSubregionInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutSubregionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManySubregionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutSubregionInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutSubregionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutSubregionInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutSubregionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutSubregionNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutSubregionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutSubregionInputSchema),z.lazy(() => CountryCreateWithoutSubregionInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema),z.lazy(() => CountryCreateOrConnectWithoutSubregionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutSubregionInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutSubregionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManySubregionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutSubregionInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutSubregionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutSubregionInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutSubregionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedManyWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutCurrencyInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutCurrencyInputSchema),z.lazy(() => CountryCreateWithoutCurrencyInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyCurrencyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutCurrencyInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyCurrencyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutCurrencyInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutCurrencyInputSchema),z.lazy(() => CountryCreateWithoutCurrencyInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyCurrencyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutCurrencyInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyCurrencyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateManyWithoutCurrencyNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutCurrencyNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutCurrencyInputSchema),z.lazy(() => CountryCreateWithoutCurrencyInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyCurrencyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutCurrencyInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutCurrencyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutCurrencyNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutCurrencyNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyCurrencyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutCurrencyInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutCurrencyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutCurrencyNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutCurrencyNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutCurrencyInputSchema),z.lazy(() => CountryCreateWithoutCurrencyInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => CountryCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyCurrencyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutCurrencyInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutCurrencyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutCurrencyNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutCurrencyNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutCurrencyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyCurrencyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutCurrencyInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutCurrencyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutCurrencyInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutCurrencyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedManyWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutPhoneCodeInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyPhoneCodeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutPhoneCodeInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyPhoneCodeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateManyWithoutPhoneCodeNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutPhoneCodeNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutPhoneCodeInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutPhoneCodeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyPhoneCodeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutPhoneCodeInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutPhoneCodeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutPhoneCodeInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutPhoneCodeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutPhoneCodeNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutPhoneCodeNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema),z.lazy(() => CountryCreateOrConnectWithoutPhoneCodeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutPhoneCodeInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutPhoneCodeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CountryCreateManyPhoneCodeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutPhoneCodeInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutPhoneCodeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutPhoneCodeInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutPhoneCodeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedManyWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutTimeZoneInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedManyWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryCreateNestedManyWithoutTimezonesInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimezonesInputSchema),z.lazy(() => CountryCreateWithoutTimezonesInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutTimeZoneInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyTimeZoneInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutTimeZoneInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedCreateNestedManyWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUncheckedCreateNestedManyWithoutTimezonesInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimezonesInputSchema),z.lazy(() => CountryCreateWithoutTimezonesInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutTimeZoneInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyTimeZoneInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateManyWithoutTimeZoneNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutTimeZoneNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutTimeZoneInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutTimeZoneInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateManyWithoutTimezonesNestedInputSchema: z.ZodType<Prisma.CountryUpdateManyWithoutTimezonesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimezonesInputSchema),z.lazy(() => CountryCreateWithoutTimezonesInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimezonesInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimezonesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimezonesInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimezonesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutTimezonesInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutTimezonesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutTimeZoneNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutTimeZoneNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyTimeZoneInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutTimeZoneInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutTimeZoneNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutTimeZoneNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutTimeZoneInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutTimeZoneInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryUncheckedUpdateManyWithoutTimezonesNestedInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutTimezonesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTimezonesInputSchema),z.lazy(() => CountryCreateWithoutTimezonesInputSchema).array(),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema),z.lazy(() => CountryCreateOrConnectWithoutTimezonesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimezonesInputSchema),z.lazy(() => CountryUpsertWithWhereUniqueWithoutTimezonesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CountryWhereUniqueInputSchema),z.lazy(() => CountryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimezonesInputSchema),z.lazy(() => CountryUpdateWithWhereUniqueWithoutTimezonesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CountryUpdateManyWithWhereWithoutTimezonesInputSchema),z.lazy(() => CountryUpdateManyWithWhereWithoutTimezonesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutTimeZoneNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutTimeZoneNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutTimeZoneInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyTimeZoneInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutTimeZoneInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutTimeZoneInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedOneWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryCreateNestedOneWithoutTranslationsInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTranslationsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTranslationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutTranslationsInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional()
}).strict();

export const CountryUpdateOneWithoutTranslationsNestedInputSchema: z.ZodType<Prisma.CountryUpdateOneWithoutTranslationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutTranslationsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTranslationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutTranslationsInputSchema).optional(),
  upsert: z.lazy(() => CountryUpsertWithoutTranslationsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CountryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CountryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountryUpdateToOneWithWhereWithoutTranslationsInputSchema),z.lazy(() => CountryUpdateWithoutTranslationsInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutTranslationsInputSchema) ]).optional(),
}).strict();

export const RegionCreateNestedOneWithoutCountriesInputSchema: z.ZodType<Prisma.RegionCreateNestedOneWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutCountriesInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutCountriesInputSchema).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional()
}).strict();

export const SubregionCreateNestedOneWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionCreateNestedOneWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => SubregionCreateWithoutCountriesInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubregionCreateOrConnectWithoutCountriesInputSchema).optional(),
  connect: z.lazy(() => SubregionWhereUniqueInputSchema).optional()
}).strict();

export const CurrencyCreateNestedOneWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyCreateNestedOneWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => CurrencyCreateWithoutCountriesInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CurrencyCreateOrConnectWithoutCountriesInputSchema).optional(),
  connect: z.lazy(() => CurrencyWhereUniqueInputSchema).optional()
}).strict();

export const PhoneCodeCreateNestedOneWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeCreateNestedOneWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => PhoneCodeCreateWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PhoneCodeCreateOrConnectWithoutCountriesInputSchema).optional(),
  connect: z.lazy(() => PhoneCodeWhereUniqueInputSchema).optional()
}).strict();

export const TimeZoneCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateWithoutCountryInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TranslationCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.TranslationCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => TranslationCreateWithoutCountryInputSchema),z.lazy(() => TranslationCreateWithoutCountryInputSchema).array(),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TranslationCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StateCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.StateCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutCountryInputSchema),z.lazy(() => StateCreateWithoutCountryInputSchema).array(),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StateCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeZoneCreateNestedManyWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneCreateNestedManyWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CityCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.CityCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountryInputSchema),z.lazy(() => CityCreateWithoutCountryInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUncheckedCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateWithoutCountryInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TranslationUncheckedCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUncheckedCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => TranslationCreateWithoutCountryInputSchema),z.lazy(() => TranslationCreateWithoutCountryInputSchema).array(),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TranslationCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StateUncheckedCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.StateUncheckedCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutCountryInputSchema),z.lazy(() => StateCreateWithoutCountryInputSchema).array(),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StateCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUncheckedCreateNestedManyWithoutCountriesInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedCreateNestedManyWithoutCountryInputSchema: z.ZodType<Prisma.CityUncheckedCreateNestedManyWithoutCountryInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountryInputSchema),z.lazy(() => CityCreateWithoutCountryInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RegionUpdateOneWithoutCountriesNestedInputSchema: z.ZodType<Prisma.RegionUpdateOneWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RegionCreateWithoutCountriesInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RegionCreateOrConnectWithoutCountriesInputSchema).optional(),
  upsert: z.lazy(() => RegionUpsertWithoutCountriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RegionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RegionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RegionUpdateToOneWithWhereWithoutCountriesInputSchema),z.lazy(() => RegionUpdateWithoutCountriesInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutCountriesInputSchema) ]).optional(),
}).strict();

export const SubregionUpdateOneWithoutCountriesNestedInputSchema: z.ZodType<Prisma.SubregionUpdateOneWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubregionCreateWithoutCountriesInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubregionCreateOrConnectWithoutCountriesInputSchema).optional(),
  upsert: z.lazy(() => SubregionUpsertWithoutCountriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SubregionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SubregionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SubregionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubregionUpdateToOneWithWhereWithoutCountriesInputSchema),z.lazy(() => SubregionUpdateWithoutCountriesInputSchema),z.lazy(() => SubregionUncheckedUpdateWithoutCountriesInputSchema) ]).optional(),
}).strict();

export const CurrencyUpdateOneWithoutCountriesNestedInputSchema: z.ZodType<Prisma.CurrencyUpdateOneWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CurrencyCreateWithoutCountriesInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CurrencyCreateOrConnectWithoutCountriesInputSchema).optional(),
  upsert: z.lazy(() => CurrencyUpsertWithoutCountriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CurrencyWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CurrencyWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CurrencyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CurrencyUpdateToOneWithWhereWithoutCountriesInputSchema),z.lazy(() => CurrencyUpdateWithoutCountriesInputSchema),z.lazy(() => CurrencyUncheckedUpdateWithoutCountriesInputSchema) ]).optional(),
}).strict();

export const PhoneCodeUpdateOneWithoutCountriesNestedInputSchema: z.ZodType<Prisma.PhoneCodeUpdateOneWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PhoneCodeCreateWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUncheckedCreateWithoutCountriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PhoneCodeCreateOrConnectWithoutCountriesInputSchema).optional(),
  upsert: z.lazy(() => PhoneCodeUpsertWithoutCountriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PhoneCodeWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PhoneCodeWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PhoneCodeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PhoneCodeUpdateToOneWithWhereWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUpdateWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUncheckedUpdateWithoutCountriesInputSchema) ]).optional(),
}).strict();

export const TimeZoneUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.TimeZoneUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateWithoutCountryInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeZoneScalarWhereInputSchema),z.lazy(() => TimeZoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TranslationUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.TranslationUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => TranslationCreateWithoutCountryInputSchema),z.lazy(() => TranslationCreateWithoutCountryInputSchema).array(),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TranslationUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TranslationUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TranslationCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TranslationUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TranslationUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TranslationUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => TranslationUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TranslationScalarWhereInputSchema),z.lazy(() => TranslationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StateUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.StateUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutCountryInputSchema),z.lazy(() => StateCreateWithoutCountryInputSchema).array(),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StateUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => StateUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StateCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StateUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => StateUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StateUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => StateUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StateScalarWhereInputSchema),z.lazy(() => StateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeZoneUpdateManyWithoutCountriesNestedInputSchema: z.ZodType<Prisma.TimeZoneUpdateManyWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountriesInputSchema),z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeZoneScalarWhereInputSchema),z.lazy(() => TimeZoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CityUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.CityUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountryInputSchema),z.lazy(() => CityCreateWithoutCountryInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateWithoutCountryInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeZoneScalarWhereInputSchema),z.lazy(() => TimeZoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.TranslationUncheckedUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => TranslationCreateWithoutCountryInputSchema),z.lazy(() => TranslationCreateWithoutCountryInputSchema).array(),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema),z.lazy(() => TranslationCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TranslationUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TranslationUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TranslationCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TranslationWhereUniqueInputSchema),z.lazy(() => TranslationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TranslationUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => TranslationUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TranslationUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => TranslationUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TranslationScalarWhereInputSchema),z.lazy(() => TranslationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StateUncheckedUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.StateUncheckedUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutCountryInputSchema),z.lazy(() => StateCreateWithoutCountryInputSchema).array(),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema),z.lazy(() => StateCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StateUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => StateUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StateCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StateWhereUniqueInputSchema),z.lazy(() => StateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StateUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => StateUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StateUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => StateUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StateScalarWhereInputSchema),z.lazy(() => StateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateManyWithoutCountriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema).array(),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema),z.lazy(() => TimeZoneCreateOrConnectWithoutCountriesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => TimeZoneUpsertWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeZoneWhereUniqueInputSchema),z.lazy(() => TimeZoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountriesInputSchema),z.lazy(() => TimeZoneUpdateWithWhereUniqueWithoutCountriesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountriesInputSchema),z.lazy(() => TimeZoneUpdateManyWithWhereWithoutCountriesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeZoneScalarWhereInputSchema),z.lazy(() => TimeZoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutCountryNestedInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutCountryNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutCountryInputSchema),z.lazy(() => CityCreateWithoutCountryInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema),z.lazy(() => CityCreateOrConnectWithoutCountryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyCountryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutCountryInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutCountryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutCountryInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutCountryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CountryCreateNestedOneWithoutStatesInputSchema: z.ZodType<Prisma.CountryCreateNestedOneWithoutStatesInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutStatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutStatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutStatesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional()
}).strict();

export const CityCreateNestedManyWithoutStateInputSchema: z.ZodType<Prisma.CityCreateNestedManyWithoutStateInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutStateInputSchema),z.lazy(() => CityCreateWithoutStateInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutStateInputSchema),z.lazy(() => CityCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyStateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutStateInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutStateInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStateInputSchema),z.lazy(() => OrganizationCreateWithoutStateInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyStateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedCreateNestedManyWithoutStateInputSchema: z.ZodType<Prisma.CityUncheckedCreateNestedManyWithoutStateInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutStateInputSchema),z.lazy(() => CityCreateWithoutStateInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutStateInputSchema),z.lazy(() => CityCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyStateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutStateInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStateInputSchema),z.lazy(() => OrganizationCreateWithoutStateInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyStateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CountryUpdateOneRequiredWithoutStatesNestedInputSchema: z.ZodType<Prisma.CountryUpdateOneRequiredWithoutStatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutStatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutStatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutStatesInputSchema).optional(),
  upsert: z.lazy(() => CountryUpsertWithoutStatesInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountryUpdateToOneWithWhereWithoutStatesInputSchema),z.lazy(() => CountryUpdateWithoutStatesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutStatesInputSchema) ]).optional(),
}).strict();

export const CityUpdateManyWithoutStateNestedInputSchema: z.ZodType<Prisma.CityUpdateManyWithoutStateNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutStateInputSchema),z.lazy(() => CityCreateWithoutStateInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutStateInputSchema),z.lazy(() => CityCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutStateInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyStateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutStateInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutStateInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutStateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutStateNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutStateNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStateInputSchema),z.lazy(() => OrganizationCreateWithoutStateInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutStateInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyStateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutStateInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutStateInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutStateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutStateNestedInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutStateNestedInput> = z.object({
  create: z.union([ z.lazy(() => CityCreateWithoutStateInputSchema),z.lazy(() => CityCreateWithoutStateInputSchema).array(),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CityCreateOrConnectWithoutStateInputSchema),z.lazy(() => CityCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CityUpsertWithWhereUniqueWithoutStateInputSchema),z.lazy(() => CityUpsertWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CityCreateManyStateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CityWhereUniqueInputSchema),z.lazy(() => CityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CityUpdateWithWhereUniqueWithoutStateInputSchema),z.lazy(() => CityUpdateWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CityUpdateManyWithWhereWithoutStateInputSchema),z.lazy(() => CityUpdateManyWithWhereWithoutStateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutStateNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutStateNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStateInputSchema),z.lazy(() => OrganizationCreateWithoutStateInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutStateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutStateInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyStateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutStateInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutStateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutStateInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutStateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StateCreateNestedOneWithoutCitiesInputSchema: z.ZodType<Prisma.StateCreateNestedOneWithoutCitiesInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutCitiesInputSchema),z.lazy(() => StateUncheckedCreateWithoutCitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StateCreateOrConnectWithoutCitiesInputSchema).optional(),
  connect: z.lazy(() => StateWhereUniqueInputSchema).optional()
}).strict();

export const CountryCreateNestedOneWithoutCityInputSchema: z.ZodType<Prisma.CountryCreateNestedOneWithoutCityInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutCityInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutCityInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional()
}).strict();

export const StateUpdateOneRequiredWithoutCitiesNestedInputSchema: z.ZodType<Prisma.StateUpdateOneRequiredWithoutCitiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => StateCreateWithoutCitiesInputSchema),z.lazy(() => StateUncheckedCreateWithoutCitiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StateCreateOrConnectWithoutCitiesInputSchema).optional(),
  upsert: z.lazy(() => StateUpsertWithoutCitiesInputSchema).optional(),
  connect: z.lazy(() => StateWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StateUpdateToOneWithWhereWithoutCitiesInputSchema),z.lazy(() => StateUpdateWithoutCitiesInputSchema),z.lazy(() => StateUncheckedUpdateWithoutCitiesInputSchema) ]).optional(),
}).strict();

export const CountryUpdateOneRequiredWithoutCityNestedInputSchema: z.ZodType<Prisma.CountryUpdateOneRequiredWithoutCityNestedInput> = z.object({
  create: z.union([ z.lazy(() => CountryCreateWithoutCityInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CountryCreateOrConnectWithoutCityInputSchema).optional(),
  upsert: z.lazy(() => CountryUpsertWithoutCityInputSchema).optional(),
  connect: z.lazy(() => CountryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CountryUpdateToOneWithWhereWithoutCityInputSchema),z.lazy(() => CountryUpdateWithoutCityInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutCityInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutOwnedRolesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwnedRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RolePermissionCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionUncheckedCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumUserRoleStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUserRoleStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserRoleStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutRolesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRolesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutRolesInputSchema),z.lazy(() => OrganizationUpdateWithoutRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRolesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutOwnedRolesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutOwnedRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutOwnedRolesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutOwnedRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutOwnedRolesInputSchema),z.lazy(() => UserUpdateWithoutOwnedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedRolesInputSchema) ]).optional(),
}).strict();

export const RolePermissionUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionUncheckedUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutUserRolesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserRolesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RoleCreateNestedOneWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleCreateNestedOneWithoutUserRolesInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUserRolesInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUserRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutUserRolesInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutUserRolesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUserRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUserRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUserRolesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutUserRolesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserRolesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserRolesInputSchema),z.lazy(() => UserUpdateWithoutUserRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRolesInputSchema) ]).optional(),
}).strict();

export const RoleUpdateOneRequiredWithoutUserRolesNestedInputSchema: z.ZodType<Prisma.RoleUpdateOneRequiredWithoutUserRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUserRolesInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUserRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutUserRolesInputSchema).optional(),
  upsert: z.lazy(() => RoleUpsertWithoutUserRolesInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RoleUpdateToOneWithWhereWithoutUserRolesInputSchema),z.lazy(() => RoleUpdateWithoutUserRolesInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUserRolesInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutUserRolesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutUserRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUserRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUserRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUserRolesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutUserRolesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutUserRolesInputSchema),z.lazy(() => OrganizationUpdateWithoutUserRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUserRolesInputSchema) ]).optional(),
}).strict();

export const PermissionCreateNestedManyWithoutActionInputSchema: z.ZodType<Prisma.PermissionCreateNestedManyWithoutActionInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutActionInputSchema),z.lazy(() => PermissionCreateWithoutActionInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyActionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedCreateNestedManyWithoutActionInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateNestedManyWithoutActionInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutActionInputSchema),z.lazy(() => PermissionCreateWithoutActionInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyActionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumActionNameFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumActionNameFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ActionNameSchema).optional()
}).strict();

export const PermissionUpdateManyWithoutActionNestedInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithoutActionNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutActionInputSchema),z.lazy(() => PermissionCreateWithoutActionInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutActionInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutActionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyActionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutActionInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutActionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutActionInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutActionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedUpdateManyWithoutActionNestedInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutActionNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutActionInputSchema),z.lazy(() => PermissionCreateWithoutActionInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutActionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutActionInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutActionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyActionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutActionInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutActionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutActionInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutActionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionCreateNestedManyWithoutResourceInputSchema: z.ZodType<Prisma.PermissionCreateNestedManyWithoutResourceInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutResourceInputSchema),z.lazy(() => PermissionCreateWithoutResourceInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyResourceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedCreateNestedManyWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateNestedManyWithoutResourceInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutResourceInputSchema),z.lazy(() => PermissionCreateWithoutResourceInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyResourceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumResourceNameFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumResourceNameFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ResourceNameSchema).optional()
}).strict();

export const PermissionUpdateManyWithoutResourceNestedInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithoutResourceNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutResourceInputSchema),z.lazy(() => PermissionCreateWithoutResourceInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutResourceInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutResourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyResourceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutResourceInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutResourceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutResourceInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutResourceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedUpdateManyWithoutResourceNestedInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutResourceNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutResourceInputSchema),z.lazy(() => PermissionCreateWithoutResourceInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutResourceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutResourceInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutResourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyResourceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutResourceInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutResourceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutResourceInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutResourceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ActionCreateNestedOneWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionCreateNestedOneWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => ActionCreateWithoutPermissionsInputSchema),z.lazy(() => ActionUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ActionCreateOrConnectWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => ActionWhereUniqueInputSchema).optional()
}).strict();

export const ResourceCreateNestedOneWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceCreateNestedOneWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => ResourceCreateWithoutPermissionsInputSchema),z.lazy(() => ResourceUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ResourceCreateOrConnectWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => ResourceWhereUniqueInputSchema).optional()
}).strict();

export const RolePermissionCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ActionUpdateOneRequiredWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.ActionUpdateOneRequiredWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ActionCreateWithoutPermissionsInputSchema),z.lazy(() => ActionUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ActionCreateOrConnectWithoutPermissionsInputSchema).optional(),
  upsert: z.lazy(() => ActionUpsertWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => ActionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ActionUpdateToOneWithWhereWithoutPermissionsInputSchema),z.lazy(() => ActionUpdateWithoutPermissionsInputSchema),z.lazy(() => ActionUncheckedUpdateWithoutPermissionsInputSchema) ]).optional(),
}).strict();

export const ResourceUpdateOneRequiredWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.ResourceUpdateOneRequiredWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ResourceCreateWithoutPermissionsInputSchema),z.lazy(() => ResourceUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ResourceCreateOrConnectWithoutPermissionsInputSchema).optional(),
  upsert: z.lazy(() => ResourceUpsertWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => ResourceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ResourceUpdateToOneWithWhereWithoutPermissionsInputSchema),z.lazy(() => ResourceUpdateWithoutPermissionsInputSchema),z.lazy(() => ResourceUncheckedUpdateWithoutPermissionsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionCreateNestedManyWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateNestedManyWithoutCustomPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyCustomPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionUncheckedCreateNestedManyWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedCreateNestedManyWithoutCustomPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyCustomPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumSystemCustomPermissionFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumSystemCustomPermissionFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => SystemCustomPermissionSchema).optional()
}).strict();

export const RoleCustomPermissionUpdateManyWithoutCustomPermissionNestedInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateManyWithoutCustomPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyCustomPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutCustomPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutCustomPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionUncheckedUpdateManyWithoutCustomPermissionNestedInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateManyWithoutCustomPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema).array(),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUpsertWithWhereUniqueWithoutCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCustomPermissionCreateManyCustomPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUpdateWithWhereUniqueWithoutCustomPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUpdateManyWithWhereWithoutCustomPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleCreateNestedOneWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleCreateNestedOneWithoutRolePermissionsInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutRolePermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional()
}).strict();

export const PermissionCreateNestedOneWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateNestedOneWithoutRolePermissionsInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional()
}).strict();

export const RoleUpdateOneRequiredWithoutRolePermissionsNestedInputSchema: z.ZodType<Prisma.RoleUpdateOneRequiredWithoutRolePermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutRolePermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutRolePermissionsInputSchema).optional(),
  upsert: z.lazy(() => RoleUpsertWithoutRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RoleUpdateToOneWithWhereWithoutRolePermissionsInputSchema),z.lazy(() => RoleUpdateWithoutRolePermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutRolePermissionsInputSchema) ]).optional(),
}).strict();

export const PermissionUpdateOneRequiredWithoutRolePermissionsNestedInputSchema: z.ZodType<Prisma.PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutRolePermissionsInputSchema).optional(),
  upsert: z.lazy(() => PermissionUpsertWithoutRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateToOneWithWhereWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUpdateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolePermissionsInputSchema) ]).optional(),
}).strict();

export const RoleCreateNestedOneWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleCreateNestedOneWithoutRoleCustomPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutRoleCustomPermissionsInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional()
}).strict();

export const CustomPermissionCreateNestedOneWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionCreateNestedOneWithoutRoleCustomPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => CustomPermissionCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomPermissionCreateOrConnectWithoutRoleCustomPermissionsInputSchema).optional(),
  connect: z.lazy(() => CustomPermissionWhereUniqueInputSchema).optional()
}).strict();

export const PermissionApprovalCreateNestedManyWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalCreateNestedManyWithoutRoleCustomPermissionInput> = z.object({
  create: z.union([ z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema).array(),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionApprovalCreateManyRoleCustomPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionApprovalUncheckedCreateNestedManyWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedCreateNestedManyWithoutRoleCustomPermissionInput> = z.object({
  create: z.union([ z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema).array(),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionApprovalCreateManyRoleCustomPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema: z.ZodType<Prisma.RoleUpdateOneRequiredWithoutRoleCustomPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutRoleCustomPermissionsInputSchema).optional(),
  upsert: z.lazy(() => RoleUpsertWithoutRoleCustomPermissionsInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RoleUpdateToOneWithWhereWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUpdateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutRoleCustomPermissionsInputSchema) ]).optional(),
}).strict();

export const CustomPermissionUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema: z.ZodType<Prisma.CustomPermissionUpdateOneRequiredWithoutRoleCustomPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomPermissionCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomPermissionCreateOrConnectWithoutRoleCustomPermissionsInputSchema).optional(),
  upsert: z.lazy(() => CustomPermissionUpsertWithoutRoleCustomPermissionsInputSchema).optional(),
  connect: z.lazy(() => CustomPermissionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomPermissionUpdateToOneWithWhereWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUpdateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUncheckedUpdateWithoutRoleCustomPermissionsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalUpdateManyWithoutRoleCustomPermissionNestedInputSchema: z.ZodType<Prisma.PermissionApprovalUpdateManyWithoutRoleCustomPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema).array(),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionApprovalUpsertWithWhereUniqueWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUpsertWithWhereUniqueWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionApprovalCreateManyRoleCustomPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionApprovalUpdateWithWhereUniqueWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUpdateWithWhereUniqueWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionApprovalUpdateManyWithWhereWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUpdateManyWithWhereWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionApprovalScalarWhereInputSchema),z.lazy(() => PermissionApprovalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionNestedInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema).array(),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionApprovalUpsertWithWhereUniqueWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUpsertWithWhereUniqueWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionApprovalCreateManyRoleCustomPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionApprovalWhereUniqueInputSchema),z.lazy(() => PermissionApprovalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionApprovalUpdateWithWhereUniqueWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUpdateWithWhereUniqueWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionApprovalUpdateManyWithWhereWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUpdateManyWithWhereWithoutRoleCustomPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionApprovalScalarWhereInputSchema),z.lazy(() => PermissionApprovalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleCustomPermissionCreateNestedOneWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateNestedOneWithoutPermissionApprovalsInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutPermissionApprovalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutPermissionApprovalsInputSchema).optional(),
  connect: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).optional()
}).strict();

export const RoleCustomPermissionUpdateOneRequiredWithoutPermissionApprovalsNestedInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateOneRequiredWithoutPermissionApprovalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutPermissionApprovalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCustomPermissionCreateOrConnectWithoutPermissionApprovalsInputSchema).optional(),
  upsert: z.lazy(() => RoleCustomPermissionUpsertWithoutPermissionApprovalsInputSchema).optional(),
  connect: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateToOneWithWhereWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUpdateWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateWithoutPermissionApprovalsInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedEnumOtpTypeFilterSchema: z.ZodType<Prisma.NestedEnumOtpTypeFilter> = z.object({
  equals: z.lazy(() => OtpTypeSchema).optional(),
  in: z.lazy(() => OtpTypeSchema).array().optional(),
  notIn: z.lazy(() => OtpTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => NestedEnumOtpTypeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedEnumOtpTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumOtpTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OtpTypeSchema).optional(),
  in: z.lazy(() => OtpTypeSchema).array().optional(),
  notIn: z.lazy(() => OtpTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => OtpTypeSchema),z.lazy(() => NestedEnumOtpTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOtpTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOtpTypeFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedEnumIdentifierTypeFilterSchema: z.ZodType<Prisma.NestedEnumIdentifierTypeFilter> = z.object({
  equals: z.lazy(() => IdentifierTypeSchema).optional(),
  in: z.lazy(() => IdentifierTypeSchema).array().optional(),
  notIn: z.lazy(() => IdentifierTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => NestedEnumIdentifierTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumIdentifierTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumIdentifierTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => IdentifierTypeSchema).optional(),
  in: z.lazy(() => IdentifierTypeSchema).array().optional(),
  notIn: z.lazy(() => IdentifierTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => NestedEnumIdentifierTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumIdentifierTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumIdentifierTypeFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumUserRoleStatusFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleStatusFilter> = z.object({
  equals: z.lazy(() => UserRoleStatusSchema).optional(),
  in: z.lazy(() => UserRoleStatusSchema).array().optional(),
  notIn: z.lazy(() => UserRoleStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => NestedEnumUserRoleStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUserRoleStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleStatusSchema).optional(),
  in: z.lazy(() => UserRoleStatusSchema).array().optional(),
  notIn: z.lazy(() => UserRoleStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => NestedEnumUserRoleStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleStatusFilterSchema).optional()
}).strict();

export const NestedEnumActionNameFilterSchema: z.ZodType<Prisma.NestedEnumActionNameFilter> = z.object({
  equals: z.lazy(() => ActionNameSchema).optional(),
  in: z.lazy(() => ActionNameSchema).array().optional(),
  notIn: z.lazy(() => ActionNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => NestedEnumActionNameFilterSchema) ]).optional(),
}).strict();

export const NestedEnumActionNameWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumActionNameWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ActionNameSchema).optional(),
  in: z.lazy(() => ActionNameSchema).array().optional(),
  notIn: z.lazy(() => ActionNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => NestedEnumActionNameWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumActionNameFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumActionNameFilterSchema).optional()
}).strict();

export const NestedEnumResourceNameFilterSchema: z.ZodType<Prisma.NestedEnumResourceNameFilter> = z.object({
  equals: z.lazy(() => ResourceNameSchema).optional(),
  in: z.lazy(() => ResourceNameSchema).array().optional(),
  notIn: z.lazy(() => ResourceNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => NestedEnumResourceNameFilterSchema) ]).optional(),
}).strict();

export const NestedEnumResourceNameWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumResourceNameWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ResourceNameSchema).optional(),
  in: z.lazy(() => ResourceNameSchema).array().optional(),
  notIn: z.lazy(() => ResourceNameSchema).array().optional(),
  not: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => NestedEnumResourceNameWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumResourceNameFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumResourceNameFilterSchema).optional()
}).strict();

export const NestedEnumSystemCustomPermissionFilterSchema: z.ZodType<Prisma.NestedEnumSystemCustomPermissionFilter> = z.object({
  equals: z.lazy(() => SystemCustomPermissionSchema).optional(),
  in: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  notIn: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  not: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => NestedEnumSystemCustomPermissionFilterSchema) ]).optional(),
}).strict();

export const NestedEnumSystemCustomPermissionWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSystemCustomPermissionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SystemCustomPermissionSchema).optional(),
  in: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  notIn: z.lazy(() => SystemCustomPermissionSchema).array().optional(),
  not: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => NestedEnumSystemCustomPermissionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSystemCustomPermissionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSystemCustomPermissionFilterSchema).optional()
}).strict();

export const UserIdentifierCreateWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => IdentifierTypeSchema),
  value: z.string(),
  isVerified: z.boolean().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserIdentifierUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => IdentifierTypeSchema),
  value: z.string(),
  isVerified: z.boolean().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserIdentifierCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserIdentifierWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserIdentifierCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserIdentifierCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.UserIdentifierCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserIdentifierCreateManyUserInputSchema),z.lazy(() => UserIdentifierCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserProfileCreateWithoutUserInputSchema: z.ZodType<Prisma.UserProfileCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  avatarUrl: z.string().optional().nullable(),
  contactEmail: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserProfileUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserProfileUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  avatarUrl: z.string().optional().nullable(),
  contactEmail: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserProfileCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserProfileCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserProfileWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const RefreshTokenCreateWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  userAgent: z.string().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  expiresAt: z.coerce.date(),
  revokedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RefreshTokenUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  userAgent: z.string().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  expiresAt: z.coerce.date(),
  revokedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RefreshTokenCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => RefreshTokenWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RefreshTokenCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const RefreshTokenCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.RefreshTokenCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RefreshTokenCreateManyUserInputSchema),z.lazy(() => RefreshTokenCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserRoleCreateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  role: z.lazy(() => RoleCreateNestedOneWithoutUserRolesInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUserRolesInputSchema)
}).strict();

export const UserRoleUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  roleId: z.string(),
  organizationId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserRoleCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserRoleCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.UserRoleCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserRoleCreateManyUserInputSchema),z.lazy(() => UserRoleCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RoleCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleCreateWithoutCreatedByInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRolesInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.RoleCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RoleCreateManyCreatedByInputSchema),z.lazy(() => RoleCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutUsersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema)
}).strict();

export const OrganizationUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutOwnedByInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutOwnedByInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutOwnedByInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema) ]),
}).strict();

export const OrganizationCreateManyOwnedByInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyOwnedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyOwnedByInputSchema),z.lazy(() => OrganizationCreateManyOwnedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserIdentifierUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserIdentifierWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserIdentifierUpdateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserIdentifierCreateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserIdentifierUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserIdentifierWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserIdentifierUpdateWithoutUserInputSchema),z.lazy(() => UserIdentifierUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserIdentifierUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserIdentifierScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserIdentifierUpdateManyMutationInputSchema),z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserIdentifierScalarWhereInputSchema: z.ZodType<Prisma.UserIdentifierScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserIdentifierScalarWhereInputSchema),z.lazy(() => UserIdentifierScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserIdentifierScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserIdentifierScalarWhereInputSchema),z.lazy(() => UserIdentifierScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumIdentifierTypeFilterSchema),z.lazy(() => IdentifierTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isPrimary: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserProfileUpsertWithoutUserInputSchema: z.ZodType<Prisma.UserProfileUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => UserProfileUpdateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserProfileCreateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => UserProfileWhereInputSchema).optional()
}).strict();

export const UserProfileUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserProfileUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserProfileWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserProfileUpdateWithoutUserInputSchema),z.lazy(() => UserProfileUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserProfileUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserProfileUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  contactEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserProfileUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserProfileUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  avatarUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  contactEmail: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RefreshTokenUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => RefreshTokenWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RefreshTokenUpdateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => RefreshTokenCreateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const RefreshTokenUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => RefreshTokenWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RefreshTokenUpdateWithoutUserInputSchema),z.lazy(() => RefreshTokenUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const RefreshTokenUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => RefreshTokenScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RefreshTokenUpdateManyMutationInputSchema),z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const RefreshTokenScalarWhereInputSchema: z.ZodType<Prisma.RefreshTokenScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RefreshTokenScalarWhereInputSchema),z.lazy(() => RefreshTokenScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RefreshTokenScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RefreshTokenScalarWhereInputSchema),z.lazy(() => RefreshTokenScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  revokedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserRoleUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRoleUpdateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserRoleUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserRoleUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateManyMutationInputSchema),z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserRoleScalarWhereInputSchema: z.ZodType<Prisma.UserRoleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RoleUpdateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateManyMutationInputSchema),z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleScalarWhereInputSchema: z.ZodType<Prisma.RoleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isSystem: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => EnumUserRoleStatusFilterSchema),z.lazy(() => UserRoleStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const OrganizationScalarWhereInputSchema: z.ZodType<Prisma.OrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stateId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  currencyId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  timeZoneId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryStartDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  languageId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  industryCategoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  ownedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  zipCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutOwnedByInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOwnedByInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOwnedByInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutOwnedByInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutOwnedByInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOwnedByInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutOwnedByInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByInputSchema) ]),
}).strict();

export const UserCreateWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserCreateWithoutIdentifiersInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => UserProfileCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutIdentifiersInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profile: z.lazy(() => UserProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutIdentifiersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutIdentifiersInputSchema),z.lazy(() => UserUncheckedCreateWithoutIdentifiersInputSchema) ]),
}).strict();

export const UserUpsertWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserUpsertWithoutIdentifiersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutIdentifiersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutIdentifiersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutIdentifiersInputSchema),z.lazy(() => UserUncheckedCreateWithoutIdentifiersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutIdentifiersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutIdentifiersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutIdentifiersInputSchema) ]),
}).strict();

export const UserUpdateWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserUpdateWithoutIdentifiersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => UserProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutIdentifiersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutIdentifiersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profile: z.lazy(() => UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateWithoutProfileInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierCreateNestedManyWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProfileInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProfileInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]),
}).strict();

export const UserUpsertWithoutProfileInputSchema: z.ZodType<Prisma.UserUpsertWithoutProfileInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutProfileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProfileInputSchema),z.lazy(() => UserUncheckedCreateWithoutProfileInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutProfileInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutProfileInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProfileInputSchema) ]),
}).strict();

export const UserUpdateWithoutProfileInputSchema: z.ZodType<Prisma.UserUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUpdateManyWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProfileInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProfileInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserCreateWithoutRefreshTokensInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileCreateNestedOneWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRefreshTokensInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRefreshTokensInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRefreshTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutRefreshTokensInputSchema) ]),
}).strict();

export const UserUpsertWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserUpsertWithoutRefreshTokensInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRefreshTokensInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRefreshTokensInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRefreshTokensInputSchema),z.lazy(() => UserUncheckedCreateWithoutRefreshTokensInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRefreshTokensInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRefreshTokensInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRefreshTokensInputSchema) ]),
}).strict();

export const UserUpdateWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserUpdateWithoutRefreshTokensInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRefreshTokensInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRefreshTokensInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutLanguageInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutLanguageInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutLanguageInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema) ]),
}).strict();

export const OrganizationCreateManyLanguageInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyLanguageInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyLanguageInputSchema),z.lazy(() => OrganizationCreateManyLanguageInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutLanguageInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLanguageInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutLanguageInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutLanguageInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutLanguageInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutLanguageInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutLanguageInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutLanguageInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutIndustryCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutIndustryCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutIndustryCategoryInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema) ]),
}).strict();

export const OrganizationCreateManyIndustryCategoryInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyIndustryCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyIndustryCategoryInputSchema),z.lazy(() => OrganizationCreateManyIndustryCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutIndustryCategoryInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutIndustryCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutIndustryCategoryInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutIndustryCategoryInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutIndustryCategoryInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutIndustryCategoryInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutIndustryCategoryInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutIndustryCategoryInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFiscalYearPatternInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFiscalYearPatternInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFiscalYearPatternInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema) ]),
}).strict();

export const OrganizationCreateManyFiscalYearPatternInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyFiscalYearPatternInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyFiscalYearPatternInputSchema),z.lazy(() => OrganizationCreateManyFiscalYearPatternInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutFiscalYearPatternInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFiscalYearPatternInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFiscalYearPatternInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutFiscalYearPatternInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFiscalYearPatternInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFiscalYearPatternInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutFiscalYearPatternInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutFiscalYearPatternInputSchema) ]),
}).strict();

export const StateCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.StateCreateWithoutOrganizationInput> = z.object({
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  country: z.lazy(() => CountryCreateNestedOneWithoutStatesInputSchema),
  cities: z.lazy(() => CityCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.StateUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  countryId: z.number().int(),
  cities: z.lazy(() => CityUncheckedCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.StateCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => StateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StateCreateWithoutOrganizationInputSchema),z.lazy(() => StateUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CurrencyCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyCreateWithoutOrganizationInput> = z.object({
  code: z.string(),
  name: z.string().optional().nullable(),
  symbol: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutCurrencyInputSchema).optional()
}).strict();

export const CurrencyUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  name: z.string().optional().nullable(),
  symbol: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutCurrencyInputSchema).optional()
}).strict();

export const CurrencyCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CurrencyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CurrencyCreateWithoutOrganizationInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const TimeZoneCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneCreateWithoutOrganizationInput> = z.object({
  name: z.string(),
  offset: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutTimeZoneInputSchema).optional(),
  Country: z.lazy(() => CountryCreateNestedManyWithoutTimezonesInputSchema).optional()
}).strict();

export const TimeZoneUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  offset: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutTimeZoneInputSchema).optional(),
  Country: z.lazy(() => CountryUncheckedCreateNestedManyWithoutTimezonesInputSchema).optional()
}).strict();

export const TimeZoneCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TimeZoneWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const LanguageCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageCreateWithoutOrganizationsInput> = z.object({
  code: z.string(),
  name: z.string(),
  nativeName: z.string(),
  isDefault: z.boolean().optional()
}).strict();

export const LanguageUncheckedCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageUncheckedCreateWithoutOrganizationsInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  name: z.string(),
  nativeName: z.string(),
  isDefault: z.boolean().optional()
}).strict();

export const LanguageCreateOrConnectWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageCreateOrConnectWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => LanguageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LanguageCreateWithoutOrganizationsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutOrganizationsInputSchema) ]),
}).strict();

export const IndustryCategoryCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryCreateWithoutOrganizationsInput> = z.object({
  code: z.string(),
  label: z.string()
}).strict();

export const IndustryCategoryUncheckedCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryUncheckedCreateWithoutOrganizationsInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  label: z.string()
}).strict();

export const IndustryCategoryCreateOrConnectWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryCreateOrConnectWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => IndustryCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IndustryCategoryCreateWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUncheckedCreateWithoutOrganizationsInputSchema) ]),
}).strict();

export const FiscalYearPatternCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternCreateWithoutOrganizationsInput> = z.object({
  code: z.string(),
  label: z.string(),
  startMonth: z.number().int(),
  endMonth: z.number().int()
}).strict();

export const FiscalYearPatternUncheckedCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternUncheckedCreateWithoutOrganizationsInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  label: z.string(),
  startMonth: z.number().int(),
  endMonth: z.number().int()
}).strict();

export const FiscalYearPatternCreateOrConnectWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternCreateOrConnectWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => FiscalYearPatternWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FiscalYearPatternCreateWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUncheckedCreateWithoutOrganizationsInputSchema) ]),
}).strict();

export const UserRoleCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleCreateWithoutOrganizationInput> = z.object({
  id: z.string().uuid().optional(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserRolesInputSchema),
  role: z.lazy(() => RoleCreateNestedOneWithoutUserRolesInputSchema)
}).strict();

export const UserRoleUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  roleId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserRoleCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.UserRoleCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserRoleCreateManyOrganizationInputSchema),z.lazy(() => UserRoleCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RoleCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleCreateWithoutOrganizationInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutOwnedRolesInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdById: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RoleCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.RoleCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RoleCreateManyOrganizationInputSchema),z.lazy(() => RoleCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserCreateWithoutOwnedOrganizationsInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOwnedOrganizationsInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOwnedOrganizationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedOrganizationsInputSchema) ]),
}).strict();

export const UserCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserCreateWithoutOrganizationsInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOrganizationsInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema) ]),
}).strict();

export const StateUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.StateUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => StateUpdateWithoutOrganizationInputSchema),z.lazy(() => StateUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => StateCreateWithoutOrganizationInputSchema),z.lazy(() => StateUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => StateWhereInputSchema).optional()
}).strict();

export const StateUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.StateUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => StateWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StateUpdateWithoutOrganizationInputSchema),z.lazy(() => StateUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const StateUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.StateUpdateWithoutOrganizationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutStatesNestedInputSchema).optional(),
  cities: z.lazy(() => CityUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const StateUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.StateUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cities: z.lazy(() => CityUncheckedUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const CurrencyUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => CurrencyUpdateWithoutOrganizationInputSchema),z.lazy(() => CurrencyUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => CurrencyCreateWithoutOrganizationInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => CurrencyWhereInputSchema).optional()
}).strict();

export const CurrencyUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CurrencyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CurrencyUpdateWithoutOrganizationInputSchema),z.lazy(() => CurrencyUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const CurrencyUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyUpdateWithoutOrganizationInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutCurrencyNestedInputSchema).optional()
}).strict();

export const CurrencyUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CurrencyUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutCurrencyNestedInputSchema).optional()
}).strict();

export const TimeZoneUpsertWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneUpsertWithoutOrganizationInput> = z.object({
  update: z.union([ z.lazy(() => TimeZoneUpdateWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutOrganizationInputSchema) ]),
  where: z.lazy(() => TimeZoneWhereInputSchema).optional()
}).strict();

export const TimeZoneUpdateToOneWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneUpdateToOneWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TimeZoneWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TimeZoneUpdateWithoutOrganizationInputSchema),z.lazy(() => TimeZoneUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const TimeZoneUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneUpdateWithoutOrganizationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutTimeZoneNestedInputSchema).optional(),
  Country: z.lazy(() => CountryUpdateManyWithoutTimezonesNestedInputSchema).optional()
}).strict();

export const TimeZoneUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutTimeZoneNestedInputSchema).optional(),
  Country: z.lazy(() => CountryUncheckedUpdateManyWithoutTimezonesNestedInputSchema).optional()
}).strict();

export const LanguageUpsertWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageUpsertWithoutOrganizationsInput> = z.object({
  update: z.union([ z.lazy(() => LanguageUpdateWithoutOrganizationsInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutOrganizationsInputSchema) ]),
  create: z.union([ z.lazy(() => LanguageCreateWithoutOrganizationsInputSchema),z.lazy(() => LanguageUncheckedCreateWithoutOrganizationsInputSchema) ]),
  where: z.lazy(() => LanguageWhereInputSchema).optional()
}).strict();

export const LanguageUpdateToOneWithWhereWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageUpdateToOneWithWhereWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => LanguageWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LanguageUpdateWithoutOrganizationsInputSchema),z.lazy(() => LanguageUncheckedUpdateWithoutOrganizationsInputSchema) ]),
}).strict();

export const LanguageUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageUpdateWithoutOrganizationsInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nativeName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LanguageUncheckedUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.LanguageUncheckedUpdateWithoutOrganizationsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nativeName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndustryCategoryUpsertWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryUpsertWithoutOrganizationsInput> = z.object({
  update: z.union([ z.lazy(() => IndustryCategoryUpdateWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUncheckedUpdateWithoutOrganizationsInputSchema) ]),
  create: z.union([ z.lazy(() => IndustryCategoryCreateWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUncheckedCreateWithoutOrganizationsInputSchema) ]),
  where: z.lazy(() => IndustryCategoryWhereInputSchema).optional()
}).strict();

export const IndustryCategoryUpdateToOneWithWhereWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryUpdateToOneWithWhereWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => IndustryCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => IndustryCategoryUpdateWithoutOrganizationsInputSchema),z.lazy(() => IndustryCategoryUncheckedUpdateWithoutOrganizationsInputSchema) ]),
}).strict();

export const IndustryCategoryUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryUpdateWithoutOrganizationsInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndustryCategoryUncheckedUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.IndustryCategoryUncheckedUpdateWithoutOrganizationsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FiscalYearPatternUpsertWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternUpsertWithoutOrganizationsInput> = z.object({
  update: z.union([ z.lazy(() => FiscalYearPatternUpdateWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUncheckedUpdateWithoutOrganizationsInputSchema) ]),
  create: z.union([ z.lazy(() => FiscalYearPatternCreateWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUncheckedCreateWithoutOrganizationsInputSchema) ]),
  where: z.lazy(() => FiscalYearPatternWhereInputSchema).optional()
}).strict();

export const FiscalYearPatternUpdateToOneWithWhereWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternUpdateToOneWithWhereWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => FiscalYearPatternWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FiscalYearPatternUpdateWithoutOrganizationsInputSchema),z.lazy(() => FiscalYearPatternUncheckedUpdateWithoutOrganizationsInputSchema) ]),
}).strict();

export const FiscalYearPatternUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternUpdateWithoutOrganizationsInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  endMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FiscalYearPatternUncheckedUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.FiscalYearPatternUncheckedUpdateWithoutOrganizationsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  endMonth: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRoleUpdateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateWithoutOrganizationInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserRoleUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserRoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateManyMutationInputSchema),z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const RoleUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RoleUpdateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RoleUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateWithoutOrganizationInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const RoleUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateManyMutationInputSchema),z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpsertWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutOwnedOrganizationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedOrganizationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedOrganizationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutOwnedOrganizationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutOwnedOrganizationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedOrganizationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutOwnedOrganizationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOwnedOrganizationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOwnedOrganizationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationsInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutOrganizationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationsInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutOrganizationsInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lastLoginAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SubregionCreateWithoutRegionInputSchema: z.ZodType<Prisma.SubregionCreateWithoutRegionInput> = z.object({
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutSubregionInputSchema).optional()
}).strict();

export const SubregionUncheckedCreateWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUncheckedCreateWithoutRegionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutSubregionInputSchema).optional()
}).strict();

export const SubregionCreateOrConnectWithoutRegionInputSchema: z.ZodType<Prisma.SubregionCreateOrConnectWithoutRegionInput> = z.object({
  where: z.lazy(() => SubregionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubregionCreateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const SubregionCreateManyRegionInputEnvelopeSchema: z.ZodType<Prisma.SubregionCreateManyRegionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SubregionCreateManyRegionInputSchema),z.lazy(() => SubregionCreateManyRegionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CountryCreateWithoutRegionInputSchema: z.ZodType<Prisma.CountryCreateWithoutRegionInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutRegionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutRegionInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const CountryCreateManyRegionInputEnvelopeSchema: z.ZodType<Prisma.CountryCreateManyRegionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CountryCreateManyRegionInputSchema),z.lazy(() => CountryCreateManyRegionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SubregionUpsertWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUpsertWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => SubregionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubregionUpdateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedUpdateWithoutRegionInputSchema) ]),
  create: z.union([ z.lazy(() => SubregionCreateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const SubregionUpdateWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUpdateWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => SubregionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubregionUpdateWithoutRegionInputSchema),z.lazy(() => SubregionUncheckedUpdateWithoutRegionInputSchema) ]),
}).strict();

export const SubregionUpdateManyWithWhereWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUpdateManyWithWhereWithoutRegionInput> = z.object({
  where: z.lazy(() => SubregionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubregionUpdateManyMutationInputSchema),z.lazy(() => SubregionUncheckedUpdateManyWithoutRegionInputSchema) ]),
}).strict();

export const SubregionScalarWhereInputSchema: z.ZodType<Prisma.SubregionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubregionScalarWhereInputSchema),z.lazy(() => SubregionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubregionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubregionScalarWhereInputSchema),z.lazy(() => SubregionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  translations: z.lazy(() => JsonNullableFilterSchema).optional(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const CountryUpsertWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutRegionInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutRegionInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutRegionInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutRegionInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutRegionInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutRegionInputSchema) ]),
}).strict();

export const CountryScalarWhereInputSchema: z.ZodType<Prisma.CountryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CountryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CountryScalarWhereInputSchema),z.lazy(() => CountryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iso3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  iso2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  numericCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  capital: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tld: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  native: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emoji: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emojiU: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  regionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  subregionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  currencyId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  phoneCodeId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const RegionCreateWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionCreateWithoutSubregionsInput> = z.object({
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUncheckedCreateWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionUncheckedCreateWithoutSubregionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionCreateOrConnectWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionCreateOrConnectWithoutSubregionsInput> = z.object({
  where: z.lazy(() => RegionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RegionCreateWithoutSubregionsInputSchema),z.lazy(() => RegionUncheckedCreateWithoutSubregionsInputSchema) ]),
}).strict();

export const CountryCreateWithoutSubregionInputSchema: z.ZodType<Prisma.CountryCreateWithoutSubregionInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutSubregionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutSubregionInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutSubregionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema) ]),
}).strict();

export const CountryCreateManySubregionInputEnvelopeSchema: z.ZodType<Prisma.CountryCreateManySubregionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CountryCreateManySubregionInputSchema),z.lazy(() => CountryCreateManySubregionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RegionUpsertWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionUpsertWithoutSubregionsInput> = z.object({
  update: z.union([ z.lazy(() => RegionUpdateWithoutSubregionsInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutSubregionsInputSchema) ]),
  create: z.union([ z.lazy(() => RegionCreateWithoutSubregionsInputSchema),z.lazy(() => RegionUncheckedCreateWithoutSubregionsInputSchema) ]),
  where: z.lazy(() => RegionWhereInputSchema).optional()
}).strict();

export const RegionUpdateToOneWithWhereWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionUpdateToOneWithWhereWithoutSubregionsInput> = z.object({
  where: z.lazy(() => RegionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RegionUpdateWithoutSubregionsInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutSubregionsInputSchema) ]),
}).strict();

export const RegionUpdateWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionUpdateWithoutSubregionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionUncheckedUpdateWithoutSubregionsInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateWithoutSubregionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const CountryUpsertWithWhereUniqueWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutSubregionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutSubregionInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedCreateWithoutSubregionInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutSubregionInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutSubregionInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutSubregionInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutSubregionInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutSubregionInputSchema) ]),
}).strict();

export const CountryCreateWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryCreateWithoutCurrencyInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutCurrencyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutCurrencyInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema) ]),
}).strict();

export const CountryCreateManyCurrencyInputEnvelopeSchema: z.ZodType<Prisma.CountryCreateManyCurrencyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CountryCreateManyCurrencyInputSchema),z.lazy(() => CountryCreateManyCurrencyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutCurrencyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutCurrencyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutCurrencyInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema) ]),
}).strict();

export const OrganizationCreateManyCurrencyInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyCurrencyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyCurrencyInputSchema),z.lazy(() => OrganizationCreateManyCurrencyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CountryUpsertWithWhereUniqueWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutCurrencyInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutCurrencyInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCurrencyInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutCurrencyInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutCurrencyInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutCurrencyInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutCurrencyInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutCurrencyInputSchema) ]),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutCurrencyInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCurrencyInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCurrencyInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutCurrencyInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutCurrencyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCurrencyInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutCurrencyInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutCurrencyInputSchema) ]),
}).strict();

export const CountryCreateWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryCreateWithoutPhoneCodeInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutPhoneCodeInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutPhoneCodeInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema) ]),
}).strict();

export const CountryCreateManyPhoneCodeInputEnvelopeSchema: z.ZodType<Prisma.CountryCreateManyPhoneCodeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CountryCreateManyPhoneCodeInputSchema),z.lazy(() => CountryCreateManyPhoneCodeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CountryUpsertWithWhereUniqueWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutPhoneCodeInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutPhoneCodeInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedCreateWithoutPhoneCodeInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutPhoneCodeInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutPhoneCodeInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutPhoneCodeInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutPhoneCodeInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutPhoneCodeInputSchema) ]),
}).strict();

export const CountryCreateWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryCreateWithoutTimeZoneInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutTimeZoneInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema) ]),
}).strict();

export const CountryCreateWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryCreateWithoutTimezonesInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutTimezonesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutTimezonesInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutTimeZoneInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutTimeZoneInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema) ]),
}).strict();

export const OrganizationCreateManyTimeZoneInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyTimeZoneInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyTimeZoneInputSchema),z.lazy(() => OrganizationCreateManyTimeZoneInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CountryUpsertWithWhereUniqueWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutTimeZoneInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimeZoneInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutTimeZoneInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutTimeZoneInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutTimeZoneInputSchema) ]),
}).strict();

export const CountryUpsertWithWhereUniqueWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUpsertWithWhereUniqueWithoutTimezonesInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CountryUpdateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutTimezonesInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTimezonesInputSchema) ]),
}).strict();

export const CountryUpdateWithWhereUniqueWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUpdateWithWhereUniqueWithoutTimezonesInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateWithoutTimezonesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutTimezonesInputSchema) ]),
}).strict();

export const CountryUpdateManyWithWhereWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUpdateManyWithWhereWithoutTimezonesInput> = z.object({
  where: z.lazy(() => CountryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CountryUpdateManyMutationInputSchema),z.lazy(() => CountryUncheckedUpdateManyWithoutTimezonesInputSchema) ]),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTimeZoneInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTimeZoneInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutTimeZoneInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTimeZoneInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutTimeZoneInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutTimeZoneInputSchema) ]),
}).strict();

export const CountryCreateWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryCreateWithoutTranslationsInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutTranslationsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutTranslationsInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutTranslationsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTranslationsInputSchema) ]),
}).strict();

export const CountryUpsertWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryUpsertWithoutTranslationsInput> = z.object({
  update: z.union([ z.lazy(() => CountryUpdateWithoutTranslationsInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutTranslationsInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutTranslationsInputSchema),z.lazy(() => CountryUncheckedCreateWithoutTranslationsInputSchema) ]),
  where: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const CountryUpdateToOneWithWhereWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryUpdateToOneWithWhereWithoutTranslationsInput> = z.object({
  where: z.lazy(() => CountryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountryUpdateWithoutTranslationsInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutTranslationsInputSchema) ]),
}).strict();

export const CountryUpdateWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryUpdateWithoutTranslationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutTranslationsInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutTranslationsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const RegionCreateWithoutCountriesInputSchema: z.ZodType<Prisma.RegionCreateWithoutCountriesInput> = z.object({
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  subregions: z.lazy(() => SubregionCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionUncheckedCreateWithoutCountriesInputSchema: z.ZodType<Prisma.RegionUncheckedCreateWithoutCountriesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  subregions: z.lazy(() => SubregionUncheckedCreateNestedManyWithoutRegionInputSchema).optional()
}).strict();

export const RegionCreateOrConnectWithoutCountriesInputSchema: z.ZodType<Prisma.RegionCreateOrConnectWithoutCountriesInput> = z.object({
  where: z.lazy(() => RegionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RegionCreateWithoutCountriesInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const SubregionCreateWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionCreateWithoutCountriesInput> = z.object({
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutSubregionsInputSchema)
}).strict();

export const SubregionUncheckedCreateWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionUncheckedCreateWithoutCountriesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int()
}).strict();

export const SubregionCreateOrConnectWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionCreateOrConnectWithoutCountriesInput> = z.object({
  where: z.lazy(() => SubregionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubregionCreateWithoutCountriesInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const CurrencyCreateWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyCreateWithoutCountriesInput> = z.object({
  code: z.string(),
  name: z.string().optional().nullable(),
  symbol: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutCurrencyInputSchema).optional()
}).strict();

export const CurrencyUncheckedCreateWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyUncheckedCreateWithoutCountriesInput> = z.object({
  id: z.number().int().optional(),
  code: z.string(),
  name: z.string().optional().nullable(),
  symbol: z.string().optional().nullable(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutCurrencyInputSchema).optional()
}).strict();

export const CurrencyCreateOrConnectWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyCreateOrConnectWithoutCountriesInput> = z.object({
  where: z.lazy(() => CurrencyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CurrencyCreateWithoutCountriesInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const PhoneCodeCreateWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeCreateWithoutCountriesInput> = z.object({
  code: z.string()
}).strict();

export const PhoneCodeUncheckedCreateWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeUncheckedCreateWithoutCountriesInput> = z.object({
  id: z.number().int().optional(),
  code: z.string()
}).strict();

export const PhoneCodeCreateOrConnectWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeCreateOrConnectWithoutCountriesInput> = z.object({
  where: z.lazy(() => PhoneCodeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PhoneCodeCreateWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const TimeZoneCreateWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneCreateWithoutCountryInput> = z.object({
  name: z.string(),
  offset: z.string().optional().nullable(),
  countries: z.lazy(() => CountryCreateNestedManyWithoutTimeZoneInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutTimeZoneInputSchema).optional()
}).strict();

export const TimeZoneUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUncheckedCreateWithoutCountryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  offset: z.string().optional().nullable(),
  countries: z.lazy(() => CountryUncheckedCreateNestedManyWithoutTimeZoneInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutTimeZoneInputSchema).optional()
}).strict();

export const TimeZoneCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => TimeZoneWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const TranslationCreateWithoutCountryInputSchema: z.ZodType<Prisma.TranslationCreateWithoutCountryInput> = z.object({
  language: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const TranslationUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUncheckedCreateWithoutCountryInput> = z.object({
  id: z.number().int().optional(),
  language: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const TranslationCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.TranslationCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => TranslationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TranslationCreateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const TranslationCreateManyCountryInputEnvelopeSchema: z.ZodType<Prisma.TranslationCreateManyCountryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TranslationCreateManyCountryInputSchema),z.lazy(() => TranslationCreateManyCountryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const StateCreateWithoutCountryInputSchema: z.ZodType<Prisma.StateCreateWithoutCountryInput> = z.object({
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  cities: z.lazy(() => CityCreateNestedManyWithoutStateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.StateUncheckedCreateWithoutCountryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  cities: z.lazy(() => CityUncheckedCreateNestedManyWithoutStateInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.StateCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => StateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StateCreateWithoutCountryInputSchema),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const StateCreateManyCountryInputEnvelopeSchema: z.ZodType<Prisma.StateCreateManyCountryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => StateCreateManyCountryInputSchema),z.lazy(() => StateCreateManyCountryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TimeZoneCreateWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneCreateWithoutCountriesInput> = z.object({
  name: z.string(),
  offset: z.string().optional().nullable(),
  Country: z.lazy(() => CountryCreateNestedManyWithoutTimezonesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutTimeZoneInputSchema).optional()
}).strict();

export const TimeZoneUncheckedCreateWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUncheckedCreateWithoutCountriesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  offset: z.string().optional().nullable(),
  Country: z.lazy(() => CountryUncheckedCreateNestedManyWithoutTimezonesInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutTimeZoneInputSchema).optional()
}).strict();

export const TimeZoneCreateOrConnectWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneCreateOrConnectWithoutCountriesInput> = z.object({
  where: z.lazy(() => TimeZoneWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const CityCreateWithoutCountryInputSchema: z.ZodType<Prisma.CityCreateWithoutCountryInput> = z.object({
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  state: z.lazy(() => StateCreateNestedOneWithoutCitiesInputSchema)
}).strict();

export const CityUncheckedCreateWithoutCountryInputSchema: z.ZodType<Prisma.CityUncheckedCreateWithoutCountryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  stateId: z.number().int()
}).strict();

export const CityCreateOrConnectWithoutCountryInputSchema: z.ZodType<Prisma.CityCreateOrConnectWithoutCountryInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CityCreateWithoutCountryInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const CityCreateManyCountryInputEnvelopeSchema: z.ZodType<Prisma.CityCreateManyCountryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CityCreateManyCountryInputSchema),z.lazy(() => CityCreateManyCountryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RegionUpsertWithoutCountriesInputSchema: z.ZodType<Prisma.RegionUpsertWithoutCountriesInput> = z.object({
  update: z.union([ z.lazy(() => RegionUpdateWithoutCountriesInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => RegionCreateWithoutCountriesInputSchema),z.lazy(() => RegionUncheckedCreateWithoutCountriesInputSchema) ]),
  where: z.lazy(() => RegionWhereInputSchema).optional()
}).strict();

export const RegionUpdateToOneWithWhereWithoutCountriesInputSchema: z.ZodType<Prisma.RegionUpdateToOneWithWhereWithoutCountriesInput> = z.object({
  where: z.lazy(() => RegionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RegionUpdateWithoutCountriesInputSchema),z.lazy(() => RegionUncheckedUpdateWithoutCountriesInputSchema) ]),
}).strict();

export const RegionUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.RegionUpdateWithoutCountriesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregions: z.lazy(() => SubregionUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const RegionUncheckedUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.RegionUncheckedUpdateWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregions: z.lazy(() => SubregionUncheckedUpdateManyWithoutRegionNestedInputSchema).optional()
}).strict();

export const SubregionUpsertWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionUpsertWithoutCountriesInput> = z.object({
  update: z.union([ z.lazy(() => SubregionUpdateWithoutCountriesInputSchema),z.lazy(() => SubregionUncheckedUpdateWithoutCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => SubregionCreateWithoutCountriesInputSchema),z.lazy(() => SubregionUncheckedCreateWithoutCountriesInputSchema) ]),
  where: z.lazy(() => SubregionWhereInputSchema).optional()
}).strict();

export const SubregionUpdateToOneWithWhereWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionUpdateToOneWithWhereWithoutCountriesInput> = z.object({
  where: z.lazy(() => SubregionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SubregionUpdateWithoutCountriesInputSchema),z.lazy(() => SubregionUncheckedUpdateWithoutCountriesInputSchema) ]),
}).strict();

export const SubregionUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionUpdateWithoutCountriesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneRequiredWithoutSubregionsNestedInputSchema).optional()
}).strict();

export const SubregionUncheckedUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.SubregionUncheckedUpdateWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CurrencyUpsertWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyUpsertWithoutCountriesInput> = z.object({
  update: z.union([ z.lazy(() => CurrencyUpdateWithoutCountriesInputSchema),z.lazy(() => CurrencyUncheckedUpdateWithoutCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => CurrencyCreateWithoutCountriesInputSchema),z.lazy(() => CurrencyUncheckedCreateWithoutCountriesInputSchema) ]),
  where: z.lazy(() => CurrencyWhereInputSchema).optional()
}).strict();

export const CurrencyUpdateToOneWithWhereWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyUpdateToOneWithWhereWithoutCountriesInput> = z.object({
  where: z.lazy(() => CurrencyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CurrencyUpdateWithoutCountriesInputSchema),z.lazy(() => CurrencyUncheckedUpdateWithoutCountriesInputSchema) ]),
}).strict();

export const CurrencyUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyUpdateWithoutCountriesInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutCurrencyNestedInputSchema).optional()
}).strict();

export const CurrencyUncheckedUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.CurrencyUncheckedUpdateWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutCurrencyNestedInputSchema).optional()
}).strict();

export const PhoneCodeUpsertWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeUpsertWithoutCountriesInput> = z.object({
  update: z.union([ z.lazy(() => PhoneCodeUpdateWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUncheckedUpdateWithoutCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => PhoneCodeCreateWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUncheckedCreateWithoutCountriesInputSchema) ]),
  where: z.lazy(() => PhoneCodeWhereInputSchema).optional()
}).strict();

export const PhoneCodeUpdateToOneWithWhereWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeUpdateToOneWithWhereWithoutCountriesInput> = z.object({
  where: z.lazy(() => PhoneCodeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PhoneCodeUpdateWithoutCountriesInputSchema),z.lazy(() => PhoneCodeUncheckedUpdateWithoutCountriesInputSchema) ]),
}).strict();

export const PhoneCodeUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeUpdateWithoutCountriesInput> = z.object({
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PhoneCodeUncheckedUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.PhoneCodeUncheckedUpdateWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeZoneUpsertWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUpsertWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => TimeZoneWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeZoneUpdateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const TimeZoneUpdateWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUpdateWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => TimeZoneWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeZoneUpdateWithoutCountryInputSchema),z.lazy(() => TimeZoneUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const TimeZoneUpdateManyWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUpdateManyWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => TimeZoneScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeZoneUpdateManyMutationInputSchema),z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryInputSchema) ]),
}).strict();

export const TimeZoneScalarWhereInputSchema: z.ZodType<Prisma.TimeZoneScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeZoneScalarWhereInputSchema),z.lazy(() => TimeZoneScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeZoneScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeZoneScalarWhereInputSchema),z.lazy(() => TimeZoneScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  offset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TranslationUpsertWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUpsertWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => TranslationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TranslationUpdateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => TranslationCreateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const TranslationUpdateWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUpdateWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => TranslationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TranslationUpdateWithoutCountryInputSchema),z.lazy(() => TranslationUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const TranslationUpdateManyWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUpdateManyWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => TranslationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TranslationUpdateManyMutationInputSchema),z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryInputSchema) ]),
}).strict();

export const TranslationScalarWhereInputSchema: z.ZodType<Prisma.TranslationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TranslationScalarWhereInputSchema),z.lazy(() => TranslationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TranslationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TranslationScalarWhereInputSchema),z.lazy(() => TranslationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  countryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const StateUpsertWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.StateUpsertWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => StateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => StateUpdateWithoutCountryInputSchema),z.lazy(() => StateUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => StateCreateWithoutCountryInputSchema),z.lazy(() => StateUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const StateUpdateWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.StateUpdateWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => StateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => StateUpdateWithoutCountryInputSchema),z.lazy(() => StateUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const StateUpdateManyWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.StateUpdateManyWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => StateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => StateUpdateManyMutationInputSchema),z.lazy(() => StateUncheckedUpdateManyWithoutCountryInputSchema) ]),
}).strict();

export const StateScalarWhereInputSchema: z.ZodType<Prisma.StateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StateScalarWhereInputSchema),z.lazy(() => StateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StateScalarWhereInputSchema),z.lazy(() => StateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iso2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fipsCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const TimeZoneUpsertWithWhereUniqueWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUpsertWithWhereUniqueWithoutCountriesInput> = z.object({
  where: z.lazy(() => TimeZoneWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeZoneUpdateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedUpdateWithoutCountriesInputSchema) ]),
  create: z.union([ z.lazy(() => TimeZoneCreateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedCreateWithoutCountriesInputSchema) ]),
}).strict();

export const TimeZoneUpdateWithWhereUniqueWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUpdateWithWhereUniqueWithoutCountriesInput> = z.object({
  where: z.lazy(() => TimeZoneWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeZoneUpdateWithoutCountriesInputSchema),z.lazy(() => TimeZoneUncheckedUpdateWithoutCountriesInputSchema) ]),
}).strict();

export const TimeZoneUpdateManyWithWhereWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUpdateManyWithWhereWithoutCountriesInput> = z.object({
  where: z.lazy(() => TimeZoneScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeZoneUpdateManyMutationInputSchema),z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesInputSchema) ]),
}).strict();

export const CityUpsertWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.CityUpsertWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CityUpdateWithoutCountryInputSchema),z.lazy(() => CityUncheckedUpdateWithoutCountryInputSchema) ]),
  create: z.union([ z.lazy(() => CityCreateWithoutCountryInputSchema),z.lazy(() => CityUncheckedCreateWithoutCountryInputSchema) ]),
}).strict();

export const CityUpdateWithWhereUniqueWithoutCountryInputSchema: z.ZodType<Prisma.CityUpdateWithWhereUniqueWithoutCountryInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CityUpdateWithoutCountryInputSchema),z.lazy(() => CityUncheckedUpdateWithoutCountryInputSchema) ]),
}).strict();

export const CityUpdateManyWithWhereWithoutCountryInputSchema: z.ZodType<Prisma.CityUpdateManyWithWhereWithoutCountryInput> = z.object({
  where: z.lazy(() => CityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CityUpdateManyMutationInputSchema),z.lazy(() => CityUncheckedUpdateManyWithoutCountryInputSchema) ]),
}).strict();

export const CityScalarWhereInputSchema: z.ZodType<Prisma.CityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CityScalarWhereInputSchema),z.lazy(() => CityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stateCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  countryCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wikiDataId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stateId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  countryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const CountryCreateWithoutStatesInputSchema: z.ZodType<Prisma.CountryCreateWithoutStatesInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutStatesInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutStatesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional(),
  City: z.lazy(() => CityUncheckedCreateNestedManyWithoutCountryInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutStatesInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutStatesInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutStatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutStatesInputSchema) ]),
}).strict();

export const CityCreateWithoutStateInputSchema: z.ZodType<Prisma.CityCreateWithoutStateInput> = z.object({
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  country: z.lazy(() => CountryCreateNestedOneWithoutCityInputSchema)
}).strict();

export const CityUncheckedCreateWithoutStateInputSchema: z.ZodType<Prisma.CityUncheckedCreateWithoutStateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  countryId: z.number().int()
}).strict();

export const CityCreateOrConnectWithoutStateInputSchema: z.ZodType<Prisma.CityCreateOrConnectWithoutStateInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CityCreateWithoutStateInputSchema),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema) ]),
}).strict();

export const CityCreateManyStateInputEnvelopeSchema: z.ZodType<Prisma.CityCreateManyStateInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CityCreateManyStateInputSchema),z.lazy(() => CityCreateManyStateInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutStateInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutStateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutStateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutStateInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutStateInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema) ]),
}).strict();

export const OrganizationCreateManyStateInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyStateInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyStateInputSchema),z.lazy(() => OrganizationCreateManyStateInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CountryUpsertWithoutStatesInputSchema: z.ZodType<Prisma.CountryUpsertWithoutStatesInput> = z.object({
  update: z.union([ z.lazy(() => CountryUpdateWithoutStatesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutStatesInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutStatesInputSchema),z.lazy(() => CountryUncheckedCreateWithoutStatesInputSchema) ]),
  where: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const CountryUpdateToOneWithWhereWithoutStatesInputSchema: z.ZodType<Prisma.CountryUpdateToOneWithWhereWithoutStatesInput> = z.object({
  where: z.lazy(() => CountryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountryUpdateWithoutStatesInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutStatesInputSchema) ]),
}).strict();

export const CountryUpdateWithoutStatesInputSchema: z.ZodType<Prisma.CountryUpdateWithoutStatesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutStatesInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutStatesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CityUpsertWithWhereUniqueWithoutStateInputSchema: z.ZodType<Prisma.CityUpsertWithWhereUniqueWithoutStateInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CityUpdateWithoutStateInputSchema),z.lazy(() => CityUncheckedUpdateWithoutStateInputSchema) ]),
  create: z.union([ z.lazy(() => CityCreateWithoutStateInputSchema),z.lazy(() => CityUncheckedCreateWithoutStateInputSchema) ]),
}).strict();

export const CityUpdateWithWhereUniqueWithoutStateInputSchema: z.ZodType<Prisma.CityUpdateWithWhereUniqueWithoutStateInput> = z.object({
  where: z.lazy(() => CityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CityUpdateWithoutStateInputSchema),z.lazy(() => CityUncheckedUpdateWithoutStateInputSchema) ]),
}).strict();

export const CityUpdateManyWithWhereWithoutStateInputSchema: z.ZodType<Prisma.CityUpdateManyWithWhereWithoutStateInput> = z.object({
  where: z.lazy(() => CityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CityUpdateManyMutationInputSchema),z.lazy(() => CityUncheckedUpdateManyWithoutStateInputSchema) ]),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutStateInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutStateInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutStateInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutStateInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutStateInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutStateInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutStateInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutStateInputSchema) ]),
}).strict();

export const StateCreateWithoutCitiesInputSchema: z.ZodType<Prisma.StateCreateWithoutCitiesInput> = z.object({
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  country: z.lazy(() => CountryCreateNestedOneWithoutStatesInputSchema),
  Organization: z.lazy(() => OrganizationCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateUncheckedCreateWithoutCitiesInputSchema: z.ZodType<Prisma.StateUncheckedCreateWithoutCitiesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  countryId: z.number().int(),
  Organization: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutStateInputSchema).optional()
}).strict();

export const StateCreateOrConnectWithoutCitiesInputSchema: z.ZodType<Prisma.StateCreateOrConnectWithoutCitiesInput> = z.object({
  where: z.lazy(() => StateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StateCreateWithoutCitiesInputSchema),z.lazy(() => StateUncheckedCreateWithoutCitiesInputSchema) ]),
}).strict();

export const CountryCreateWithoutCityInputSchema: z.ZodType<Prisma.CountryCreateWithoutCityInput> = z.object({
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  region: z.lazy(() => RegionCreateNestedOneWithoutCountriesInputSchema).optional(),
  subregion: z.lazy(() => SubregionCreateNestedOneWithoutCountriesInputSchema).optional(),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutCountriesInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeCreateNestedOneWithoutCountriesInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryUncheckedCreateWithoutCityInputSchema: z.ZodType<Prisma.CountryUncheckedCreateWithoutCityInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  states: z.lazy(() => StateUncheckedCreateNestedManyWithoutCountryInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedCreateNestedManyWithoutCountriesInputSchema).optional()
}).strict();

export const CountryCreateOrConnectWithoutCityInputSchema: z.ZodType<Prisma.CountryCreateOrConnectWithoutCityInput> = z.object({
  where: z.lazy(() => CountryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CountryCreateWithoutCityInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCityInputSchema) ]),
}).strict();

export const StateUpsertWithoutCitiesInputSchema: z.ZodType<Prisma.StateUpsertWithoutCitiesInput> = z.object({
  update: z.union([ z.lazy(() => StateUpdateWithoutCitiesInputSchema),z.lazy(() => StateUncheckedUpdateWithoutCitiesInputSchema) ]),
  create: z.union([ z.lazy(() => StateCreateWithoutCitiesInputSchema),z.lazy(() => StateUncheckedCreateWithoutCitiesInputSchema) ]),
  where: z.lazy(() => StateWhereInputSchema).optional()
}).strict();

export const StateUpdateToOneWithWhereWithoutCitiesInputSchema: z.ZodType<Prisma.StateUpdateToOneWithWhereWithoutCitiesInput> = z.object({
  where: z.lazy(() => StateWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StateUpdateWithoutCitiesInputSchema),z.lazy(() => StateUncheckedUpdateWithoutCitiesInputSchema) ]),
}).strict();

export const StateUpdateWithoutCitiesInputSchema: z.ZodType<Prisma.StateUpdateWithoutCitiesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutStatesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const StateUncheckedUpdateWithoutCitiesInputSchema: z.ZodType<Prisma.StateUncheckedUpdateWithoutCitiesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const CountryUpsertWithoutCityInputSchema: z.ZodType<Prisma.CountryUpsertWithoutCityInput> = z.object({
  update: z.union([ z.lazy(() => CountryUpdateWithoutCityInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutCityInputSchema) ]),
  create: z.union([ z.lazy(() => CountryCreateWithoutCityInputSchema),z.lazy(() => CountryUncheckedCreateWithoutCityInputSchema) ]),
  where: z.lazy(() => CountryWhereInputSchema).optional()
}).strict();

export const CountryUpdateToOneWithWhereWithoutCityInputSchema: z.ZodType<Prisma.CountryUpdateToOneWithWhereWithoutCityInput> = z.object({
  where: z.lazy(() => CountryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CountryUpdateWithoutCityInputSchema),z.lazy(() => CountryUncheckedUpdateWithoutCityInputSchema) ]),
}).strict();

export const CountryUpdateWithoutCityInputSchema: z.ZodType<Prisma.CountryUpdateWithoutCityInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutCityInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutCityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutRolesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutRolesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const UserCreateWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserCreateWithoutOwnedRolesInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOwnedRolesInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOwnedRolesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedRolesInputSchema) ]),
}).strict();

export const RolePermissionCreateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateWithoutRoleInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  permission: z.lazy(() => PermissionCreateNestedOneWithoutRolePermissionsInputSchema)
}).strict();

export const RolePermissionUncheckedCreateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateWithoutRoleInput> = z.object({
  id: z.number().int().optional(),
  permissionId: z.number().int(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RolePermissionCreateOrConnectWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateOrConnectWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionCreateManyRoleInputEnvelopeSchema: z.ZodType<Prisma.RolePermissionCreateManyRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RolePermissionCreateManyRoleInputSchema),z.lazy(() => RolePermissionCreateManyRoleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RoleCustomPermissionCreateWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateWithoutRoleInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  customPermission: z.lazy(() => CustomPermissionCreateNestedOneWithoutRoleCustomPermissionsInputSchema),
  permissionApprovals: z.lazy(() => PermissionApprovalCreateNestedManyWithoutRoleCustomPermissionInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedCreateWithoutRoleInput> = z.object({
  id: z.number().int().optional(),
  customPermissionId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  permissionApprovals: z.lazy(() => PermissionApprovalUncheckedCreateNestedManyWithoutRoleCustomPermissionInputSchema).optional()
}).strict();

export const RoleCustomPermissionCreateOrConnectWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateOrConnectWithoutRoleInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const RoleCustomPermissionCreateManyRoleInputEnvelopeSchema: z.ZodType<Prisma.RoleCustomPermissionCreateManyRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RoleCustomPermissionCreateManyRoleInputSchema),z.lazy(() => RoleCustomPermissionCreateManyRoleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserRoleCreateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleCreateWithoutRoleInput> = z.object({
  id: z.string().uuid().optional(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserRolesInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUserRolesInputSchema)
}).strict();

export const UserRoleUncheckedCreateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateWithoutRoleInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  organizationId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleCreateOrConnectWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleCreateOrConnectWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const UserRoleCreateManyRoleInputEnvelopeSchema: z.ZodType<Prisma.UserRoleCreateManyRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserRoleCreateManyRoleInputSchema),z.lazy(() => UserRoleCreateManyRoleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutRolesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRolesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserUpsertWithoutOwnedRolesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutOwnedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedRolesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOwnedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutOwnedRolesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutOwnedRolesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutOwnedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOwnedRolesInputSchema) ]),
}).strict();

export const UserUpdateWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserUpdateWithoutOwnedRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOwnedRolesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOwnedRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpsertWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutRoleInputSchema) ]),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionUpdateManyWithWhereWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithWhereWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateManyMutationInputSchema),z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionScalarWhereInputSchema: z.ZodType<Prisma.RolePermissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  conditions: z.lazy(() => JsonNullableFilterSchema).optional(),
  grantedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const RoleCustomPermissionUpsertWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpsertWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateWithoutRoleInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const RoleCustomPermissionUpdateWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithoutRoleInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateWithoutRoleInputSchema) ]),
}).strict();

export const RoleCustomPermissionUpdateManyWithWhereWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateManyWithWhereWithoutRoleInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RoleCustomPermissionUpdateManyMutationInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutRoleInputSchema) ]),
}).strict();

export const RoleCustomPermissionScalarWhereInputSchema: z.ZodType<Prisma.RoleCustomPermissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleCustomPermissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),z.lazy(() => RoleCustomPermissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customPermissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  conditions: z.lazy(() => JsonNullableFilterSchema).optional(),
  approvalRequired: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  grantedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  grantedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpsertWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRoleUpdateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutRoleInputSchema) ]),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpdateWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutRoleInputSchema) ]),
}).strict();

export const UserRoleUpdateManyWithWhereWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithWhereWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateManyMutationInputSchema),z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleInputSchema) ]),
}).strict();

export const UserCreateWithoutUserRolesInputSchema: z.ZodType<Prisma.UserCreateWithoutUserRolesInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserRolesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserRolesInput> = z.object({
  id: z.string().uuid().optional(),
  password: z.string().optional().nullable(),
  lastLoginAt: z.coerce.date().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOwnedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserRolesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserRolesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRolesInputSchema) ]),
}).strict();

export const RoleCreateWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleCreateWithoutUserRolesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRolesInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutOwnedRolesInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUncheckedCreateWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutUserRolesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdById: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutUserRolesInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutUserRolesInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUserRolesInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutUserRolesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  inventoryStartDate: z.coerce.date(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  state: z.lazy(() => StateCreateNestedOneWithoutOrganizationInputSchema),
  currency: z.lazy(() => CurrencyCreateNestedOneWithoutOrganizationInputSchema),
  timeZone: z.lazy(() => TimeZoneCreateNestedOneWithoutOrganizationInputSchema),
  language: z.lazy(() => LanguageCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternCreateNestedOneWithoutOrganizationsInputSchema).optional(),
  roles: z.lazy(() => RoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ownedBy: z.lazy(() => UserCreateNestedOneWithoutOwnedOrganizationsInputSchema),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutUserRolesInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationsInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutUserRolesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUserRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUserRolesInputSchema) ]),
}).strict();

export const UserUpsertWithoutUserRolesInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserRolesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRolesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRolesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserRolesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserRolesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRolesInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserRolesInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserRolesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  organizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const RoleUpsertWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleUpsertWithoutUserRolesInput> = z.object({
  update: z.union([ z.lazy(() => RoleUpdateWithoutUserRolesInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUserRolesInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutUserRolesInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUserRolesInputSchema) ]),
  where: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const RoleUpdateToOneWithWhereWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleUpdateToOneWithWhereWithoutUserRolesInput> = z.object({
  where: z.lazy(() => RoleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RoleUpdateWithoutUserRolesInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUserRolesInputSchema) ]),
}).strict();

export const RoleUpdateWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleUpdateWithoutUserRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRolesNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedRolesNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutUserRolesInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutUserRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutUserRolesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutUserRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUserRolesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUserRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUserRolesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutUserRolesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutUserRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUserRolesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutUserRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutUserRolesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutUserRolesInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const PermissionCreateWithoutActionInputSchema: z.ZodType<Prisma.PermissionCreateWithoutActionInput> = z.object({
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional(),
  resource: z.lazy(() => ResourceCreateNestedOneWithoutPermissionsInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUncheckedCreateWithoutActionInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutActionInput> = z.object({
  id: z.number().int().optional(),
  resourceId: z.number().int(),
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionCreateOrConnectWithoutActionInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutActionInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema) ]),
}).strict();

export const PermissionCreateManyActionInputEnvelopeSchema: z.ZodType<Prisma.PermissionCreateManyActionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PermissionCreateManyActionInputSchema),z.lazy(() => PermissionCreateManyActionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PermissionUpsertWithWhereUniqueWithoutActionInputSchema: z.ZodType<Prisma.PermissionUpsertWithWhereUniqueWithoutActionInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PermissionUpdateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutActionInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutActionInputSchema) ]),
}).strict();

export const PermissionUpdateWithWhereUniqueWithoutActionInputSchema: z.ZodType<Prisma.PermissionUpdateWithWhereUniqueWithoutActionInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutActionInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutActionInputSchema) ]),
}).strict();

export const PermissionUpdateManyWithWhereWithoutActionInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithWhereWithoutActionInput> = z.object({
  where: z.lazy(() => PermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateManyMutationInputSchema),z.lazy(() => PermissionUncheckedUpdateManyWithoutActionInputSchema) ]),
}).strict();

export const PermissionScalarWhereInputSchema: z.ZodType<Prisma.PermissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  actionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  resourceId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDangerous: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
}).strict();

export const PermissionCreateWithoutResourceInputSchema: z.ZodType<Prisma.PermissionCreateWithoutResourceInput> = z.object({
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional(),
  action: z.lazy(() => ActionCreateNestedOneWithoutPermissionsInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUncheckedCreateWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutResourceInput> = z.object({
  id: z.number().int().optional(),
  actionId: z.number().int(),
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionCreateOrConnectWithoutResourceInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutResourceInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema) ]),
}).strict();

export const PermissionCreateManyResourceInputEnvelopeSchema: z.ZodType<Prisma.PermissionCreateManyResourceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PermissionCreateManyResourceInputSchema),z.lazy(() => PermissionCreateManyResourceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PermissionUpsertWithWhereUniqueWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUpsertWithWhereUniqueWithoutResourceInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PermissionUpdateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutResourceInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutResourceInputSchema) ]),
}).strict();

export const PermissionUpdateWithWhereUniqueWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUpdateWithWhereUniqueWithoutResourceInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutResourceInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutResourceInputSchema) ]),
}).strict();

export const PermissionUpdateManyWithWhereWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithWhereWithoutResourceInput> = z.object({
  where: z.lazy(() => PermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateManyMutationInputSchema),z.lazy(() => PermissionUncheckedUpdateManyWithoutResourceInputSchema) ]),
}).strict();

export const ActionCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionCreateWithoutPermissionsInput> = z.object({
  name: z.lazy(() => ActionNameSchema),
  description: z.string().optional().nullable()
}).strict();

export const ActionUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionUncheckedCreateWithoutPermissionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ActionNameSchema),
  description: z.string().optional().nullable()
}).strict();

export const ActionCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => ActionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ActionCreateWithoutPermissionsInputSchema),z.lazy(() => ActionUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const ResourceCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceCreateWithoutPermissionsInput> = z.object({
  name: z.lazy(() => ResourceNameSchema),
  description: z.string().optional().nullable()
}).strict();

export const ResourceUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceUncheckedCreateWithoutPermissionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.lazy(() => ResourceNameSchema),
  description: z.string().optional().nullable()
}).strict();

export const ResourceCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => ResourceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ResourceCreateWithoutPermissionsInputSchema),z.lazy(() => ResourceUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const RolePermissionCreateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateWithoutPermissionInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  role: z.lazy(() => RoleCreateNestedOneWithoutRolePermissionsInputSchema)
}).strict();

export const RolePermissionUncheckedCreateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateWithoutPermissionInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RolePermissionCreateOrConnectWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateOrConnectWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionCreateManyPermissionInputEnvelopeSchema: z.ZodType<Prisma.RolePermissionCreateManyPermissionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RolePermissionCreateManyPermissionInputSchema),z.lazy(() => RolePermissionCreateManyPermissionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ActionUpsertWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionUpsertWithoutPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => ActionUpdateWithoutPermissionsInputSchema),z.lazy(() => ActionUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => ActionCreateWithoutPermissionsInputSchema),z.lazy(() => ActionUncheckedCreateWithoutPermissionsInputSchema) ]),
  where: z.lazy(() => ActionWhereInputSchema).optional()
}).strict();

export const ActionUpdateToOneWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionUpdateToOneWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => ActionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ActionUpdateWithoutPermissionsInputSchema),z.lazy(() => ActionUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const ActionUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionUpdateWithoutPermissionsInput> = z.object({
  name: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => EnumActionNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ActionUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.ActionUncheckedUpdateWithoutPermissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => ActionNameSchema),z.lazy(() => EnumActionNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResourceUpsertWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceUpsertWithoutPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => ResourceUpdateWithoutPermissionsInputSchema),z.lazy(() => ResourceUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => ResourceCreateWithoutPermissionsInputSchema),z.lazy(() => ResourceUncheckedCreateWithoutPermissionsInputSchema) ]),
  where: z.lazy(() => ResourceWhereInputSchema).optional()
}).strict();

export const ResourceUpdateToOneWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceUpdateToOneWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => ResourceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ResourceUpdateWithoutPermissionsInputSchema),z.lazy(() => ResourceUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const ResourceUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceUpdateWithoutPermissionsInput> = z.object({
  name: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => EnumResourceNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ResourceUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.ResourceUncheckedUpdateWithoutPermissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => ResourceNameSchema),z.lazy(() => EnumResourceNameFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpsertWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithWhereWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateManyMutationInputSchema),z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionInputSchema) ]),
}).strict();

export const RoleCustomPermissionCreateWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateWithoutCustomPermissionInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  role: z.lazy(() => RoleCreateNestedOneWithoutRoleCustomPermissionsInputSchema),
  permissionApprovals: z.lazy(() => PermissionApprovalCreateNestedManyWithoutRoleCustomPermissionInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  permissionApprovals: z.lazy(() => PermissionApprovalUncheckedCreateNestedManyWithoutRoleCustomPermissionInputSchema).optional()
}).strict();

export const RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateOrConnectWithoutCustomPermissionInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema) ]),
}).strict();

export const RoleCustomPermissionCreateManyCustomPermissionInputEnvelopeSchema: z.ZodType<Prisma.RoleCustomPermissionCreateManyCustomPermissionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RoleCustomPermissionCreateManyCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionCreateManyCustomPermissionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RoleCustomPermissionUpsertWithWhereUniqueWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpsertWithWhereUniqueWithoutCustomPermissionInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateWithoutCustomPermissionInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutCustomPermissionInputSchema) ]),
}).strict();

export const RoleCustomPermissionUpdateWithWhereUniqueWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateWithWhereUniqueWithoutCustomPermissionInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithoutCustomPermissionInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateWithoutCustomPermissionInputSchema) ]),
}).strict();

export const RoleCustomPermissionUpdateManyWithWhereWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateManyWithWhereWithoutCustomPermissionInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RoleCustomPermissionUpdateManyMutationInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutCustomPermissionInputSchema) ]),
}).strict();

export const RoleCreateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleCreateWithoutRolePermissionsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRolesInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutOwnedRolesInputSchema),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUncheckedCreateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutRolePermissionsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdById: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutRolePermissionsInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutRolePermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRolePermissionsInputSchema) ]),
}).strict();

export const PermissionCreateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateWithoutRolePermissionsInput> = z.object({
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional(),
  action: z.lazy(() => ActionCreateNestedOneWithoutPermissionsInputSchema),
  resource: z.lazy(() => ResourceCreateNestedOneWithoutPermissionsInputSchema)
}).strict();

export const PermissionUncheckedCreateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutRolePermissionsInput> = z.object({
  id: z.number().int().optional(),
  actionId: z.number().int(),
  resourceId: z.number().int(),
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional()
}).strict();

export const PermissionCreateOrConnectWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutRolePermissionsInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]),
}).strict();

export const RoleUpsertWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleUpsertWithoutRolePermissionsInput> = z.object({
  update: z.union([ z.lazy(() => RoleUpdateWithoutRolePermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutRolePermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutRolePermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRolePermissionsInputSchema) ]),
  where: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const RoleUpdateToOneWithWhereWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleUpdateToOneWithWhereWithoutRolePermissionsInput> = z.object({
  where: z.lazy(() => RoleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RoleUpdateWithoutRolePermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutRolePermissionsInputSchema) ]),
}).strict();

export const RoleUpdateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleUpdateWithoutRolePermissionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRolesNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedRolesNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutRolePermissionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const PermissionUpsertWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpsertWithoutRolePermissionsInput> = z.object({
  update: z.union([ z.lazy(() => PermissionUpdateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolePermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]),
  where: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const PermissionUpdateToOneWithWhereWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpdateToOneWithWhereWithoutRolePermissionsInput> = z.object({
  where: z.lazy(() => PermissionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolePermissionsInputSchema) ]),
}).strict();

export const PermissionUpdateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutRolePermissionsInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.lazy(() => ActionUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional(),
  resource: z.lazy(() => ResourceUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutRolePermissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  actionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  resourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleCreateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleCreateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRolesInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutOwnedRolesInputSchema),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUncheckedCreateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdById: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutRoleCustomPermissionsInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]),
}).strict();

export const CustomPermissionCreateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionCreateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.lazy(() => SystemCustomPermissionSchema),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  riskLevel: z.string().optional(),
  isActive: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomPermissionUncheckedCreateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionUncheckedCreateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.lazy(() => SystemCustomPermissionSchema),
  name: z.string(),
  description: z.string().optional().nullable(),
  category: z.string(),
  riskLevel: z.string().optional(),
  isActive: z.boolean().optional(),
  requiresApproval: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomPermissionCreateOrConnectWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionCreateOrConnectWithoutRoleCustomPermissionsInput> = z.object({
  where: z.lazy(() => CustomPermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomPermissionCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]),
}).strict();

export const PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalCreateWithoutRoleCustomPermissionInput> = z.object({
  id: z.string().uuid().optional(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedBy: z.string().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  reason: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  status: z.string().optional()
}).strict();

export const PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInput> = z.object({
  id: z.string().uuid().optional(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedBy: z.string().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  reason: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  status: z.string().optional()
}).strict();

export const PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalCreateOrConnectWithoutRoleCustomPermissionInput> = z.object({
  where: z.lazy(() => PermissionApprovalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema) ]),
}).strict();

export const PermissionApprovalCreateManyRoleCustomPermissionInputEnvelopeSchema: z.ZodType<Prisma.PermissionApprovalCreateManyRoleCustomPermissionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PermissionApprovalCreateManyRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalCreateManyRoleCustomPermissionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RoleUpsertWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleUpsertWithoutRoleCustomPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => RoleUpdateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutRoleCustomPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]),
  where: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const RoleUpdateToOneWithWhereWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleUpdateToOneWithWhereWithoutRoleCustomPermissionsInput> = z.object({
  where: z.lazy(() => RoleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RoleUpdateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutRoleCustomPermissionsInputSchema) ]),
}).strict();

export const RoleUpdateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleUpdateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRolesNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedRolesNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const CustomPermissionUpsertWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionUpsertWithoutRoleCustomPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => CustomPermissionUpdateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUncheckedUpdateWithoutRoleCustomPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomPermissionCreateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUncheckedCreateWithoutRoleCustomPermissionsInputSchema) ]),
  where: z.lazy(() => CustomPermissionWhereInputSchema).optional()
}).strict();

export const CustomPermissionUpdateToOneWithWhereWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionUpdateToOneWithWhereWithoutRoleCustomPermissionsInput> = z.object({
  where: z.lazy(() => CustomPermissionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomPermissionUpdateWithoutRoleCustomPermissionsInputSchema),z.lazy(() => CustomPermissionUncheckedUpdateWithoutRoleCustomPermissionsInputSchema) ]),
}).strict();

export const CustomPermissionUpdateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionUpdateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => EnumSystemCustomPermissionFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  riskLevel: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  requiresApproval: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomPermissionUncheckedUpdateWithoutRoleCustomPermissionsInputSchema: z.ZodType<Prisma.CustomPermissionUncheckedUpdateWithoutRoleCustomPermissionsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.lazy(() => SystemCustomPermissionSchema),z.lazy(() => EnumSystemCustomPermissionFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  riskLevel: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  requiresApproval: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalUpsertWithWhereUniqueWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUpsertWithWhereUniqueWithoutRoleCustomPermissionInput> = z.object({
  where: z.lazy(() => PermissionApprovalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PermissionApprovalUpdateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedUpdateWithoutRoleCustomPermissionInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionApprovalCreateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedCreateWithoutRoleCustomPermissionInputSchema) ]),
}).strict();

export const PermissionApprovalUpdateWithWhereUniqueWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUpdateWithWhereUniqueWithoutRoleCustomPermissionInput> = z.object({
  where: z.lazy(() => PermissionApprovalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PermissionApprovalUpdateWithoutRoleCustomPermissionInputSchema),z.lazy(() => PermissionApprovalUncheckedUpdateWithoutRoleCustomPermissionInputSchema) ]),
}).strict();

export const PermissionApprovalUpdateManyWithWhereWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUpdateManyWithWhereWithoutRoleCustomPermissionInput> = z.object({
  where: z.lazy(() => PermissionApprovalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PermissionApprovalUpdateManyMutationInputSchema),z.lazy(() => PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionInputSchema) ]),
}).strict();

export const PermissionApprovalScalarWhereInputSchema: z.ZodType<Prisma.PermissionApprovalScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionApprovalScalarWhereInputSchema),z.lazy(() => PermissionApprovalScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionApprovalScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionApprovalScalarWhereInputSchema),z.lazy(() => PermissionApprovalScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  roleCustomPermissionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approvedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  reason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const RoleCustomPermissionCreateWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateWithoutPermissionApprovalsInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string(),
  role: z.lazy(() => RoleCreateNestedOneWithoutRoleCustomPermissionsInputSchema),
  customPermission: z.lazy(() => CustomPermissionCreateNestedOneWithoutRoleCustomPermissionsInputSchema)
}).strict();

export const RoleCustomPermissionUncheckedCreateWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedCreateWithoutPermissionApprovalsInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  customPermissionId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RoleCustomPermissionCreateOrConnectWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateOrConnectWithoutPermissionApprovalsInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutPermissionApprovalsInputSchema) ]),
}).strict();

export const RoleCustomPermissionUpsertWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpsertWithoutPermissionApprovalsInput> = z.object({
  update: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateWithoutPermissionApprovalsInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCustomPermissionCreateWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUncheckedCreateWithoutPermissionApprovalsInputSchema) ]),
  where: z.lazy(() => RoleCustomPermissionWhereInputSchema).optional()
}).strict();

export const RoleCustomPermissionUpdateToOneWithWhereWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateToOneWithWhereWithoutPermissionApprovalsInput> = z.object({
  where: z.lazy(() => RoleCustomPermissionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RoleCustomPermissionUpdateWithoutPermissionApprovalsInputSchema),z.lazy(() => RoleCustomPermissionUncheckedUpdateWithoutPermissionApprovalsInputSchema) ]),
}).strict();

export const RoleCustomPermissionUpdateWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateWithoutPermissionApprovalsInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema).optional(),
  customPermission: z.lazy(() => CustomPermissionUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedUpdateWithoutPermissionApprovalsInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateWithoutPermissionApprovalsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customPermissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserIdentifierCreateManyUserInputSchema: z.ZodType<Prisma.UserIdentifierCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  type: z.lazy(() => IdentifierTypeSchema),
  value: z.string(),
  isVerified: z.boolean().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RefreshTokenCreateManyUserInputSchema: z.ZodType<Prisma.RefreshTokenCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  token: z.string(),
  userAgent: z.string().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  expiresAt: z.coerce.date(),
  revokedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleCreateManyUserInputSchema: z.ZodType<Prisma.UserRoleCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  roleId: z.string(),
  organizationId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RoleCreateManyCreatedByInputSchema: z.ZodType<Prisma.RoleCreateManyCreatedByInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable()
}).strict();

export const OrganizationCreateManyOwnedByInputSchema: z.ZodType<Prisma.OrganizationCreateManyOwnedByInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserIdentifierUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => EnumIdentifierTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPrimary: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserIdentifierUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => EnumIdentifierTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPrimary: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserIdentifierUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.UserIdentifierUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => IdentifierTypeSchema),z.lazy(() => EnumIdentifierTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPrimary: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RefreshTokenUpdateWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  revokedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RefreshTokenUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  revokedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RefreshTokenUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.RefreshTokenUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  revokedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRolesNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutUsersInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutOwnedByInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutOwnedByInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOwnedByInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOwnedByInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateManyLanguageInputSchema: z.ZodType<Prisma.OrganizationCreateManyLanguageInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrganizationUpdateWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutLanguageInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutLanguageInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutLanguageInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutLanguageInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateManyIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationCreateManyIndustryCategoryInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrganizationUpdateWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutIndustryCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutIndustryCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutIndustryCategoryInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutIndustryCategoryInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateManyFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationCreateManyFiscalYearPatternInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrganizationUpdateWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFiscalYearPatternInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFiscalYearPatternInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutFiscalYearPatternInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutFiscalYearPatternInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleCreateManyOrganizationInputSchema: z.ZodType<Prisma.UserRoleCreateManyOrganizationInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  roleId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RoleCreateManyOrganizationInputSchema: z.ZodType<Prisma.RoleCreateManyOrganizationInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdById: z.string(),
  isSystem: z.boolean().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  priority: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date().optional().nullable()
}).strict();

export const UserRoleUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedRolesNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  roleCustomPermissions: z.lazy(() => RoleCustomPermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isSystem: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutOrganizationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOrganizationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  identifiers: z.lazy(() => UserIdentifierUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  profile: z.lazy(() => UserProfileUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  refreshTokens: z.lazy(() => RefreshTokenUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ownedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ownedOrganizations: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOwnedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutOrganizationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutOrganizationsInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastLoginAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubregionCreateManyRegionInputSchema: z.ZodType<Prisma.SubregionCreateManyRegionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.string().optional().nullable()
}).strict();

export const CountryCreateManyRegionInputSchema: z.ZodType<Prisma.CountryCreateManyRegionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable()
}).strict();

export const SubregionUpdateWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUpdateWithoutRegionInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutSubregionNestedInputSchema).optional()
}).strict();

export const SubregionUncheckedUpdateWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUncheckedUpdateWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutSubregionNestedInputSchema).optional()
}).strict();

export const SubregionUncheckedUpdateManyWithoutRegionInputSchema: z.ZodType<Prisma.SubregionUncheckedUpdateManyWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  translations: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryUpdateWithoutRegionInputSchema: z.ZodType<Prisma.CountryUpdateWithoutRegionInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutRegionInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutRegionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryCreateManySubregionInputSchema: z.ZodType<Prisma.CountryCreateManySubregionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable()
}).strict();

export const CountryUpdateWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUpdateWithoutSubregionInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutSubregionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutSubregionInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutSubregionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryCreateManyCurrencyInputSchema: z.ZodType<Prisma.CountryCreateManyCurrencyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  phoneCodeId: z.number().int().optional().nullable()
}).strict();

export const OrganizationCreateManyCurrencyInputSchema: z.ZodType<Prisma.OrganizationCreateManyCurrencyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountryUpdateWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUpdateWithoutCurrencyInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutCurrencyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutCurrencyInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutCurrencyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutCurrencyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutCurrencyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutCurrencyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutCurrencyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CountryCreateManyPhoneCodeInputSchema: z.ZodType<Prisma.CountryCreateManyPhoneCodeInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso3: z.string().optional().nullable(),
  iso2: z.string().optional().nullable(),
  numericCode: z.string().optional().nullable(),
  capital: z.string().optional().nullable(),
  tld: z.string().optional().nullable(),
  native: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  emoji: z.string().optional().nullable(),
  emojiU: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  regionId: z.number().int().optional().nullable(),
  subregionId: z.number().int().optional().nullable(),
  currencyId: z.number().int().optional().nullable()
}).strict();

export const CountryUpdateWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUpdateWithoutPhoneCodeInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutPhoneCodeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutPhoneCodeInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutPhoneCodeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationCreateManyTimeZoneInputSchema: z.ZodType<Prisma.OrganizationCreateManyTimeZoneInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  stateId: z.number().int(),
  currencyId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CountryUpdateWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUpdateWithoutTimeZoneInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  timezones: z.lazy(() => TimeZoneUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutTimeZoneInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timezones: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutTimeZoneInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutTimeZoneInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CountryUpdateWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUpdateWithoutTimezonesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.lazy(() => RegionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  subregion: z.lazy(() => SubregionUpdateOneWithoutCountriesNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneWithoutCountriesNestedInputSchema).optional(),
  phoneCode: z.lazy(() => PhoneCodeUpdateOneWithoutCountriesNestedInputSchema).optional(),
  translations: z.lazy(() => TranslationUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateWithoutTimezonesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  translations: z.lazy(() => TranslationUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  states: z.lazy(() => StateUncheckedUpdateManyWithoutCountryNestedInputSchema).optional(),
  TimeZone: z.lazy(() => TimeZoneUncheckedUpdateManyWithoutCountriesNestedInputSchema).optional(),
  City: z.lazy(() => CityUncheckedUpdateManyWithoutCountryNestedInputSchema).optional()
}).strict();

export const CountryUncheckedUpdateManyWithoutTimezonesInputSchema: z.ZodType<Prisma.CountryUncheckedUpdateManyWithoutTimezonesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numericCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  capital: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tld: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  native: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emoji: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emojiU: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  regionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subregionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currencyId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneCodeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutTimeZoneInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutTimeZoneInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutTimeZoneInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutTimeZoneInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TranslationCreateManyCountryInputSchema: z.ZodType<Prisma.TranslationCreateManyCountryInput> = z.object({
  id: z.number().int().optional(),
  language: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const StateCreateManyCountryInputSchema: z.ZodType<Prisma.StateCreateManyCountryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  iso2: z.string().optional().nullable(),
  fipsCode: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable()
}).strict();

export const CityCreateManyCountryInputSchema: z.ZodType<Prisma.CityCreateManyCountryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  stateId: z.number().int()
}).strict();

export const TimeZoneUpdateWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUpdateWithoutCountryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUpdateManyWithoutTimeZoneNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutTimeZoneNestedInputSchema).optional()
}).strict();

export const TimeZoneUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countries: z.lazy(() => CountryUncheckedUpdateManyWithoutTimeZoneNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutTimeZoneNestedInputSchema).optional()
}).strict();

export const TimeZoneUncheckedUpdateManyWithoutCountryInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateManyWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TranslationUpdateWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUpdateWithoutCountryInput> = z.object({
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const TranslationUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const TranslationUncheckedUpdateManyWithoutCountryInputSchema: z.ZodType<Prisma.TranslationUncheckedUpdateManyWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const StateUpdateWithoutCountryInputSchema: z.ZodType<Prisma.StateUpdateWithoutCountryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cities: z.lazy(() => CityUpdateManyWithoutStateNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const StateUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.StateUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cities: z.lazy(() => CityUncheckedUpdateManyWithoutStateNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutStateNestedInputSchema).optional()
}).strict();

export const StateUncheckedUpdateManyWithoutCountryInputSchema: z.ZodType<Prisma.StateUncheckedUpdateManyWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iso2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fipsCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TimeZoneUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUpdateWithoutCountriesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Country: z.lazy(() => CountryUpdateManyWithoutTimezonesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUpdateManyWithoutTimeZoneNestedInputSchema).optional()
}).strict();

export const TimeZoneUncheckedUpdateWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Country: z.lazy(() => CountryUncheckedUpdateManyWithoutTimezonesNestedInputSchema).optional(),
  Organization: z.lazy(() => OrganizationUncheckedUpdateManyWithoutTimeZoneNestedInputSchema).optional()
}).strict();

export const TimeZoneUncheckedUpdateManyWithoutCountriesInputSchema: z.ZodType<Prisma.TimeZoneUncheckedUpdateManyWithoutCountriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CityUpdateWithoutCountryInputSchema: z.ZodType<Prisma.CityUpdateWithoutCountryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.lazy(() => StateUpdateOneRequiredWithoutCitiesNestedInputSchema).optional()
}).strict();

export const CityUncheckedUpdateWithoutCountryInputSchema: z.ZodType<Prisma.CityUncheckedUpdateWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutCountryInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutCountryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stateId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityCreateManyStateInputSchema: z.ZodType<Prisma.CityCreateManyStateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  stateCode: z.string().optional().nullable(),
  countryCode: z.string().optional().nullable(),
  latitude: z.string().optional().nullable(),
  longitude: z.string().optional().nullable(),
  wikiDataId: z.string().optional().nullable(),
  countryId: z.number().int()
}).strict();

export const OrganizationCreateManyStateInputSchema: z.ZodType<Prisma.OrganizationCreateManyStateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  currencyId: z.number().int(),
  timeZoneId: z.number().int(),
  inventoryStartDate: z.coerce.date(),
  languageId: z.number().int().optional().nullable(),
  industryCategoryId: z.number().int().optional().nullable(),
  fiscalYearPatternId: z.number().int().optional().nullable(),
  ownedById: z.string(),
  address: z.string().optional().nullable(),
  zipCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CityUpdateWithoutStateInputSchema: z.ZodType<Prisma.CityUpdateWithoutStateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.lazy(() => CountryUpdateOneRequiredWithoutCityNestedInputSchema).optional()
}).strict();

export const CityUncheckedUpdateWithoutStateInputSchema: z.ZodType<Prisma.CityUncheckedUpdateWithoutStateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CityUncheckedUpdateManyWithoutStateInputSchema: z.ZodType<Prisma.CityUncheckedUpdateManyWithoutStateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stateCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wikiDataId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  countryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutStateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.lazy(() => CurrencyUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  timeZone: z.lazy(() => TimeZoneUpdateOneRequiredWithoutOrganizationNestedInputSchema).optional(),
  language: z.lazy(() => LanguageUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  industryCategory: z.lazy(() => IndustryCategoryUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  fiscalYearPattern: z.lazy(() => FiscalYearPatternUpdateOneWithoutOrganizationsNestedInputSchema).optional(),
  userRoles: z.lazy(() => UserRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ownedBy: z.lazy(() => UserUpdateOneRequiredWithoutOwnedOrganizationsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutStateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userRoles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  roles: z.lazy(() => RoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationsNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutStateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutStateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currencyId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timeZoneId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryStartDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  languageId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industryCategoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiscalYearPatternId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  zipCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateManyRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateManyRoleInput> = z.object({
  id: z.number().int().optional(),
  permissionId: z.number().int(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RoleCustomPermissionCreateManyRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateManyRoleInput> = z.object({
  id: z.number().int().optional(),
  customPermissionId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const UserRoleCreateManyRoleInputSchema: z.ZodType<Prisma.UserRoleCreateManyRoleInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.string(),
  organizationId: z.string(),
  assignedBy: z.string(),
  assignedAt: z.coerce.date().optional(),
  status: z.lazy(() => UserRoleStatusSchema).optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithoutRoleInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.lazy(() => PermissionUpdateOneRequiredWithoutRolePermissionsNestedInputSchema).optional()
}).strict();

export const RolePermissionUncheckedUpdateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleCustomPermissionUpdateWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateWithoutRoleInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customPermission: z.lazy(() => CustomPermissionUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalUpdateManyWithoutRoleCustomPermissionNestedInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedUpdateWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  customPermissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionNestedInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedUpdateManyWithoutRoleInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateManyWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  customPermissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUpdateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutUserRolesNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutRoleInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => UserRoleStatusSchema),z.lazy(() => EnumUserRoleStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionCreateManyActionInputSchema: z.ZodType<Prisma.PermissionCreateManyActionInput> = z.object({
  id: z.number().int().optional(),
  resourceId: z.number().int(),
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional()
}).strict();

export const PermissionUpdateWithoutActionInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutActionInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.lazy(() => ResourceUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutActionInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutActionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  resourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateManyWithoutActionInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutActionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  resourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionCreateManyResourceInputSchema: z.ZodType<Prisma.PermissionCreateManyResourceInput> = z.object({
  id: z.number().int().optional(),
  actionId: z.number().int(),
  description: z.string().optional().nullable(),
  category: z.string().optional().nullable(),
  isDangerous: z.boolean().optional()
}).strict();

export const PermissionUpdateWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutResourceInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.lazy(() => ActionUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutResourceInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  actionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateManyWithoutResourceInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutResourceInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  actionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDangerous: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateManyPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateManyPermissionInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RolePermissionUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithoutPermissionInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutRolePermissionsNestedInputSchema).optional()
}).strict();

export const RolePermissionUncheckedUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateWithoutPermissionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleCustomPermissionCreateManyCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionCreateManyCustomPermissionInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.string(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.boolean().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  grantedAt: z.coerce.date().optional(),
  grantedBy: z.string()
}).strict();

export const RoleCustomPermissionUpdateWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateWithoutCustomPermissionInput> = z.object({
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutRoleCustomPermissionsNestedInputSchema).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalUpdateManyWithoutRoleCustomPermissionNestedInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedUpdateWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateWithoutCustomPermissionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionApprovals: z.lazy(() => PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionNestedInputSchema).optional()
}).strict();

export const RoleCustomPermissionUncheckedUpdateManyWithoutCustomPermissionInputSchema: z.ZodType<Prisma.RoleCustomPermissionUncheckedUpdateManyWithoutCustomPermissionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  approvalRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grantedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  grantedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalCreateManyRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalCreateManyRoleCustomPermissionInput> = z.object({
  id: z.string().uuid().optional(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  approvedBy: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedBy: z.string().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  reason: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  status: z.string().optional()
}).strict();

export const PermissionApprovalUpdateWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUpdateWithoutRoleCustomPermissionInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalUncheckedUpdateWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedUpdateWithoutRoleCustomPermissionInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionInputSchema: z.ZodType<Prisma.PermissionApprovalUncheckedUpdateManyWithoutRoleCustomPermissionInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approvedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const OtpFindFirstArgsSchema: z.ZodType<Prisma.OtpFindFirstArgs> = z.object({
  select: OtpSelectSchema.optional(),
  where: OtpWhereInputSchema.optional(),
  orderBy: z.union([ OtpOrderByWithRelationInputSchema.array(),OtpOrderByWithRelationInputSchema ]).optional(),
  cursor: OtpWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OtpScalarFieldEnumSchema,OtpScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OtpFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OtpFindFirstOrThrowArgs> = z.object({
  select: OtpSelectSchema.optional(),
  where: OtpWhereInputSchema.optional(),
  orderBy: z.union([ OtpOrderByWithRelationInputSchema.array(),OtpOrderByWithRelationInputSchema ]).optional(),
  cursor: OtpWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OtpScalarFieldEnumSchema,OtpScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OtpFindManyArgsSchema: z.ZodType<Prisma.OtpFindManyArgs> = z.object({
  select: OtpSelectSchema.optional(),
  where: OtpWhereInputSchema.optional(),
  orderBy: z.union([ OtpOrderByWithRelationInputSchema.array(),OtpOrderByWithRelationInputSchema ]).optional(),
  cursor: OtpWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OtpScalarFieldEnumSchema,OtpScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OtpAggregateArgsSchema: z.ZodType<Prisma.OtpAggregateArgs> = z.object({
  where: OtpWhereInputSchema.optional(),
  orderBy: z.union([ OtpOrderByWithRelationInputSchema.array(),OtpOrderByWithRelationInputSchema ]).optional(),
  cursor: OtpWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OtpGroupByArgsSchema: z.ZodType<Prisma.OtpGroupByArgs> = z.object({
  where: OtpWhereInputSchema.optional(),
  orderBy: z.union([ OtpOrderByWithAggregationInputSchema.array(),OtpOrderByWithAggregationInputSchema ]).optional(),
  by: OtpScalarFieldEnumSchema.array(),
  having: OtpScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OtpFindUniqueArgsSchema: z.ZodType<Prisma.OtpFindUniqueArgs> = z.object({
  select: OtpSelectSchema.optional(),
  where: OtpWhereUniqueInputSchema,
}).strict() ;

export const OtpFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OtpFindUniqueOrThrowArgs> = z.object({
  select: OtpSelectSchema.optional(),
  where: OtpWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserIdentifierFindFirstArgsSchema: z.ZodType<Prisma.UserIdentifierFindFirstArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  where: UserIdentifierWhereInputSchema.optional(),
  orderBy: z.union([ UserIdentifierOrderByWithRelationInputSchema.array(),UserIdentifierOrderByWithRelationInputSchema ]).optional(),
  cursor: UserIdentifierWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserIdentifierScalarFieldEnumSchema,UserIdentifierScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserIdentifierFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserIdentifierFindFirstOrThrowArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  where: UserIdentifierWhereInputSchema.optional(),
  orderBy: z.union([ UserIdentifierOrderByWithRelationInputSchema.array(),UserIdentifierOrderByWithRelationInputSchema ]).optional(),
  cursor: UserIdentifierWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserIdentifierScalarFieldEnumSchema,UserIdentifierScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserIdentifierFindManyArgsSchema: z.ZodType<Prisma.UserIdentifierFindManyArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  where: UserIdentifierWhereInputSchema.optional(),
  orderBy: z.union([ UserIdentifierOrderByWithRelationInputSchema.array(),UserIdentifierOrderByWithRelationInputSchema ]).optional(),
  cursor: UserIdentifierWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserIdentifierScalarFieldEnumSchema,UserIdentifierScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserIdentifierAggregateArgsSchema: z.ZodType<Prisma.UserIdentifierAggregateArgs> = z.object({
  where: UserIdentifierWhereInputSchema.optional(),
  orderBy: z.union([ UserIdentifierOrderByWithRelationInputSchema.array(),UserIdentifierOrderByWithRelationInputSchema ]).optional(),
  cursor: UserIdentifierWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserIdentifierGroupByArgsSchema: z.ZodType<Prisma.UserIdentifierGroupByArgs> = z.object({
  where: UserIdentifierWhereInputSchema.optional(),
  orderBy: z.union([ UserIdentifierOrderByWithAggregationInputSchema.array(),UserIdentifierOrderByWithAggregationInputSchema ]).optional(),
  by: UserIdentifierScalarFieldEnumSchema.array(),
  having: UserIdentifierScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserIdentifierFindUniqueArgsSchema: z.ZodType<Prisma.UserIdentifierFindUniqueArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  where: UserIdentifierWhereUniqueInputSchema,
}).strict() ;

export const UserIdentifierFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserIdentifierFindUniqueOrThrowArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  where: UserIdentifierWhereUniqueInputSchema,
}).strict() ;

export const UserProfileFindFirstArgsSchema: z.ZodType<Prisma.UserProfileFindFirstArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserProfileScalarFieldEnumSchema,UserProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserProfileFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserProfileFindFirstOrThrowArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserProfileScalarFieldEnumSchema,UserProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserProfileFindManyArgsSchema: z.ZodType<Prisma.UserProfileFindManyArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserProfileScalarFieldEnumSchema,UserProfileScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserProfileAggregateArgsSchema: z.ZodType<Prisma.UserProfileAggregateArgs> = z.object({
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithRelationInputSchema.array(),UserProfileOrderByWithRelationInputSchema ]).optional(),
  cursor: UserProfileWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserProfileGroupByArgsSchema: z.ZodType<Prisma.UserProfileGroupByArgs> = z.object({
  where: UserProfileWhereInputSchema.optional(),
  orderBy: z.union([ UserProfileOrderByWithAggregationInputSchema.array(),UserProfileOrderByWithAggregationInputSchema ]).optional(),
  by: UserProfileScalarFieldEnumSchema.array(),
  having: UserProfileScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserProfileFindUniqueArgsSchema: z.ZodType<Prisma.UserProfileFindUniqueArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const UserProfileFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserProfileFindUniqueOrThrowArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const RefreshTokenFindFirstArgsSchema: z.ZodType<Prisma.RefreshTokenFindFirstArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  where: RefreshTokenWhereInputSchema.optional(),
  orderBy: z.union([ RefreshTokenOrderByWithRelationInputSchema.array(),RefreshTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: RefreshTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RefreshTokenScalarFieldEnumSchema,RefreshTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RefreshTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RefreshTokenFindFirstOrThrowArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  where: RefreshTokenWhereInputSchema.optional(),
  orderBy: z.union([ RefreshTokenOrderByWithRelationInputSchema.array(),RefreshTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: RefreshTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RefreshTokenScalarFieldEnumSchema,RefreshTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RefreshTokenFindManyArgsSchema: z.ZodType<Prisma.RefreshTokenFindManyArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  where: RefreshTokenWhereInputSchema.optional(),
  orderBy: z.union([ RefreshTokenOrderByWithRelationInputSchema.array(),RefreshTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: RefreshTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RefreshTokenScalarFieldEnumSchema,RefreshTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RefreshTokenAggregateArgsSchema: z.ZodType<Prisma.RefreshTokenAggregateArgs> = z.object({
  where: RefreshTokenWhereInputSchema.optional(),
  orderBy: z.union([ RefreshTokenOrderByWithRelationInputSchema.array(),RefreshTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: RefreshTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RefreshTokenGroupByArgsSchema: z.ZodType<Prisma.RefreshTokenGroupByArgs> = z.object({
  where: RefreshTokenWhereInputSchema.optional(),
  orderBy: z.union([ RefreshTokenOrderByWithAggregationInputSchema.array(),RefreshTokenOrderByWithAggregationInputSchema ]).optional(),
  by: RefreshTokenScalarFieldEnumSchema.array(),
  having: RefreshTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RefreshTokenFindUniqueArgsSchema: z.ZodType<Prisma.RefreshTokenFindUniqueArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  where: RefreshTokenWhereUniqueInputSchema,
}).strict() ;

export const RefreshTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RefreshTokenFindUniqueOrThrowArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  where: RefreshTokenWhereUniqueInputSchema,
}).strict() ;

export const LanguageFindFirstArgsSchema: z.ZodType<Prisma.LanguageFindFirstArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LanguageFindFirstOrThrowArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageFindManyArgsSchema: z.ZodType<Prisma.LanguageFindManyArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LanguageScalarFieldEnumSchema,LanguageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LanguageAggregateArgsSchema: z.ZodType<Prisma.LanguageAggregateArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithRelationInputSchema.array(),LanguageOrderByWithRelationInputSchema ]).optional(),
  cursor: LanguageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LanguageGroupByArgsSchema: z.ZodType<Prisma.LanguageGroupByArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  orderBy: z.union([ LanguageOrderByWithAggregationInputSchema.array(),LanguageOrderByWithAggregationInputSchema ]).optional(),
  by: LanguageScalarFieldEnumSchema.array(),
  having: LanguageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LanguageFindUniqueArgsSchema: z.ZodType<Prisma.LanguageFindUniqueArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LanguageFindUniqueOrThrowArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const IndustryCategoryFindFirstArgsSchema: z.ZodType<Prisma.IndustryCategoryFindFirstArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  where: IndustryCategoryWhereInputSchema.optional(),
  orderBy: z.union([ IndustryCategoryOrderByWithRelationInputSchema.array(),IndustryCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: IndustryCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IndustryCategoryScalarFieldEnumSchema,IndustryCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IndustryCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.IndustryCategoryFindFirstOrThrowArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  where: IndustryCategoryWhereInputSchema.optional(),
  orderBy: z.union([ IndustryCategoryOrderByWithRelationInputSchema.array(),IndustryCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: IndustryCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IndustryCategoryScalarFieldEnumSchema,IndustryCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IndustryCategoryFindManyArgsSchema: z.ZodType<Prisma.IndustryCategoryFindManyArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  where: IndustryCategoryWhereInputSchema.optional(),
  orderBy: z.union([ IndustryCategoryOrderByWithRelationInputSchema.array(),IndustryCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: IndustryCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IndustryCategoryScalarFieldEnumSchema,IndustryCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IndustryCategoryAggregateArgsSchema: z.ZodType<Prisma.IndustryCategoryAggregateArgs> = z.object({
  where: IndustryCategoryWhereInputSchema.optional(),
  orderBy: z.union([ IndustryCategoryOrderByWithRelationInputSchema.array(),IndustryCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: IndustryCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IndustryCategoryGroupByArgsSchema: z.ZodType<Prisma.IndustryCategoryGroupByArgs> = z.object({
  where: IndustryCategoryWhereInputSchema.optional(),
  orderBy: z.union([ IndustryCategoryOrderByWithAggregationInputSchema.array(),IndustryCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: IndustryCategoryScalarFieldEnumSchema.array(),
  having: IndustryCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IndustryCategoryFindUniqueArgsSchema: z.ZodType<Prisma.IndustryCategoryFindUniqueArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  where: IndustryCategoryWhereUniqueInputSchema,
}).strict() ;

export const IndustryCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.IndustryCategoryFindUniqueOrThrowArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  where: IndustryCategoryWhereUniqueInputSchema,
}).strict() ;

export const FiscalYearPatternFindFirstArgsSchema: z.ZodType<Prisma.FiscalYearPatternFindFirstArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  where: FiscalYearPatternWhereInputSchema.optional(),
  orderBy: z.union([ FiscalYearPatternOrderByWithRelationInputSchema.array(),FiscalYearPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: FiscalYearPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FiscalYearPatternScalarFieldEnumSchema,FiscalYearPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FiscalYearPatternFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FiscalYearPatternFindFirstOrThrowArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  where: FiscalYearPatternWhereInputSchema.optional(),
  orderBy: z.union([ FiscalYearPatternOrderByWithRelationInputSchema.array(),FiscalYearPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: FiscalYearPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FiscalYearPatternScalarFieldEnumSchema,FiscalYearPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FiscalYearPatternFindManyArgsSchema: z.ZodType<Prisma.FiscalYearPatternFindManyArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  where: FiscalYearPatternWhereInputSchema.optional(),
  orderBy: z.union([ FiscalYearPatternOrderByWithRelationInputSchema.array(),FiscalYearPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: FiscalYearPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FiscalYearPatternScalarFieldEnumSchema,FiscalYearPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FiscalYearPatternAggregateArgsSchema: z.ZodType<Prisma.FiscalYearPatternAggregateArgs> = z.object({
  where: FiscalYearPatternWhereInputSchema.optional(),
  orderBy: z.union([ FiscalYearPatternOrderByWithRelationInputSchema.array(),FiscalYearPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: FiscalYearPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FiscalYearPatternGroupByArgsSchema: z.ZodType<Prisma.FiscalYearPatternGroupByArgs> = z.object({
  where: FiscalYearPatternWhereInputSchema.optional(),
  orderBy: z.union([ FiscalYearPatternOrderByWithAggregationInputSchema.array(),FiscalYearPatternOrderByWithAggregationInputSchema ]).optional(),
  by: FiscalYearPatternScalarFieldEnumSchema.array(),
  having: FiscalYearPatternScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FiscalYearPatternFindUniqueArgsSchema: z.ZodType<Prisma.FiscalYearPatternFindUniqueArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  where: FiscalYearPatternWhereUniqueInputSchema,
}).strict() ;

export const FiscalYearPatternFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FiscalYearPatternFindUniqueOrThrowArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  where: FiscalYearPatternWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const RegionFindFirstArgsSchema: z.ZodType<Prisma.RegionFindFirstArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RegionScalarFieldEnumSchema,RegionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RegionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RegionFindFirstOrThrowArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RegionScalarFieldEnumSchema,RegionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RegionFindManyArgsSchema: z.ZodType<Prisma.RegionFindManyArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RegionScalarFieldEnumSchema,RegionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RegionAggregateArgsSchema: z.ZodType<Prisma.RegionAggregateArgs> = z.object({
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithRelationInputSchema.array(),RegionOrderByWithRelationInputSchema ]).optional(),
  cursor: RegionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RegionGroupByArgsSchema: z.ZodType<Prisma.RegionGroupByArgs> = z.object({
  where: RegionWhereInputSchema.optional(),
  orderBy: z.union([ RegionOrderByWithAggregationInputSchema.array(),RegionOrderByWithAggregationInputSchema ]).optional(),
  by: RegionScalarFieldEnumSchema.array(),
  having: RegionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RegionFindUniqueArgsSchema: z.ZodType<Prisma.RegionFindUniqueArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const RegionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RegionFindUniqueOrThrowArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const SubregionFindFirstArgsSchema: z.ZodType<Prisma.SubregionFindFirstArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  where: SubregionWhereInputSchema.optional(),
  orderBy: z.union([ SubregionOrderByWithRelationInputSchema.array(),SubregionOrderByWithRelationInputSchema ]).optional(),
  cursor: SubregionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubregionScalarFieldEnumSchema,SubregionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubregionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SubregionFindFirstOrThrowArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  where: SubregionWhereInputSchema.optional(),
  orderBy: z.union([ SubregionOrderByWithRelationInputSchema.array(),SubregionOrderByWithRelationInputSchema ]).optional(),
  cursor: SubregionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubregionScalarFieldEnumSchema,SubregionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubregionFindManyArgsSchema: z.ZodType<Prisma.SubregionFindManyArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  where: SubregionWhereInputSchema.optional(),
  orderBy: z.union([ SubregionOrderByWithRelationInputSchema.array(),SubregionOrderByWithRelationInputSchema ]).optional(),
  cursor: SubregionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubregionScalarFieldEnumSchema,SubregionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubregionAggregateArgsSchema: z.ZodType<Prisma.SubregionAggregateArgs> = z.object({
  where: SubregionWhereInputSchema.optional(),
  orderBy: z.union([ SubregionOrderByWithRelationInputSchema.array(),SubregionOrderByWithRelationInputSchema ]).optional(),
  cursor: SubregionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SubregionGroupByArgsSchema: z.ZodType<Prisma.SubregionGroupByArgs> = z.object({
  where: SubregionWhereInputSchema.optional(),
  orderBy: z.union([ SubregionOrderByWithAggregationInputSchema.array(),SubregionOrderByWithAggregationInputSchema ]).optional(),
  by: SubregionScalarFieldEnumSchema.array(),
  having: SubregionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SubregionFindUniqueArgsSchema: z.ZodType<Prisma.SubregionFindUniqueArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  where: SubregionWhereUniqueInputSchema,
}).strict() ;

export const SubregionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SubregionFindUniqueOrThrowArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  where: SubregionWhereUniqueInputSchema,
}).strict() ;

export const CurrencyFindFirstArgsSchema: z.ZodType<Prisma.CurrencyFindFirstArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([ CurrencyOrderByWithRelationInputSchema.array(),CurrencyOrderByWithRelationInputSchema ]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CurrencyScalarFieldEnumSchema,CurrencyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CurrencyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CurrencyFindFirstOrThrowArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([ CurrencyOrderByWithRelationInputSchema.array(),CurrencyOrderByWithRelationInputSchema ]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CurrencyScalarFieldEnumSchema,CurrencyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CurrencyFindManyArgsSchema: z.ZodType<Prisma.CurrencyFindManyArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([ CurrencyOrderByWithRelationInputSchema.array(),CurrencyOrderByWithRelationInputSchema ]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CurrencyScalarFieldEnumSchema,CurrencyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CurrencyAggregateArgsSchema: z.ZodType<Prisma.CurrencyAggregateArgs> = z.object({
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([ CurrencyOrderByWithRelationInputSchema.array(),CurrencyOrderByWithRelationInputSchema ]).optional(),
  cursor: CurrencyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CurrencyGroupByArgsSchema: z.ZodType<Prisma.CurrencyGroupByArgs> = z.object({
  where: CurrencyWhereInputSchema.optional(),
  orderBy: z.union([ CurrencyOrderByWithAggregationInputSchema.array(),CurrencyOrderByWithAggregationInputSchema ]).optional(),
  by: CurrencyScalarFieldEnumSchema.array(),
  having: CurrencyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CurrencyFindUniqueArgsSchema: z.ZodType<Prisma.CurrencyFindUniqueArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  where: CurrencyWhereUniqueInputSchema,
}).strict() ;

export const CurrencyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CurrencyFindUniqueOrThrowArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  where: CurrencyWhereUniqueInputSchema,
}).strict() ;

export const PhoneCodeFindFirstArgsSchema: z.ZodType<Prisma.PhoneCodeFindFirstArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  where: PhoneCodeWhereInputSchema.optional(),
  orderBy: z.union([ PhoneCodeOrderByWithRelationInputSchema.array(),PhoneCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: PhoneCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PhoneCodeScalarFieldEnumSchema,PhoneCodeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PhoneCodeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PhoneCodeFindFirstOrThrowArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  where: PhoneCodeWhereInputSchema.optional(),
  orderBy: z.union([ PhoneCodeOrderByWithRelationInputSchema.array(),PhoneCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: PhoneCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PhoneCodeScalarFieldEnumSchema,PhoneCodeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PhoneCodeFindManyArgsSchema: z.ZodType<Prisma.PhoneCodeFindManyArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  where: PhoneCodeWhereInputSchema.optional(),
  orderBy: z.union([ PhoneCodeOrderByWithRelationInputSchema.array(),PhoneCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: PhoneCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PhoneCodeScalarFieldEnumSchema,PhoneCodeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PhoneCodeAggregateArgsSchema: z.ZodType<Prisma.PhoneCodeAggregateArgs> = z.object({
  where: PhoneCodeWhereInputSchema.optional(),
  orderBy: z.union([ PhoneCodeOrderByWithRelationInputSchema.array(),PhoneCodeOrderByWithRelationInputSchema ]).optional(),
  cursor: PhoneCodeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PhoneCodeGroupByArgsSchema: z.ZodType<Prisma.PhoneCodeGroupByArgs> = z.object({
  where: PhoneCodeWhereInputSchema.optional(),
  orderBy: z.union([ PhoneCodeOrderByWithAggregationInputSchema.array(),PhoneCodeOrderByWithAggregationInputSchema ]).optional(),
  by: PhoneCodeScalarFieldEnumSchema.array(),
  having: PhoneCodeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PhoneCodeFindUniqueArgsSchema: z.ZodType<Prisma.PhoneCodeFindUniqueArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  where: PhoneCodeWhereUniqueInputSchema,
}).strict() ;

export const PhoneCodeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PhoneCodeFindUniqueOrThrowArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  where: PhoneCodeWhereUniqueInputSchema,
}).strict() ;

export const TimeZoneFindFirstArgsSchema: z.ZodType<Prisma.TimeZoneFindFirstArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  where: TimeZoneWhereInputSchema.optional(),
  orderBy: z.union([ TimeZoneOrderByWithRelationInputSchema.array(),TimeZoneOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeZoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeZoneScalarFieldEnumSchema,TimeZoneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeZoneFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TimeZoneFindFirstOrThrowArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  where: TimeZoneWhereInputSchema.optional(),
  orderBy: z.union([ TimeZoneOrderByWithRelationInputSchema.array(),TimeZoneOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeZoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeZoneScalarFieldEnumSchema,TimeZoneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeZoneFindManyArgsSchema: z.ZodType<Prisma.TimeZoneFindManyArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  where: TimeZoneWhereInputSchema.optional(),
  orderBy: z.union([ TimeZoneOrderByWithRelationInputSchema.array(),TimeZoneOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeZoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeZoneScalarFieldEnumSchema,TimeZoneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeZoneAggregateArgsSchema: z.ZodType<Prisma.TimeZoneAggregateArgs> = z.object({
  where: TimeZoneWhereInputSchema.optional(),
  orderBy: z.union([ TimeZoneOrderByWithRelationInputSchema.array(),TimeZoneOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeZoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TimeZoneGroupByArgsSchema: z.ZodType<Prisma.TimeZoneGroupByArgs> = z.object({
  where: TimeZoneWhereInputSchema.optional(),
  orderBy: z.union([ TimeZoneOrderByWithAggregationInputSchema.array(),TimeZoneOrderByWithAggregationInputSchema ]).optional(),
  by: TimeZoneScalarFieldEnumSchema.array(),
  having: TimeZoneScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TimeZoneFindUniqueArgsSchema: z.ZodType<Prisma.TimeZoneFindUniqueArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  where: TimeZoneWhereUniqueInputSchema,
}).strict() ;

export const TimeZoneFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TimeZoneFindUniqueOrThrowArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  where: TimeZoneWhereUniqueInputSchema,
}).strict() ;

export const TranslationFindFirstArgsSchema: z.ZodType<Prisma.TranslationFindFirstArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  where: TranslationWhereInputSchema.optional(),
  orderBy: z.union([ TranslationOrderByWithRelationInputSchema.array(),TranslationOrderByWithRelationInputSchema ]).optional(),
  cursor: TranslationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TranslationScalarFieldEnumSchema,TranslationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TranslationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TranslationFindFirstOrThrowArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  where: TranslationWhereInputSchema.optional(),
  orderBy: z.union([ TranslationOrderByWithRelationInputSchema.array(),TranslationOrderByWithRelationInputSchema ]).optional(),
  cursor: TranslationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TranslationScalarFieldEnumSchema,TranslationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TranslationFindManyArgsSchema: z.ZodType<Prisma.TranslationFindManyArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  where: TranslationWhereInputSchema.optional(),
  orderBy: z.union([ TranslationOrderByWithRelationInputSchema.array(),TranslationOrderByWithRelationInputSchema ]).optional(),
  cursor: TranslationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TranslationScalarFieldEnumSchema,TranslationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TranslationAggregateArgsSchema: z.ZodType<Prisma.TranslationAggregateArgs> = z.object({
  where: TranslationWhereInputSchema.optional(),
  orderBy: z.union([ TranslationOrderByWithRelationInputSchema.array(),TranslationOrderByWithRelationInputSchema ]).optional(),
  cursor: TranslationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TranslationGroupByArgsSchema: z.ZodType<Prisma.TranslationGroupByArgs> = z.object({
  where: TranslationWhereInputSchema.optional(),
  orderBy: z.union([ TranslationOrderByWithAggregationInputSchema.array(),TranslationOrderByWithAggregationInputSchema ]).optional(),
  by: TranslationScalarFieldEnumSchema.array(),
  having: TranslationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TranslationFindUniqueArgsSchema: z.ZodType<Prisma.TranslationFindUniqueArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  where: TranslationWhereUniqueInputSchema,
}).strict() ;

export const TranslationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TranslationFindUniqueOrThrowArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  where: TranslationWhereUniqueInputSchema,
}).strict() ;

export const CountryFindFirstArgsSchema: z.ZodType<Prisma.CountryFindFirstArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CountryFindFirstOrThrowArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryFindManyArgsSchema: z.ZodType<Prisma.CountryFindManyArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CountryScalarFieldEnumSchema,CountryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CountryAggregateArgsSchema: z.ZodType<Prisma.CountryAggregateArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithRelationInputSchema.array(),CountryOrderByWithRelationInputSchema ]).optional(),
  cursor: CountryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountryGroupByArgsSchema: z.ZodType<Prisma.CountryGroupByArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  orderBy: z.union([ CountryOrderByWithAggregationInputSchema.array(),CountryOrderByWithAggregationInputSchema ]).optional(),
  by: CountryScalarFieldEnumSchema.array(),
  having: CountryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CountryFindUniqueArgsSchema: z.ZodType<Prisma.CountryFindUniqueArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CountryFindUniqueOrThrowArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const StateFindFirstArgsSchema: z.ZodType<Prisma.StateFindFirstArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  where: StateWhereInputSchema.optional(),
  orderBy: z.union([ StateOrderByWithRelationInputSchema.array(),StateOrderByWithRelationInputSchema ]).optional(),
  cursor: StateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StateScalarFieldEnumSchema,StateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.StateFindFirstOrThrowArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  where: StateWhereInputSchema.optional(),
  orderBy: z.union([ StateOrderByWithRelationInputSchema.array(),StateOrderByWithRelationInputSchema ]).optional(),
  cursor: StateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StateScalarFieldEnumSchema,StateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StateFindManyArgsSchema: z.ZodType<Prisma.StateFindManyArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  where: StateWhereInputSchema.optional(),
  orderBy: z.union([ StateOrderByWithRelationInputSchema.array(),StateOrderByWithRelationInputSchema ]).optional(),
  cursor: StateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StateScalarFieldEnumSchema,StateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StateAggregateArgsSchema: z.ZodType<Prisma.StateAggregateArgs> = z.object({
  where: StateWhereInputSchema.optional(),
  orderBy: z.union([ StateOrderByWithRelationInputSchema.array(),StateOrderByWithRelationInputSchema ]).optional(),
  cursor: StateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StateGroupByArgsSchema: z.ZodType<Prisma.StateGroupByArgs> = z.object({
  where: StateWhereInputSchema.optional(),
  orderBy: z.union([ StateOrderByWithAggregationInputSchema.array(),StateOrderByWithAggregationInputSchema ]).optional(),
  by: StateScalarFieldEnumSchema.array(),
  having: StateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StateFindUniqueArgsSchema: z.ZodType<Prisma.StateFindUniqueArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  where: StateWhereUniqueInputSchema,
}).strict() ;

export const StateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.StateFindUniqueOrThrowArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  where: StateWhereUniqueInputSchema,
}).strict() ;

export const CityFindFirstArgsSchema: z.ZodType<Prisma.CityFindFirstArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CityFindFirstOrThrowArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityFindManyArgsSchema: z.ZodType<Prisma.CityFindManyArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CityScalarFieldEnumSchema,CityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CityAggregateArgsSchema: z.ZodType<Prisma.CityAggregateArgs> = z.object({
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithRelationInputSchema.array(),CityOrderByWithRelationInputSchema ]).optional(),
  cursor: CityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CityGroupByArgsSchema: z.ZodType<Prisma.CityGroupByArgs> = z.object({
  where: CityWhereInputSchema.optional(),
  orderBy: z.union([ CityOrderByWithAggregationInputSchema.array(),CityOrderByWithAggregationInputSchema ]).optional(),
  by: CityScalarFieldEnumSchema.array(),
  having: CityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CityFindUniqueArgsSchema: z.ZodType<Prisma.CityFindUniqueArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CityFindUniqueOrThrowArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const RoleFindFirstArgsSchema: z.ZodType<Prisma.RoleFindFirstArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleScalarFieldEnumSchema,RoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RoleFindFirstOrThrowArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleScalarFieldEnumSchema,RoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleFindManyArgsSchema: z.ZodType<Prisma.RoleFindManyArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleScalarFieldEnumSchema,RoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleAggregateArgsSchema: z.ZodType<Prisma.RoleAggregateArgs> = z.object({
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RoleGroupByArgsSchema: z.ZodType<Prisma.RoleGroupByArgs> = z.object({
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithAggregationInputSchema.array(),RoleOrderByWithAggregationInputSchema ]).optional(),
  by: RoleScalarFieldEnumSchema.array(),
  having: RoleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RoleFindUniqueArgsSchema: z.ZodType<Prisma.RoleFindUniqueArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const RoleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RoleFindUniqueOrThrowArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleFindFirstArgsSchema: z.ZodType<Prisma.UserRoleFindFirstArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserRoleFindFirstOrThrowArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleFindManyArgsSchema: z.ZodType<Prisma.UserRoleFindManyArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleAggregateArgsSchema: z.ZodType<Prisma.UserRoleAggregateArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRoleGroupByArgsSchema: z.ZodType<Prisma.UserRoleGroupByArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithAggregationInputSchema.array(),UserRoleOrderByWithAggregationInputSchema ]).optional(),
  by: UserRoleScalarFieldEnumSchema.array(),
  having: UserRoleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRoleFindUniqueArgsSchema: z.ZodType<Prisma.UserRoleFindUniqueArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserRoleFindUniqueOrThrowArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const ActionFindFirstArgsSchema: z.ZodType<Prisma.ActionFindFirstArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  where: ActionWhereInputSchema.optional(),
  orderBy: z.union([ ActionOrderByWithRelationInputSchema.array(),ActionOrderByWithRelationInputSchema ]).optional(),
  cursor: ActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActionScalarFieldEnumSchema,ActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ActionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ActionFindFirstOrThrowArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  where: ActionWhereInputSchema.optional(),
  orderBy: z.union([ ActionOrderByWithRelationInputSchema.array(),ActionOrderByWithRelationInputSchema ]).optional(),
  cursor: ActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActionScalarFieldEnumSchema,ActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ActionFindManyArgsSchema: z.ZodType<Prisma.ActionFindManyArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  where: ActionWhereInputSchema.optional(),
  orderBy: z.union([ ActionOrderByWithRelationInputSchema.array(),ActionOrderByWithRelationInputSchema ]).optional(),
  cursor: ActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ActionScalarFieldEnumSchema,ActionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ActionAggregateArgsSchema: z.ZodType<Prisma.ActionAggregateArgs> = z.object({
  where: ActionWhereInputSchema.optional(),
  orderBy: z.union([ ActionOrderByWithRelationInputSchema.array(),ActionOrderByWithRelationInputSchema ]).optional(),
  cursor: ActionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ActionGroupByArgsSchema: z.ZodType<Prisma.ActionGroupByArgs> = z.object({
  where: ActionWhereInputSchema.optional(),
  orderBy: z.union([ ActionOrderByWithAggregationInputSchema.array(),ActionOrderByWithAggregationInputSchema ]).optional(),
  by: ActionScalarFieldEnumSchema.array(),
  having: ActionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ActionFindUniqueArgsSchema: z.ZodType<Prisma.ActionFindUniqueArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  where: ActionWhereUniqueInputSchema,
}).strict() ;

export const ActionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ActionFindUniqueOrThrowArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  where: ActionWhereUniqueInputSchema,
}).strict() ;

export const ResourceFindFirstArgsSchema: z.ZodType<Prisma.ResourceFindFirstArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  where: ResourceWhereInputSchema.optional(),
  orderBy: z.union([ ResourceOrderByWithRelationInputSchema.array(),ResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResourceScalarFieldEnumSchema,ResourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ResourceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ResourceFindFirstOrThrowArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  where: ResourceWhereInputSchema.optional(),
  orderBy: z.union([ ResourceOrderByWithRelationInputSchema.array(),ResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResourceScalarFieldEnumSchema,ResourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ResourceFindManyArgsSchema: z.ZodType<Prisma.ResourceFindManyArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  where: ResourceWhereInputSchema.optional(),
  orderBy: z.union([ ResourceOrderByWithRelationInputSchema.array(),ResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ResourceScalarFieldEnumSchema,ResourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ResourceAggregateArgsSchema: z.ZodType<Prisma.ResourceAggregateArgs> = z.object({
  where: ResourceWhereInputSchema.optional(),
  orderBy: z.union([ ResourceOrderByWithRelationInputSchema.array(),ResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ResourceGroupByArgsSchema: z.ZodType<Prisma.ResourceGroupByArgs> = z.object({
  where: ResourceWhereInputSchema.optional(),
  orderBy: z.union([ ResourceOrderByWithAggregationInputSchema.array(),ResourceOrderByWithAggregationInputSchema ]).optional(),
  by: ResourceScalarFieldEnumSchema.array(),
  having: ResourceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ResourceFindUniqueArgsSchema: z.ZodType<Prisma.ResourceFindUniqueArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  where: ResourceWhereUniqueInputSchema,
}).strict() ;

export const ResourceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ResourceFindUniqueOrThrowArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  where: ResourceWhereUniqueInputSchema,
}).strict() ;

export const PermissionFindFirstArgsSchema: z.ZodType<Prisma.PermissionFindFirstArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PermissionFindFirstOrThrowArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionFindManyArgsSchema: z.ZodType<Prisma.PermissionFindManyArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionAggregateArgsSchema: z.ZodType<Prisma.PermissionAggregateArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionGroupByArgsSchema: z.ZodType<Prisma.PermissionGroupByArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithAggregationInputSchema.array(),PermissionOrderByWithAggregationInputSchema ]).optional(),
  by: PermissionScalarFieldEnumSchema.array(),
  having: PermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionFindUniqueArgsSchema: z.ZodType<Prisma.PermissionFindUniqueArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PermissionFindUniqueOrThrowArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomPermissionFindFirstArgsSchema: z.ZodType<Prisma.CustomPermissionFindFirstArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  where: CustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomPermissionOrderByWithRelationInputSchema.array(),CustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomPermissionScalarFieldEnumSchema,CustomPermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomPermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomPermissionFindFirstOrThrowArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  where: CustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomPermissionOrderByWithRelationInputSchema.array(),CustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomPermissionScalarFieldEnumSchema,CustomPermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomPermissionFindManyArgsSchema: z.ZodType<Prisma.CustomPermissionFindManyArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  where: CustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomPermissionOrderByWithRelationInputSchema.array(),CustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomPermissionScalarFieldEnumSchema,CustomPermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomPermissionAggregateArgsSchema: z.ZodType<Prisma.CustomPermissionAggregateArgs> = z.object({
  where: CustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomPermissionOrderByWithRelationInputSchema.array(),CustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomPermissionGroupByArgsSchema: z.ZodType<Prisma.CustomPermissionGroupByArgs> = z.object({
  where: CustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomPermissionOrderByWithAggregationInputSchema.array(),CustomPermissionOrderByWithAggregationInputSchema ]).optional(),
  by: CustomPermissionScalarFieldEnumSchema.array(),
  having: CustomPermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomPermissionFindUniqueArgsSchema: z.ZodType<Prisma.CustomPermissionFindUniqueArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  where: CustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomPermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomPermissionFindUniqueOrThrowArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  where: CustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionFindFirstArgsSchema: z.ZodType<Prisma.RolePermissionFindFirstArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RolePermissionFindFirstOrThrowArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionFindManyArgsSchema: z.ZodType<Prisma.RolePermissionFindManyArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionAggregateArgsSchema: z.ZodType<Prisma.RolePermissionAggregateArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RolePermissionGroupByArgsSchema: z.ZodType<Prisma.RolePermissionGroupByArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithAggregationInputSchema.array(),RolePermissionOrderByWithAggregationInputSchema ]).optional(),
  by: RolePermissionScalarFieldEnumSchema.array(),
  having: RolePermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RolePermissionFindUniqueArgsSchema: z.ZodType<Prisma.RolePermissionFindUniqueArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RolePermissionFindUniqueOrThrowArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RoleCustomPermissionFindFirstArgsSchema: z.ZodType<Prisma.RoleCustomPermissionFindFirstArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  where: RoleCustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ RoleCustomPermissionOrderByWithRelationInputSchema.array(),RoleCustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleCustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleCustomPermissionScalarFieldEnumSchema,RoleCustomPermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleCustomPermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RoleCustomPermissionFindFirstOrThrowArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  where: RoleCustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ RoleCustomPermissionOrderByWithRelationInputSchema.array(),RoleCustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleCustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleCustomPermissionScalarFieldEnumSchema,RoleCustomPermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleCustomPermissionFindManyArgsSchema: z.ZodType<Prisma.RoleCustomPermissionFindManyArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  where: RoleCustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ RoleCustomPermissionOrderByWithRelationInputSchema.array(),RoleCustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleCustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleCustomPermissionScalarFieldEnumSchema,RoleCustomPermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleCustomPermissionAggregateArgsSchema: z.ZodType<Prisma.RoleCustomPermissionAggregateArgs> = z.object({
  where: RoleCustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ RoleCustomPermissionOrderByWithRelationInputSchema.array(),RoleCustomPermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleCustomPermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RoleCustomPermissionGroupByArgsSchema: z.ZodType<Prisma.RoleCustomPermissionGroupByArgs> = z.object({
  where: RoleCustomPermissionWhereInputSchema.optional(),
  orderBy: z.union([ RoleCustomPermissionOrderByWithAggregationInputSchema.array(),RoleCustomPermissionOrderByWithAggregationInputSchema ]).optional(),
  by: RoleCustomPermissionScalarFieldEnumSchema.array(),
  having: RoleCustomPermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RoleCustomPermissionFindUniqueArgsSchema: z.ZodType<Prisma.RoleCustomPermissionFindUniqueArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  where: RoleCustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const RoleCustomPermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RoleCustomPermissionFindUniqueOrThrowArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  where: RoleCustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionApprovalFindFirstArgsSchema: z.ZodType<Prisma.PermissionApprovalFindFirstArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  where: PermissionApprovalWhereInputSchema.optional(),
  orderBy: z.union([ PermissionApprovalOrderByWithRelationInputSchema.array(),PermissionApprovalOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionApprovalScalarFieldEnumSchema,PermissionApprovalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionApprovalFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PermissionApprovalFindFirstOrThrowArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  where: PermissionApprovalWhereInputSchema.optional(),
  orderBy: z.union([ PermissionApprovalOrderByWithRelationInputSchema.array(),PermissionApprovalOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionApprovalScalarFieldEnumSchema,PermissionApprovalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionApprovalFindManyArgsSchema: z.ZodType<Prisma.PermissionApprovalFindManyArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  where: PermissionApprovalWhereInputSchema.optional(),
  orderBy: z.union([ PermissionApprovalOrderByWithRelationInputSchema.array(),PermissionApprovalOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionApprovalScalarFieldEnumSchema,PermissionApprovalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionApprovalAggregateArgsSchema: z.ZodType<Prisma.PermissionApprovalAggregateArgs> = z.object({
  where: PermissionApprovalWhereInputSchema.optional(),
  orderBy: z.union([ PermissionApprovalOrderByWithRelationInputSchema.array(),PermissionApprovalOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionApprovalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionApprovalGroupByArgsSchema: z.ZodType<Prisma.PermissionApprovalGroupByArgs> = z.object({
  where: PermissionApprovalWhereInputSchema.optional(),
  orderBy: z.union([ PermissionApprovalOrderByWithAggregationInputSchema.array(),PermissionApprovalOrderByWithAggregationInputSchema ]).optional(),
  by: PermissionApprovalScalarFieldEnumSchema.array(),
  having: PermissionApprovalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionApprovalFindUniqueArgsSchema: z.ZodType<Prisma.PermissionApprovalFindUniqueArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  where: PermissionApprovalWhereUniqueInputSchema,
}).strict() ;

export const PermissionApprovalFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PermissionApprovalFindUniqueOrThrowArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  where: PermissionApprovalWhereUniqueInputSchema,
}).strict() ;

export const OtpCreateArgsSchema: z.ZodType<Prisma.OtpCreateArgs> = z.object({
  select: OtpSelectSchema.optional(),
  data: z.union([ OtpCreateInputSchema,OtpUncheckedCreateInputSchema ]),
}).strict() ;

export const OtpUpsertArgsSchema: z.ZodType<Prisma.OtpUpsertArgs> = z.object({
  select: OtpSelectSchema.optional(),
  where: OtpWhereUniqueInputSchema,
  create: z.union([ OtpCreateInputSchema,OtpUncheckedCreateInputSchema ]),
  update: z.union([ OtpUpdateInputSchema,OtpUncheckedUpdateInputSchema ]),
}).strict() ;

export const OtpCreateManyArgsSchema: z.ZodType<Prisma.OtpCreateManyArgs> = z.object({
  data: z.union([ OtpCreateManyInputSchema,OtpCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OtpCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OtpCreateManyAndReturnArgs> = z.object({
  data: z.union([ OtpCreateManyInputSchema,OtpCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OtpDeleteArgsSchema: z.ZodType<Prisma.OtpDeleteArgs> = z.object({
  select: OtpSelectSchema.optional(),
  where: OtpWhereUniqueInputSchema,
}).strict() ;

export const OtpUpdateArgsSchema: z.ZodType<Prisma.OtpUpdateArgs> = z.object({
  select: OtpSelectSchema.optional(),
  data: z.union([ OtpUpdateInputSchema,OtpUncheckedUpdateInputSchema ]),
  where: OtpWhereUniqueInputSchema,
}).strict() ;

export const OtpUpdateManyArgsSchema: z.ZodType<Prisma.OtpUpdateManyArgs> = z.object({
  data: z.union([ OtpUpdateManyMutationInputSchema,OtpUncheckedUpdateManyInputSchema ]),
  where: OtpWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OtpUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OtpUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OtpUpdateManyMutationInputSchema,OtpUncheckedUpdateManyInputSchema ]),
  where: OtpWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OtpDeleteManyArgsSchema: z.ZodType<Prisma.OtpDeleteManyArgs> = z.object({
  where: OtpWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserIdentifierCreateArgsSchema: z.ZodType<Prisma.UserIdentifierCreateArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  data: z.union([ UserIdentifierCreateInputSchema,UserIdentifierUncheckedCreateInputSchema ]),
}).strict() ;

export const UserIdentifierUpsertArgsSchema: z.ZodType<Prisma.UserIdentifierUpsertArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  where: UserIdentifierWhereUniqueInputSchema,
  create: z.union([ UserIdentifierCreateInputSchema,UserIdentifierUncheckedCreateInputSchema ]),
  update: z.union([ UserIdentifierUpdateInputSchema,UserIdentifierUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserIdentifierCreateManyArgsSchema: z.ZodType<Prisma.UserIdentifierCreateManyArgs> = z.object({
  data: z.union([ UserIdentifierCreateManyInputSchema,UserIdentifierCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserIdentifierCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserIdentifierCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserIdentifierCreateManyInputSchema,UserIdentifierCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserIdentifierDeleteArgsSchema: z.ZodType<Prisma.UserIdentifierDeleteArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  where: UserIdentifierWhereUniqueInputSchema,
}).strict() ;

export const UserIdentifierUpdateArgsSchema: z.ZodType<Prisma.UserIdentifierUpdateArgs> = z.object({
  select: UserIdentifierSelectSchema.optional(),
  include: UserIdentifierIncludeSchema.optional(),
  data: z.union([ UserIdentifierUpdateInputSchema,UserIdentifierUncheckedUpdateInputSchema ]),
  where: UserIdentifierWhereUniqueInputSchema,
}).strict() ;

export const UserIdentifierUpdateManyArgsSchema: z.ZodType<Prisma.UserIdentifierUpdateManyArgs> = z.object({
  data: z.union([ UserIdentifierUpdateManyMutationInputSchema,UserIdentifierUncheckedUpdateManyInputSchema ]),
  where: UserIdentifierWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserIdentifierUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserIdentifierUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserIdentifierUpdateManyMutationInputSchema,UserIdentifierUncheckedUpdateManyInputSchema ]),
  where: UserIdentifierWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserIdentifierDeleteManyArgsSchema: z.ZodType<Prisma.UserIdentifierDeleteManyArgs> = z.object({
  where: UserIdentifierWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserProfileCreateArgsSchema: z.ZodType<Prisma.UserProfileCreateArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  data: z.union([ UserProfileCreateInputSchema,UserProfileUncheckedCreateInputSchema ]),
}).strict() ;

export const UserProfileUpsertArgsSchema: z.ZodType<Prisma.UserProfileUpsertArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
  create: z.union([ UserProfileCreateInputSchema,UserProfileUncheckedCreateInputSchema ]),
  update: z.union([ UserProfileUpdateInputSchema,UserProfileUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserProfileCreateManyArgsSchema: z.ZodType<Prisma.UserProfileCreateManyArgs> = z.object({
  data: z.union([ UserProfileCreateManyInputSchema,UserProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserProfileCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserProfileCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserProfileCreateManyInputSchema,UserProfileCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserProfileDeleteArgsSchema: z.ZodType<Prisma.UserProfileDeleteArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const UserProfileUpdateArgsSchema: z.ZodType<Prisma.UserProfileUpdateArgs> = z.object({
  select: UserProfileSelectSchema.optional(),
  include: UserProfileIncludeSchema.optional(),
  data: z.union([ UserProfileUpdateInputSchema,UserProfileUncheckedUpdateInputSchema ]),
  where: UserProfileWhereUniqueInputSchema,
}).strict() ;

export const UserProfileUpdateManyArgsSchema: z.ZodType<Prisma.UserProfileUpdateManyArgs> = z.object({
  data: z.union([ UserProfileUpdateManyMutationInputSchema,UserProfileUncheckedUpdateManyInputSchema ]),
  where: UserProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserProfileUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserProfileUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserProfileUpdateManyMutationInputSchema,UserProfileUncheckedUpdateManyInputSchema ]),
  where: UserProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserProfileDeleteManyArgsSchema: z.ZodType<Prisma.UserProfileDeleteManyArgs> = z.object({
  where: UserProfileWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RefreshTokenCreateArgsSchema: z.ZodType<Prisma.RefreshTokenCreateArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  data: z.union([ RefreshTokenCreateInputSchema,RefreshTokenUncheckedCreateInputSchema ]),
}).strict() ;

export const RefreshTokenUpsertArgsSchema: z.ZodType<Prisma.RefreshTokenUpsertArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  where: RefreshTokenWhereUniqueInputSchema,
  create: z.union([ RefreshTokenCreateInputSchema,RefreshTokenUncheckedCreateInputSchema ]),
  update: z.union([ RefreshTokenUpdateInputSchema,RefreshTokenUncheckedUpdateInputSchema ]),
}).strict() ;

export const RefreshTokenCreateManyArgsSchema: z.ZodType<Prisma.RefreshTokenCreateManyArgs> = z.object({
  data: z.union([ RefreshTokenCreateManyInputSchema,RefreshTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RefreshTokenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RefreshTokenCreateManyAndReturnArgs> = z.object({
  data: z.union([ RefreshTokenCreateManyInputSchema,RefreshTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RefreshTokenDeleteArgsSchema: z.ZodType<Prisma.RefreshTokenDeleteArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  where: RefreshTokenWhereUniqueInputSchema,
}).strict() ;

export const RefreshTokenUpdateArgsSchema: z.ZodType<Prisma.RefreshTokenUpdateArgs> = z.object({
  select: RefreshTokenSelectSchema.optional(),
  include: RefreshTokenIncludeSchema.optional(),
  data: z.union([ RefreshTokenUpdateInputSchema,RefreshTokenUncheckedUpdateInputSchema ]),
  where: RefreshTokenWhereUniqueInputSchema,
}).strict() ;

export const RefreshTokenUpdateManyArgsSchema: z.ZodType<Prisma.RefreshTokenUpdateManyArgs> = z.object({
  data: z.union([ RefreshTokenUpdateManyMutationInputSchema,RefreshTokenUncheckedUpdateManyInputSchema ]),
  where: RefreshTokenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RefreshTokenUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RefreshTokenUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RefreshTokenUpdateManyMutationInputSchema,RefreshTokenUncheckedUpdateManyInputSchema ]),
  where: RefreshTokenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RefreshTokenDeleteManyArgsSchema: z.ZodType<Prisma.RefreshTokenDeleteManyArgs> = z.object({
  where: RefreshTokenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LanguageCreateArgsSchema: z.ZodType<Prisma.LanguageCreateArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  data: z.union([ LanguageCreateInputSchema,LanguageUncheckedCreateInputSchema ]),
}).strict() ;

export const LanguageUpsertArgsSchema: z.ZodType<Prisma.LanguageUpsertArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
  create: z.union([ LanguageCreateInputSchema,LanguageUncheckedCreateInputSchema ]),
  update: z.union([ LanguageUpdateInputSchema,LanguageUncheckedUpdateInputSchema ]),
}).strict() ;

export const LanguageCreateManyArgsSchema: z.ZodType<Prisma.LanguageCreateManyArgs> = z.object({
  data: z.union([ LanguageCreateManyInputSchema,LanguageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LanguageCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LanguageCreateManyAndReturnArgs> = z.object({
  data: z.union([ LanguageCreateManyInputSchema,LanguageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LanguageDeleteArgsSchema: z.ZodType<Prisma.LanguageDeleteArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageUpdateArgsSchema: z.ZodType<Prisma.LanguageUpdateArgs> = z.object({
  select: LanguageSelectSchema.optional(),
  include: LanguageIncludeSchema.optional(),
  data: z.union([ LanguageUpdateInputSchema,LanguageUncheckedUpdateInputSchema ]),
  where: LanguageWhereUniqueInputSchema,
}).strict() ;

export const LanguageUpdateManyArgsSchema: z.ZodType<Prisma.LanguageUpdateManyArgs> = z.object({
  data: z.union([ LanguageUpdateManyMutationInputSchema,LanguageUncheckedUpdateManyInputSchema ]),
  where: LanguageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LanguageUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.LanguageUpdateManyAndReturnArgs> = z.object({
  data: z.union([ LanguageUpdateManyMutationInputSchema,LanguageUncheckedUpdateManyInputSchema ]),
  where: LanguageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LanguageDeleteManyArgsSchema: z.ZodType<Prisma.LanguageDeleteManyArgs> = z.object({
  where: LanguageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IndustryCategoryCreateArgsSchema: z.ZodType<Prisma.IndustryCategoryCreateArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  data: z.union([ IndustryCategoryCreateInputSchema,IndustryCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const IndustryCategoryUpsertArgsSchema: z.ZodType<Prisma.IndustryCategoryUpsertArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  where: IndustryCategoryWhereUniqueInputSchema,
  create: z.union([ IndustryCategoryCreateInputSchema,IndustryCategoryUncheckedCreateInputSchema ]),
  update: z.union([ IndustryCategoryUpdateInputSchema,IndustryCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const IndustryCategoryCreateManyArgsSchema: z.ZodType<Prisma.IndustryCategoryCreateManyArgs> = z.object({
  data: z.union([ IndustryCategoryCreateManyInputSchema,IndustryCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IndustryCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.IndustryCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ IndustryCategoryCreateManyInputSchema,IndustryCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IndustryCategoryDeleteArgsSchema: z.ZodType<Prisma.IndustryCategoryDeleteArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  where: IndustryCategoryWhereUniqueInputSchema,
}).strict() ;

export const IndustryCategoryUpdateArgsSchema: z.ZodType<Prisma.IndustryCategoryUpdateArgs> = z.object({
  select: IndustryCategorySelectSchema.optional(),
  include: IndustryCategoryIncludeSchema.optional(),
  data: z.union([ IndustryCategoryUpdateInputSchema,IndustryCategoryUncheckedUpdateInputSchema ]),
  where: IndustryCategoryWhereUniqueInputSchema,
}).strict() ;

export const IndustryCategoryUpdateManyArgsSchema: z.ZodType<Prisma.IndustryCategoryUpdateManyArgs> = z.object({
  data: z.union([ IndustryCategoryUpdateManyMutationInputSchema,IndustryCategoryUncheckedUpdateManyInputSchema ]),
  where: IndustryCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IndustryCategoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.IndustryCategoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ IndustryCategoryUpdateManyMutationInputSchema,IndustryCategoryUncheckedUpdateManyInputSchema ]),
  where: IndustryCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IndustryCategoryDeleteManyArgsSchema: z.ZodType<Prisma.IndustryCategoryDeleteManyArgs> = z.object({
  where: IndustryCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FiscalYearPatternCreateArgsSchema: z.ZodType<Prisma.FiscalYearPatternCreateArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  data: z.union([ FiscalYearPatternCreateInputSchema,FiscalYearPatternUncheckedCreateInputSchema ]),
}).strict() ;

export const FiscalYearPatternUpsertArgsSchema: z.ZodType<Prisma.FiscalYearPatternUpsertArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  where: FiscalYearPatternWhereUniqueInputSchema,
  create: z.union([ FiscalYearPatternCreateInputSchema,FiscalYearPatternUncheckedCreateInputSchema ]),
  update: z.union([ FiscalYearPatternUpdateInputSchema,FiscalYearPatternUncheckedUpdateInputSchema ]),
}).strict() ;

export const FiscalYearPatternCreateManyArgsSchema: z.ZodType<Prisma.FiscalYearPatternCreateManyArgs> = z.object({
  data: z.union([ FiscalYearPatternCreateManyInputSchema,FiscalYearPatternCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FiscalYearPatternCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FiscalYearPatternCreateManyAndReturnArgs> = z.object({
  data: z.union([ FiscalYearPatternCreateManyInputSchema,FiscalYearPatternCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FiscalYearPatternDeleteArgsSchema: z.ZodType<Prisma.FiscalYearPatternDeleteArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  where: FiscalYearPatternWhereUniqueInputSchema,
}).strict() ;

export const FiscalYearPatternUpdateArgsSchema: z.ZodType<Prisma.FiscalYearPatternUpdateArgs> = z.object({
  select: FiscalYearPatternSelectSchema.optional(),
  include: FiscalYearPatternIncludeSchema.optional(),
  data: z.union([ FiscalYearPatternUpdateInputSchema,FiscalYearPatternUncheckedUpdateInputSchema ]),
  where: FiscalYearPatternWhereUniqueInputSchema,
}).strict() ;

export const FiscalYearPatternUpdateManyArgsSchema: z.ZodType<Prisma.FiscalYearPatternUpdateManyArgs> = z.object({
  data: z.union([ FiscalYearPatternUpdateManyMutationInputSchema,FiscalYearPatternUncheckedUpdateManyInputSchema ]),
  where: FiscalYearPatternWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FiscalYearPatternUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.FiscalYearPatternUpdateManyAndReturnArgs> = z.object({
  data: z.union([ FiscalYearPatternUpdateManyMutationInputSchema,FiscalYearPatternUncheckedUpdateManyInputSchema ]),
  where: FiscalYearPatternWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FiscalYearPatternDeleteManyArgsSchema: z.ZodType<Prisma.FiscalYearPatternDeleteManyArgs> = z.object({
  where: FiscalYearPatternWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RegionCreateArgsSchema: z.ZodType<Prisma.RegionCreateArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  data: z.union([ RegionCreateInputSchema,RegionUncheckedCreateInputSchema ]),
}).strict() ;

export const RegionUpsertArgsSchema: z.ZodType<Prisma.RegionUpsertArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
  create: z.union([ RegionCreateInputSchema,RegionUncheckedCreateInputSchema ]),
  update: z.union([ RegionUpdateInputSchema,RegionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RegionCreateManyArgsSchema: z.ZodType<Prisma.RegionCreateManyArgs> = z.object({
  data: z.union([ RegionCreateManyInputSchema,RegionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RegionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RegionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RegionCreateManyInputSchema,RegionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RegionDeleteArgsSchema: z.ZodType<Prisma.RegionDeleteArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const RegionUpdateArgsSchema: z.ZodType<Prisma.RegionUpdateArgs> = z.object({
  select: RegionSelectSchema.optional(),
  include: RegionIncludeSchema.optional(),
  data: z.union([ RegionUpdateInputSchema,RegionUncheckedUpdateInputSchema ]),
  where: RegionWhereUniqueInputSchema,
}).strict() ;

export const RegionUpdateManyArgsSchema: z.ZodType<Prisma.RegionUpdateManyArgs> = z.object({
  data: z.union([ RegionUpdateManyMutationInputSchema,RegionUncheckedUpdateManyInputSchema ]),
  where: RegionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RegionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RegionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RegionUpdateManyMutationInputSchema,RegionUncheckedUpdateManyInputSchema ]),
  where: RegionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RegionDeleteManyArgsSchema: z.ZodType<Prisma.RegionDeleteManyArgs> = z.object({
  where: RegionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SubregionCreateArgsSchema: z.ZodType<Prisma.SubregionCreateArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  data: z.union([ SubregionCreateInputSchema,SubregionUncheckedCreateInputSchema ]),
}).strict() ;

export const SubregionUpsertArgsSchema: z.ZodType<Prisma.SubregionUpsertArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  where: SubregionWhereUniqueInputSchema,
  create: z.union([ SubregionCreateInputSchema,SubregionUncheckedCreateInputSchema ]),
  update: z.union([ SubregionUpdateInputSchema,SubregionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SubregionCreateManyArgsSchema: z.ZodType<Prisma.SubregionCreateManyArgs> = z.object({
  data: z.union([ SubregionCreateManyInputSchema,SubregionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SubregionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SubregionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SubregionCreateManyInputSchema,SubregionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SubregionDeleteArgsSchema: z.ZodType<Prisma.SubregionDeleteArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  where: SubregionWhereUniqueInputSchema,
}).strict() ;

export const SubregionUpdateArgsSchema: z.ZodType<Prisma.SubregionUpdateArgs> = z.object({
  select: SubregionSelectSchema.optional(),
  include: SubregionIncludeSchema.optional(),
  data: z.union([ SubregionUpdateInputSchema,SubregionUncheckedUpdateInputSchema ]),
  where: SubregionWhereUniqueInputSchema,
}).strict() ;

export const SubregionUpdateManyArgsSchema: z.ZodType<Prisma.SubregionUpdateManyArgs> = z.object({
  data: z.union([ SubregionUpdateManyMutationInputSchema,SubregionUncheckedUpdateManyInputSchema ]),
  where: SubregionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SubregionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SubregionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SubregionUpdateManyMutationInputSchema,SubregionUncheckedUpdateManyInputSchema ]),
  where: SubregionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SubregionDeleteManyArgsSchema: z.ZodType<Prisma.SubregionDeleteManyArgs> = z.object({
  where: SubregionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CurrencyCreateArgsSchema: z.ZodType<Prisma.CurrencyCreateArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  data: z.union([ CurrencyCreateInputSchema,CurrencyUncheckedCreateInputSchema ]),
}).strict() ;

export const CurrencyUpsertArgsSchema: z.ZodType<Prisma.CurrencyUpsertArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  where: CurrencyWhereUniqueInputSchema,
  create: z.union([ CurrencyCreateInputSchema,CurrencyUncheckedCreateInputSchema ]),
  update: z.union([ CurrencyUpdateInputSchema,CurrencyUncheckedUpdateInputSchema ]),
}).strict() ;

export const CurrencyCreateManyArgsSchema: z.ZodType<Prisma.CurrencyCreateManyArgs> = z.object({
  data: z.union([ CurrencyCreateManyInputSchema,CurrencyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CurrencyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CurrencyCreateManyAndReturnArgs> = z.object({
  data: z.union([ CurrencyCreateManyInputSchema,CurrencyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CurrencyDeleteArgsSchema: z.ZodType<Prisma.CurrencyDeleteArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  where: CurrencyWhereUniqueInputSchema,
}).strict() ;

export const CurrencyUpdateArgsSchema: z.ZodType<Prisma.CurrencyUpdateArgs> = z.object({
  select: CurrencySelectSchema.optional(),
  include: CurrencyIncludeSchema.optional(),
  data: z.union([ CurrencyUpdateInputSchema,CurrencyUncheckedUpdateInputSchema ]),
  where: CurrencyWhereUniqueInputSchema,
}).strict() ;

export const CurrencyUpdateManyArgsSchema: z.ZodType<Prisma.CurrencyUpdateManyArgs> = z.object({
  data: z.union([ CurrencyUpdateManyMutationInputSchema,CurrencyUncheckedUpdateManyInputSchema ]),
  where: CurrencyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CurrencyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CurrencyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CurrencyUpdateManyMutationInputSchema,CurrencyUncheckedUpdateManyInputSchema ]),
  where: CurrencyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CurrencyDeleteManyArgsSchema: z.ZodType<Prisma.CurrencyDeleteManyArgs> = z.object({
  where: CurrencyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PhoneCodeCreateArgsSchema: z.ZodType<Prisma.PhoneCodeCreateArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  data: z.union([ PhoneCodeCreateInputSchema,PhoneCodeUncheckedCreateInputSchema ]),
}).strict() ;

export const PhoneCodeUpsertArgsSchema: z.ZodType<Prisma.PhoneCodeUpsertArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  where: PhoneCodeWhereUniqueInputSchema,
  create: z.union([ PhoneCodeCreateInputSchema,PhoneCodeUncheckedCreateInputSchema ]),
  update: z.union([ PhoneCodeUpdateInputSchema,PhoneCodeUncheckedUpdateInputSchema ]),
}).strict() ;

export const PhoneCodeCreateManyArgsSchema: z.ZodType<Prisma.PhoneCodeCreateManyArgs> = z.object({
  data: z.union([ PhoneCodeCreateManyInputSchema,PhoneCodeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PhoneCodeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PhoneCodeCreateManyAndReturnArgs> = z.object({
  data: z.union([ PhoneCodeCreateManyInputSchema,PhoneCodeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PhoneCodeDeleteArgsSchema: z.ZodType<Prisma.PhoneCodeDeleteArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  where: PhoneCodeWhereUniqueInputSchema,
}).strict() ;

export const PhoneCodeUpdateArgsSchema: z.ZodType<Prisma.PhoneCodeUpdateArgs> = z.object({
  select: PhoneCodeSelectSchema.optional(),
  include: PhoneCodeIncludeSchema.optional(),
  data: z.union([ PhoneCodeUpdateInputSchema,PhoneCodeUncheckedUpdateInputSchema ]),
  where: PhoneCodeWhereUniqueInputSchema,
}).strict() ;

export const PhoneCodeUpdateManyArgsSchema: z.ZodType<Prisma.PhoneCodeUpdateManyArgs> = z.object({
  data: z.union([ PhoneCodeUpdateManyMutationInputSchema,PhoneCodeUncheckedUpdateManyInputSchema ]),
  where: PhoneCodeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PhoneCodeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PhoneCodeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PhoneCodeUpdateManyMutationInputSchema,PhoneCodeUncheckedUpdateManyInputSchema ]),
  where: PhoneCodeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PhoneCodeDeleteManyArgsSchema: z.ZodType<Prisma.PhoneCodeDeleteManyArgs> = z.object({
  where: PhoneCodeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TimeZoneCreateArgsSchema: z.ZodType<Prisma.TimeZoneCreateArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  data: z.union([ TimeZoneCreateInputSchema,TimeZoneUncheckedCreateInputSchema ]),
}).strict() ;

export const TimeZoneUpsertArgsSchema: z.ZodType<Prisma.TimeZoneUpsertArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  where: TimeZoneWhereUniqueInputSchema,
  create: z.union([ TimeZoneCreateInputSchema,TimeZoneUncheckedCreateInputSchema ]),
  update: z.union([ TimeZoneUpdateInputSchema,TimeZoneUncheckedUpdateInputSchema ]),
}).strict() ;

export const TimeZoneCreateManyArgsSchema: z.ZodType<Prisma.TimeZoneCreateManyArgs> = z.object({
  data: z.union([ TimeZoneCreateManyInputSchema,TimeZoneCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TimeZoneCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TimeZoneCreateManyAndReturnArgs> = z.object({
  data: z.union([ TimeZoneCreateManyInputSchema,TimeZoneCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TimeZoneDeleteArgsSchema: z.ZodType<Prisma.TimeZoneDeleteArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  where: TimeZoneWhereUniqueInputSchema,
}).strict() ;

export const TimeZoneUpdateArgsSchema: z.ZodType<Prisma.TimeZoneUpdateArgs> = z.object({
  select: TimeZoneSelectSchema.optional(),
  include: TimeZoneIncludeSchema.optional(),
  data: z.union([ TimeZoneUpdateInputSchema,TimeZoneUncheckedUpdateInputSchema ]),
  where: TimeZoneWhereUniqueInputSchema,
}).strict() ;

export const TimeZoneUpdateManyArgsSchema: z.ZodType<Prisma.TimeZoneUpdateManyArgs> = z.object({
  data: z.union([ TimeZoneUpdateManyMutationInputSchema,TimeZoneUncheckedUpdateManyInputSchema ]),
  where: TimeZoneWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TimeZoneUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TimeZoneUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TimeZoneUpdateManyMutationInputSchema,TimeZoneUncheckedUpdateManyInputSchema ]),
  where: TimeZoneWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TimeZoneDeleteManyArgsSchema: z.ZodType<Prisma.TimeZoneDeleteManyArgs> = z.object({
  where: TimeZoneWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TranslationCreateArgsSchema: z.ZodType<Prisma.TranslationCreateArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  data: z.union([ TranslationCreateInputSchema,TranslationUncheckedCreateInputSchema ]),
}).strict() ;

export const TranslationUpsertArgsSchema: z.ZodType<Prisma.TranslationUpsertArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  where: TranslationWhereUniqueInputSchema,
  create: z.union([ TranslationCreateInputSchema,TranslationUncheckedCreateInputSchema ]),
  update: z.union([ TranslationUpdateInputSchema,TranslationUncheckedUpdateInputSchema ]),
}).strict() ;

export const TranslationCreateManyArgsSchema: z.ZodType<Prisma.TranslationCreateManyArgs> = z.object({
  data: z.union([ TranslationCreateManyInputSchema,TranslationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TranslationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TranslationCreateManyAndReturnArgs> = z.object({
  data: z.union([ TranslationCreateManyInputSchema,TranslationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TranslationDeleteArgsSchema: z.ZodType<Prisma.TranslationDeleteArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  where: TranslationWhereUniqueInputSchema,
}).strict() ;

export const TranslationUpdateArgsSchema: z.ZodType<Prisma.TranslationUpdateArgs> = z.object({
  select: TranslationSelectSchema.optional(),
  include: TranslationIncludeSchema.optional(),
  data: z.union([ TranslationUpdateInputSchema,TranslationUncheckedUpdateInputSchema ]),
  where: TranslationWhereUniqueInputSchema,
}).strict() ;

export const TranslationUpdateManyArgsSchema: z.ZodType<Prisma.TranslationUpdateManyArgs> = z.object({
  data: z.union([ TranslationUpdateManyMutationInputSchema,TranslationUncheckedUpdateManyInputSchema ]),
  where: TranslationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TranslationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TranslationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TranslationUpdateManyMutationInputSchema,TranslationUncheckedUpdateManyInputSchema ]),
  where: TranslationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TranslationDeleteManyArgsSchema: z.ZodType<Prisma.TranslationDeleteManyArgs> = z.object({
  where: TranslationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryCreateArgsSchema: z.ZodType<Prisma.CountryCreateArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  data: z.union([ CountryCreateInputSchema,CountryUncheckedCreateInputSchema ]),
}).strict() ;

export const CountryUpsertArgsSchema: z.ZodType<Prisma.CountryUpsertArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
  create: z.union([ CountryCreateInputSchema,CountryUncheckedCreateInputSchema ]),
  update: z.union([ CountryUpdateInputSchema,CountryUncheckedUpdateInputSchema ]),
}).strict() ;

export const CountryCreateManyArgsSchema: z.ZodType<Prisma.CountryCreateManyArgs> = z.object({
  data: z.union([ CountryCreateManyInputSchema,CountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CountryCreateManyAndReturnArgs> = z.object({
  data: z.union([ CountryCreateManyInputSchema,CountryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CountryDeleteArgsSchema: z.ZodType<Prisma.CountryDeleteArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryUpdateArgsSchema: z.ZodType<Prisma.CountryUpdateArgs> = z.object({
  select: CountrySelectSchema.optional(),
  include: CountryIncludeSchema.optional(),
  data: z.union([ CountryUpdateInputSchema,CountryUncheckedUpdateInputSchema ]),
  where: CountryWhereUniqueInputSchema,
}).strict() ;

export const CountryUpdateManyArgsSchema: z.ZodType<Prisma.CountryUpdateManyArgs> = z.object({
  data: z.union([ CountryUpdateManyMutationInputSchema,CountryUncheckedUpdateManyInputSchema ]),
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CountryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CountryUpdateManyMutationInputSchema,CountryUncheckedUpdateManyInputSchema ]),
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CountryDeleteManyArgsSchema: z.ZodType<Prisma.CountryDeleteManyArgs> = z.object({
  where: CountryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StateCreateArgsSchema: z.ZodType<Prisma.StateCreateArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  data: z.union([ StateCreateInputSchema,StateUncheckedCreateInputSchema ]),
}).strict() ;

export const StateUpsertArgsSchema: z.ZodType<Prisma.StateUpsertArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  where: StateWhereUniqueInputSchema,
  create: z.union([ StateCreateInputSchema,StateUncheckedCreateInputSchema ]),
  update: z.union([ StateUpdateInputSchema,StateUncheckedUpdateInputSchema ]),
}).strict() ;

export const StateCreateManyArgsSchema: z.ZodType<Prisma.StateCreateManyArgs> = z.object({
  data: z.union([ StateCreateManyInputSchema,StateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.StateCreateManyAndReturnArgs> = z.object({
  data: z.union([ StateCreateManyInputSchema,StateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StateDeleteArgsSchema: z.ZodType<Prisma.StateDeleteArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  where: StateWhereUniqueInputSchema,
}).strict() ;

export const StateUpdateArgsSchema: z.ZodType<Prisma.StateUpdateArgs> = z.object({
  select: StateSelectSchema.optional(),
  include: StateIncludeSchema.optional(),
  data: z.union([ StateUpdateInputSchema,StateUncheckedUpdateInputSchema ]),
  where: StateWhereUniqueInputSchema,
}).strict() ;

export const StateUpdateManyArgsSchema: z.ZodType<Prisma.StateUpdateManyArgs> = z.object({
  data: z.union([ StateUpdateManyMutationInputSchema,StateUncheckedUpdateManyInputSchema ]),
  where: StateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StateUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.StateUpdateManyAndReturnArgs> = z.object({
  data: z.union([ StateUpdateManyMutationInputSchema,StateUncheckedUpdateManyInputSchema ]),
  where: StateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StateDeleteManyArgsSchema: z.ZodType<Prisma.StateDeleteManyArgs> = z.object({
  where: StateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CityCreateArgsSchema: z.ZodType<Prisma.CityCreateArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  data: z.union([ CityCreateInputSchema,CityUncheckedCreateInputSchema ]),
}).strict() ;

export const CityUpsertArgsSchema: z.ZodType<Prisma.CityUpsertArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
  create: z.union([ CityCreateInputSchema,CityUncheckedCreateInputSchema ]),
  update: z.union([ CityUpdateInputSchema,CityUncheckedUpdateInputSchema ]),
}).strict() ;

export const CityCreateManyArgsSchema: z.ZodType<Prisma.CityCreateManyArgs> = z.object({
  data: z.union([ CityCreateManyInputSchema,CityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CityCreateManyAndReturnArgs> = z.object({
  data: z.union([ CityCreateManyInputSchema,CityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CityDeleteArgsSchema: z.ZodType<Prisma.CityDeleteArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityUpdateArgsSchema: z.ZodType<Prisma.CityUpdateArgs> = z.object({
  select: CitySelectSchema.optional(),
  include: CityIncludeSchema.optional(),
  data: z.union([ CityUpdateInputSchema,CityUncheckedUpdateInputSchema ]),
  where: CityWhereUniqueInputSchema,
}).strict() ;

export const CityUpdateManyArgsSchema: z.ZodType<Prisma.CityUpdateManyArgs> = z.object({
  data: z.union([ CityUpdateManyMutationInputSchema,CityUncheckedUpdateManyInputSchema ]),
  where: CityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CityUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CityUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CityUpdateManyMutationInputSchema,CityUncheckedUpdateManyInputSchema ]),
  where: CityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CityDeleteManyArgsSchema: z.ZodType<Prisma.CityDeleteManyArgs> = z.object({
  where: CityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RoleCreateArgsSchema: z.ZodType<Prisma.RoleCreateArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  data: z.union([ RoleCreateInputSchema,RoleUncheckedCreateInputSchema ]),
}).strict() ;

export const RoleUpsertArgsSchema: z.ZodType<Prisma.RoleUpsertArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
  create: z.union([ RoleCreateInputSchema,RoleUncheckedCreateInputSchema ]),
  update: z.union([ RoleUpdateInputSchema,RoleUncheckedUpdateInputSchema ]),
}).strict() ;

export const RoleCreateManyArgsSchema: z.ZodType<Prisma.RoleCreateManyArgs> = z.object({
  data: z.union([ RoleCreateManyInputSchema,RoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RoleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RoleCreateManyAndReturnArgs> = z.object({
  data: z.union([ RoleCreateManyInputSchema,RoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RoleDeleteArgsSchema: z.ZodType<Prisma.RoleDeleteArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const RoleUpdateArgsSchema: z.ZodType<Prisma.RoleUpdateArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  data: z.union([ RoleUpdateInputSchema,RoleUncheckedUpdateInputSchema ]),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const RoleUpdateManyArgsSchema: z.ZodType<Prisma.RoleUpdateManyArgs> = z.object({
  data: z.union([ RoleUpdateManyMutationInputSchema,RoleUncheckedUpdateManyInputSchema ]),
  where: RoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RoleUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RoleUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RoleUpdateManyMutationInputSchema,RoleUncheckedUpdateManyInputSchema ]),
  where: RoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RoleDeleteManyArgsSchema: z.ZodType<Prisma.RoleDeleteManyArgs> = z.object({
  where: RoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserRoleCreateArgsSchema: z.ZodType<Prisma.UserRoleCreateArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  data: z.union([ UserRoleCreateInputSchema,UserRoleUncheckedCreateInputSchema ]),
}).strict() ;

export const UserRoleUpsertArgsSchema: z.ZodType<Prisma.UserRoleUpsertArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
  create: z.union([ UserRoleCreateInputSchema,UserRoleUncheckedCreateInputSchema ]),
  update: z.union([ UserRoleUpdateInputSchema,UserRoleUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserRoleCreateManyArgsSchema: z.ZodType<Prisma.UserRoleCreateManyArgs> = z.object({
  data: z.union([ UserRoleCreateManyInputSchema,UserRoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserRoleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserRoleCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserRoleCreateManyInputSchema,UserRoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserRoleDeleteArgsSchema: z.ZodType<Prisma.UserRoleDeleteArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleUpdateArgsSchema: z.ZodType<Prisma.UserRoleUpdateArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  data: z.union([ UserRoleUpdateInputSchema,UserRoleUncheckedUpdateInputSchema ]),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleUpdateManyArgsSchema: z.ZodType<Prisma.UserRoleUpdateManyArgs> = z.object({
  data: z.union([ UserRoleUpdateManyMutationInputSchema,UserRoleUncheckedUpdateManyInputSchema ]),
  where: UserRoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserRoleUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserRoleUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserRoleUpdateManyMutationInputSchema,UserRoleUncheckedUpdateManyInputSchema ]),
  where: UserRoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserRoleDeleteManyArgsSchema: z.ZodType<Prisma.UserRoleDeleteManyArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActionCreateArgsSchema: z.ZodType<Prisma.ActionCreateArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  data: z.union([ ActionCreateInputSchema,ActionUncheckedCreateInputSchema ]),
}).strict() ;

export const ActionUpsertArgsSchema: z.ZodType<Prisma.ActionUpsertArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  where: ActionWhereUniqueInputSchema,
  create: z.union([ ActionCreateInputSchema,ActionUncheckedCreateInputSchema ]),
  update: z.union([ ActionUpdateInputSchema,ActionUncheckedUpdateInputSchema ]),
}).strict() ;

export const ActionCreateManyArgsSchema: z.ZodType<Prisma.ActionCreateManyArgs> = z.object({
  data: z.union([ ActionCreateManyInputSchema,ActionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ActionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ActionCreateManyAndReturnArgs> = z.object({
  data: z.union([ ActionCreateManyInputSchema,ActionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ActionDeleteArgsSchema: z.ZodType<Prisma.ActionDeleteArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  where: ActionWhereUniqueInputSchema,
}).strict() ;

export const ActionUpdateArgsSchema: z.ZodType<Prisma.ActionUpdateArgs> = z.object({
  select: ActionSelectSchema.optional(),
  include: ActionIncludeSchema.optional(),
  data: z.union([ ActionUpdateInputSchema,ActionUncheckedUpdateInputSchema ]),
  where: ActionWhereUniqueInputSchema,
}).strict() ;

export const ActionUpdateManyArgsSchema: z.ZodType<Prisma.ActionUpdateManyArgs> = z.object({
  data: z.union([ ActionUpdateManyMutationInputSchema,ActionUncheckedUpdateManyInputSchema ]),
  where: ActionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ActionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ActionUpdateManyMutationInputSchema,ActionUncheckedUpdateManyInputSchema ]),
  where: ActionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ActionDeleteManyArgsSchema: z.ZodType<Prisma.ActionDeleteManyArgs> = z.object({
  where: ActionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ResourceCreateArgsSchema: z.ZodType<Prisma.ResourceCreateArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  data: z.union([ ResourceCreateInputSchema,ResourceUncheckedCreateInputSchema ]),
}).strict() ;

export const ResourceUpsertArgsSchema: z.ZodType<Prisma.ResourceUpsertArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  where: ResourceWhereUniqueInputSchema,
  create: z.union([ ResourceCreateInputSchema,ResourceUncheckedCreateInputSchema ]),
  update: z.union([ ResourceUpdateInputSchema,ResourceUncheckedUpdateInputSchema ]),
}).strict() ;

export const ResourceCreateManyArgsSchema: z.ZodType<Prisma.ResourceCreateManyArgs> = z.object({
  data: z.union([ ResourceCreateManyInputSchema,ResourceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ResourceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ResourceCreateManyAndReturnArgs> = z.object({
  data: z.union([ ResourceCreateManyInputSchema,ResourceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ResourceDeleteArgsSchema: z.ZodType<Prisma.ResourceDeleteArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  where: ResourceWhereUniqueInputSchema,
}).strict() ;

export const ResourceUpdateArgsSchema: z.ZodType<Prisma.ResourceUpdateArgs> = z.object({
  select: ResourceSelectSchema.optional(),
  include: ResourceIncludeSchema.optional(),
  data: z.union([ ResourceUpdateInputSchema,ResourceUncheckedUpdateInputSchema ]),
  where: ResourceWhereUniqueInputSchema,
}).strict() ;

export const ResourceUpdateManyArgsSchema: z.ZodType<Prisma.ResourceUpdateManyArgs> = z.object({
  data: z.union([ ResourceUpdateManyMutationInputSchema,ResourceUncheckedUpdateManyInputSchema ]),
  where: ResourceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ResourceUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ResourceUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ResourceUpdateManyMutationInputSchema,ResourceUncheckedUpdateManyInputSchema ]),
  where: ResourceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ResourceDeleteManyArgsSchema: z.ZodType<Prisma.ResourceDeleteManyArgs> = z.object({
  where: ResourceWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PermissionCreateArgsSchema: z.ZodType<Prisma.PermissionCreateArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  data: z.union([ PermissionCreateInputSchema,PermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const PermissionUpsertArgsSchema: z.ZodType<Prisma.PermissionUpsertArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
  create: z.union([ PermissionCreateInputSchema,PermissionUncheckedCreateInputSchema ]),
  update: z.union([ PermissionUpdateInputSchema,PermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const PermissionCreateManyArgsSchema: z.ZodType<Prisma.PermissionCreateManyArgs> = z.object({
  data: z.union([ PermissionCreateManyInputSchema,PermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ PermissionCreateManyInputSchema,PermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PermissionDeleteArgsSchema: z.ZodType<Prisma.PermissionDeleteArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionUpdateArgsSchema: z.ZodType<Prisma.PermissionUpdateArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  data: z.union([ PermissionUpdateInputSchema,PermissionUncheckedUpdateInputSchema ]),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionUpdateManyArgsSchema: z.ZodType<Prisma.PermissionUpdateManyArgs> = z.object({
  data: z.union([ PermissionUpdateManyMutationInputSchema,PermissionUncheckedUpdateManyInputSchema ]),
  where: PermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PermissionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PermissionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PermissionUpdateManyMutationInputSchema,PermissionUncheckedUpdateManyInputSchema ]),
  where: PermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PermissionDeleteManyArgsSchema: z.ZodType<Prisma.PermissionDeleteManyArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomPermissionCreateArgsSchema: z.ZodType<Prisma.CustomPermissionCreateArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  data: z.union([ CustomPermissionCreateInputSchema,CustomPermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomPermissionUpsertArgsSchema: z.ZodType<Prisma.CustomPermissionUpsertArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  where: CustomPermissionWhereUniqueInputSchema,
  create: z.union([ CustomPermissionCreateInputSchema,CustomPermissionUncheckedCreateInputSchema ]),
  update: z.union([ CustomPermissionUpdateInputSchema,CustomPermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomPermissionCreateManyArgsSchema: z.ZodType<Prisma.CustomPermissionCreateManyArgs> = z.object({
  data: z.union([ CustomPermissionCreateManyInputSchema,CustomPermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomPermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomPermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomPermissionCreateManyInputSchema,CustomPermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomPermissionDeleteArgsSchema: z.ZodType<Prisma.CustomPermissionDeleteArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  where: CustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomPermissionUpdateArgsSchema: z.ZodType<Prisma.CustomPermissionUpdateArgs> = z.object({
  select: CustomPermissionSelectSchema.optional(),
  include: CustomPermissionIncludeSchema.optional(),
  data: z.union([ CustomPermissionUpdateInputSchema,CustomPermissionUncheckedUpdateInputSchema ]),
  where: CustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomPermissionUpdateManyArgsSchema: z.ZodType<Prisma.CustomPermissionUpdateManyArgs> = z.object({
  data: z.union([ CustomPermissionUpdateManyMutationInputSchema,CustomPermissionUncheckedUpdateManyInputSchema ]),
  where: CustomPermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomPermissionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomPermissionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CustomPermissionUpdateManyMutationInputSchema,CustomPermissionUncheckedUpdateManyInputSchema ]),
  where: CustomPermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomPermissionDeleteManyArgsSchema: z.ZodType<Prisma.CustomPermissionDeleteManyArgs> = z.object({
  where: CustomPermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RolePermissionCreateArgsSchema: z.ZodType<Prisma.RolePermissionCreateArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  data: z.union([ RolePermissionCreateInputSchema,RolePermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const RolePermissionUpsertArgsSchema: z.ZodType<Prisma.RolePermissionUpsertArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
  create: z.union([ RolePermissionCreateInputSchema,RolePermissionUncheckedCreateInputSchema ]),
  update: z.union([ RolePermissionUpdateInputSchema,RolePermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RolePermissionCreateManyArgsSchema: z.ZodType<Prisma.RolePermissionCreateManyArgs> = z.object({
  data: z.union([ RolePermissionCreateManyInputSchema,RolePermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RolePermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RolePermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RolePermissionCreateManyInputSchema,RolePermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RolePermissionDeleteArgsSchema: z.ZodType<Prisma.RolePermissionDeleteArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionUpdateArgsSchema: z.ZodType<Prisma.RolePermissionUpdateArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  data: z.union([ RolePermissionUpdateInputSchema,RolePermissionUncheckedUpdateInputSchema ]),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionUpdateManyArgsSchema: z.ZodType<Prisma.RolePermissionUpdateManyArgs> = z.object({
  data: z.union([ RolePermissionUpdateManyMutationInputSchema,RolePermissionUncheckedUpdateManyInputSchema ]),
  where: RolePermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RolePermissionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RolePermissionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RolePermissionUpdateManyMutationInputSchema,RolePermissionUncheckedUpdateManyInputSchema ]),
  where: RolePermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RolePermissionDeleteManyArgsSchema: z.ZodType<Prisma.RolePermissionDeleteManyArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RoleCustomPermissionCreateArgsSchema: z.ZodType<Prisma.RoleCustomPermissionCreateArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  data: z.union([ RoleCustomPermissionCreateInputSchema,RoleCustomPermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const RoleCustomPermissionUpsertArgsSchema: z.ZodType<Prisma.RoleCustomPermissionUpsertArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  where: RoleCustomPermissionWhereUniqueInputSchema,
  create: z.union([ RoleCustomPermissionCreateInputSchema,RoleCustomPermissionUncheckedCreateInputSchema ]),
  update: z.union([ RoleCustomPermissionUpdateInputSchema,RoleCustomPermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RoleCustomPermissionCreateManyArgsSchema: z.ZodType<Prisma.RoleCustomPermissionCreateManyArgs> = z.object({
  data: z.union([ RoleCustomPermissionCreateManyInputSchema,RoleCustomPermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RoleCustomPermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RoleCustomPermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RoleCustomPermissionCreateManyInputSchema,RoleCustomPermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RoleCustomPermissionDeleteArgsSchema: z.ZodType<Prisma.RoleCustomPermissionDeleteArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  where: RoleCustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const RoleCustomPermissionUpdateArgsSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateArgs> = z.object({
  select: RoleCustomPermissionSelectSchema.optional(),
  include: RoleCustomPermissionIncludeSchema.optional(),
  data: z.union([ RoleCustomPermissionUpdateInputSchema,RoleCustomPermissionUncheckedUpdateInputSchema ]),
  where: RoleCustomPermissionWhereUniqueInputSchema,
}).strict() ;

export const RoleCustomPermissionUpdateManyArgsSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateManyArgs> = z.object({
  data: z.union([ RoleCustomPermissionUpdateManyMutationInputSchema,RoleCustomPermissionUncheckedUpdateManyInputSchema ]),
  where: RoleCustomPermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RoleCustomPermissionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RoleCustomPermissionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RoleCustomPermissionUpdateManyMutationInputSchema,RoleCustomPermissionUncheckedUpdateManyInputSchema ]),
  where: RoleCustomPermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RoleCustomPermissionDeleteManyArgsSchema: z.ZodType<Prisma.RoleCustomPermissionDeleteManyArgs> = z.object({
  where: RoleCustomPermissionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PermissionApprovalCreateArgsSchema: z.ZodType<Prisma.PermissionApprovalCreateArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  data: z.union([ PermissionApprovalCreateInputSchema,PermissionApprovalUncheckedCreateInputSchema ]),
}).strict() ;

export const PermissionApprovalUpsertArgsSchema: z.ZodType<Prisma.PermissionApprovalUpsertArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  where: PermissionApprovalWhereUniqueInputSchema,
  create: z.union([ PermissionApprovalCreateInputSchema,PermissionApprovalUncheckedCreateInputSchema ]),
  update: z.union([ PermissionApprovalUpdateInputSchema,PermissionApprovalUncheckedUpdateInputSchema ]),
}).strict() ;

export const PermissionApprovalCreateManyArgsSchema: z.ZodType<Prisma.PermissionApprovalCreateManyArgs> = z.object({
  data: z.union([ PermissionApprovalCreateManyInputSchema,PermissionApprovalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PermissionApprovalCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PermissionApprovalCreateManyAndReturnArgs> = z.object({
  data: z.union([ PermissionApprovalCreateManyInputSchema,PermissionApprovalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PermissionApprovalDeleteArgsSchema: z.ZodType<Prisma.PermissionApprovalDeleteArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  where: PermissionApprovalWhereUniqueInputSchema,
}).strict() ;

export const PermissionApprovalUpdateArgsSchema: z.ZodType<Prisma.PermissionApprovalUpdateArgs> = z.object({
  select: PermissionApprovalSelectSchema.optional(),
  include: PermissionApprovalIncludeSchema.optional(),
  data: z.union([ PermissionApprovalUpdateInputSchema,PermissionApprovalUncheckedUpdateInputSchema ]),
  where: PermissionApprovalWhereUniqueInputSchema,
}).strict() ;

export const PermissionApprovalUpdateManyArgsSchema: z.ZodType<Prisma.PermissionApprovalUpdateManyArgs> = z.object({
  data: z.union([ PermissionApprovalUpdateManyMutationInputSchema,PermissionApprovalUncheckedUpdateManyInputSchema ]),
  where: PermissionApprovalWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PermissionApprovalUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PermissionApprovalUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PermissionApprovalUpdateManyMutationInputSchema,PermissionApprovalUncheckedUpdateManyInputSchema ]),
  where: PermissionApprovalWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PermissionApprovalDeleteManyArgsSchema: z.ZodType<Prisma.PermissionApprovalDeleteManyArgs> = z.object({
  where: PermissionApprovalWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;