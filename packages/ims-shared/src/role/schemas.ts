// Generated by ts-to-zod
import { z } from "zod";

export const roleModelSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  organizationId: z.string(),
  createdById: z.string(),
  createdAt: z.date(),
  updatedAt: z.date(),
  expiresAt: z.date().optional(),
});

export const roleWhereInputSchema = roleModelSchema.partial();

export const roleCreateInputSchema = roleModelSchema.omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  expiresAt: true,
});

export const roleCreateFormSchema = roleCreateInputSchema.omit({
  createdById: true,
  organizationId: true,
});

export const rolePermissionCreateManyInputSchema = z.array(
  z.object({
    roleId: z.string(),
    permissionId: z.string(),
  })
);

export const roleUpdateInputSchema = roleCreateInputSchema.omit({
  createdById: true,
});

export const roleUpdateFormSchema = roleUpdateInputSchema.omit({
  organizationId: true,
});

export const roleUpdateBodySchema = roleUpdateInputSchema.and(
  z.object({
    permissions: rolePermissionCreateManyInputSchema,
  })
);

export const roleWhereUniqueInputSchema = z.union([
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId_name: z.object({
      name: z.string(),
      organizationId: z.string(),
    }),
  }),
]);

export const roleOrderByInputSchema = z.union([
  z.record(z.any(), z.union([z.literal("asc"), z.literal("desc")])),
  z.undefined(),
]);

export const roleCreateBodySchema = roleCreateInputSchema
  .omit({ createdById: true })
  .and(
    z.object({
      permissions: rolePermissionCreateManyInputSchema,
    })
  );
